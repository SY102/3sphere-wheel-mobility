
101112.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080043dc  080043dc  000053dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800444c  0800444c  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  0800444c  0800444c  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800444c  0800444c  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800444c  0800444c  0000544c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004450  08004450  00005450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004454  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  080044c4  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080044c4  000062a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a717  00000000  00000000  00006099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f2  00000000  00000000  000107b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  000129a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000813  00000000  00000000  00013458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018742  00000000  00000000  00013c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cff0  00000000  00000000  0002c3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008624f  00000000  00000000  0003939d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf5ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000314c  00000000  00000000  000bf630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000c277c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080043c4 	.word	0x080043c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080043c4 	.word	0x080043c4

0800014c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000160:	4b2c      	ldr	r3, [pc, #176]	@ (8000214 <MX_GPIO_Init+0xc8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2b      	ldr	r2, [pc, #172]	@ (8000214 <MX_GPIO_Init+0xc8>)
 8000166:	f043 0304 	orr.w	r3, r3, #4
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b29      	ldr	r3, [pc, #164]	@ (8000214 <MX_GPIO_Init+0xc8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0304 	and.w	r3, r3, #4
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000178:	4b26      	ldr	r3, [pc, #152]	@ (8000214 <MX_GPIO_Init+0xc8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a25      	ldr	r2, [pc, #148]	@ (8000214 <MX_GPIO_Init+0xc8>)
 800017e:	f043 0310 	orr.w	r3, r3, #16
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b23      	ldr	r3, [pc, #140]	@ (8000214 <MX_GPIO_Init+0xc8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0310 	and.w	r3, r3, #16
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CNS__pin_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	2111      	movs	r1, #17
 8000194:	4820      	ldr	r0, [pc, #128]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f001 f94f 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800019a:	2200      	movs	r2, #0
 800019c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80001a0:	481e      	ldr	r0, [pc, #120]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001a2:	f001 f949 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CNS__pin_Pin PA4 */
  GPIO_InitStruct.Pin = CNS__pin_Pin|GPIO_PIN_4;
 80001a6:	2311      	movs	r3, #17
 80001a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001aa:	2301      	movs	r3, #1
 80001ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ae:	2300      	movs	r3, #0
 80001b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001b2:	2302      	movs	r3, #2
 80001b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001b6:	f107 0308 	add.w	r3, r7, #8
 80001ba:	4619      	mov	r1, r3
 80001bc:	4816      	ldr	r0, [pc, #88]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001be:	f000 ffb7 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80001c2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80001c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c8:	2301      	movs	r3, #1
 80001ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001cc:	2300      	movs	r3, #0
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d0:	2302      	movs	r3, #2
 80001d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001d4:	f107 0308 	add.w	r3, r7, #8
 80001d8:	4619      	mov	r1, r3
 80001da:	4810      	ldr	r0, [pc, #64]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001dc:	f000 ffa8 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_pin_Pin */
  GPIO_InitStruct.Pin = CE_pin_Pin;
 80001e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80001e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000220 <MX_GPIO_Init+0xd4>)
 80001e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ea:	2300      	movs	r3, #0
 80001ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CE_pin_GPIO_Port, &GPIO_InitStruct);
 80001ee:	f107 0308 	add.w	r3, r7, #8
 80001f2:	4619      	mov	r1, r3
 80001f4:	4808      	ldr	r0, [pc, #32]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001f6:	f000 ff9b 	bl	8001130 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2100      	movs	r1, #0
 80001fe:	2017      	movs	r0, #23
 8000200:	f000 fead 	bl	8000f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000204:	2017      	movs	r0, #23
 8000206:	f000 fec6 	bl	8000f96 <HAL_NVIC_EnableIRQ>

}
 800020a:	bf00      	nop
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40021000 	.word	0x40021000
 8000218:	40010800 	.word	0x40010800
 800021c:	40011000 	.word	0x40011000
 8000220:	10110000 	.word	0x10110000

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 HAL_Init();
 8000228:	f000 fd3c 	bl	8000ca4 <HAL_Init>



	   write_register_multi(NRF24L01P_REG_RX_ADDR_P0, addr, 5);
 800022c:	2205      	movs	r2, #5
 800022e:	491c      	ldr	r1, [pc, #112]	@ (80002a0 <main+0x7c>)
 8000230:	200a      	movs	r0, #10
 8000232:	f000 f94b 	bl	80004cc <write_register_multi>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


  /* USER CODE BEGIN Init */
	   SystemClock_Config();
 8000236:	f000 f84f 	bl	80002d8 <SystemClock_Config>
	   MX_GPIO_Init();
 800023a:	f7ff ff87 	bl	800014c <MX_GPIO_Init>
	       MX_SPI1_Init();
 800023e:	f000 faf9 	bl	8000834 <MX_SPI1_Init>
	       MX_USART2_UART_Init();  // UART 초기화
 8000242:	f000 fc8d 	bl	8000b60 <MX_USART2_UART_Init>

	       nrf24l01p_rx_init(2, _1Mbps);  // 채널 2402MHz,
 8000246:	2100      	movs	r1, #0
 8000248:	2002      	movs	r0, #2
 800024a:	f000 f911 	bl	8000470 <nrf24l01p_rx_init>
	       write_register_multi(NRF24L01P_REG_RX_ADDR_P0, addr, 5);
 800024e:	2205      	movs	r2, #5
 8000250:	4913      	ldr	r1, [pc, #76]	@ (80002a0 <main+0x7c>)
 8000252:	200a      	movs	r0, #10
 8000254:	f000 f93a 	bl	80004cc <write_register_multi>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Receive(&huart2, rx_data, sizeof(rx_data), HAL_MAX_DELAY);  // UART2에서 데이터 수신
 8000258:	f04f 33ff 	mov.w	r3, #4294967295
 800025c:	2220      	movs	r2, #32
 800025e:	4911      	ldr	r1, [pc, #68]	@ (80002a4 <main+0x80>)
 8000260:	4811      	ldr	r0, [pc, #68]	@ (80002a8 <main+0x84>)
 8000262:	f002 fba3 	bl	80029ac <HAL_UART_Receive>

	      /* 수신된 데이터가 비어 있지 않으면 LED 켜기 */
	      if (rx_data[0] != '\0')
 8000266:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <main+0x80>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d00e      	beq.n	800028c <main+0x68>
	      {
	          /* PC8번 LED 켜기 */
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000274:	480d      	ldr	r0, [pc, #52]	@ (80002ac <main+0x88>)
 8000276:	f001 f8df 	bl	8001438 <HAL_GPIO_WritePin>

	          /* 수신된 데이터 출력 */
	          printf("Received: %s\n", rx_data);  // 수신된 데이터를 터미널에 출력
 800027a:	490a      	ldr	r1, [pc, #40]	@ (80002a4 <main+0x80>)
 800027c:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <main+0x8c>)
 800027e:	f003 fa29 	bl	80036d4 <iprintf>

	          /* PC6번 LED 켜기 */
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2140      	movs	r1, #64	@ 0x40
 8000286:	4809      	ldr	r0, [pc, #36]	@ (80002ac <main+0x88>)
 8000288:	f001 f8d6 	bl	8001438 <HAL_GPIO_WritePin>
	      }

	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2140      	movs	r1, #64	@ 0x40
 8000290:	4806      	ldr	r0, [pc, #24]	@ (80002ac <main+0x88>)
 8000292:	f001 f8d1 	bl	8001438 <HAL_GPIO_WritePin>

	      /* 1초 대기 */
	      HAL_Delay(1000);
 8000296:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800029a:	f000 fd65 	bl	8000d68 <HAL_Delay>
	  HAL_UART_Receive(&huart2, rx_data, sizeof(rx_data), HAL_MAX_DELAY);  // UART2에서 데이터 수신
 800029e:	e7db      	b.n	8000258 <main+0x34>
 80002a0:	20000000 	.word	0x20000000
 80002a4:	2000008c 	.word	0x2000008c
 80002a8:	20000108 	.word	0x20000108
 80002ac:	40011000 	.word	0x40011000
 80002b0:	080043dc 	.word	0x080043dc

080002b4 <__io_putchar>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
int __io_putchar(int ch)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);  // UART2로 데이터 전송
 80002bc:	1d39      	adds	r1, r7, #4
 80002be:	f04f 33ff 	mov.w	r3, #4294967295
 80002c2:	2201      	movs	r2, #1
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <__io_putchar+0x20>)
 80002c6:	f002 fae6 	bl	8002896 <HAL_UART_Transmit>
    return ch;
 80002ca:	687b      	ldr	r3, [r7, #4]
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000108 	.word	0x20000108

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b090      	sub	sp, #64	@ 0x40
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	2228      	movs	r2, #40	@ 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 fa49 	bl	800377e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fa:	2302      	movs	r3, #2
 80002fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fe:	2301      	movs	r3, #1
 8000300:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000302:	2310      	movs	r3, #16
 8000304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000306:	2302      	movs	r3, #2
 8000308:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800030a:	2300      	movs	r3, #0
 800030c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800030e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	f107 0318 	add.w	r3, r7, #24
 8000318:	4618      	mov	r0, r3
 800031a:	f001 f8c7 	bl	80014ac <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000324:	f000 f819 	bl	800035a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	2302      	movs	r3, #2
 800032e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fb34 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800034e:	f000 f804 	bl	800035a <Error_Handler>
  }

}
 8000352:	bf00      	nop
 8000354:	3740      	adds	r7, #64	@ 0x40
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035e:	b672      	cpsid	i
}
 8000360:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000362:	bf00      	nop
 8000364:	e7fd      	b.n	8000362 <Error_Handler+0x8>
	...

08000368 <cs_high>:
    uint8_t status = nrf24l01p_get_status();  // 상태 레지스터 읽기
    return (status & 0x40) != 0;  // RX_DR 비트가 설정되었는지 확인
}

static void cs_high()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000372:	4802      	ldr	r0, [pc, #8]	@ (800037c <cs_high+0x14>)
 8000374:	f001 f860 	bl	8001438 <HAL_GPIO_WritePin>
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40010c00 	.word	0x40010c00

08000380 <cs_low>:

static void cs_low()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800038a:	4802      	ldr	r0, [pc, #8]	@ (8000394 <cs_low+0x14>)
 800038c:	f001 f854 	bl	8001438 <HAL_GPIO_WritePin>
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40010c00 	.word	0x40010c00

08000398 <ce_high>:

static void ce_high()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003a2:	4802      	ldr	r0, [pc, #8]	@ (80003ac <ce_high+0x14>)
 80003a4:	f001 f848 	bl	8001438 <HAL_GPIO_WritePin>
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40010c00 	.word	0x40010c00

080003b0 <ce_low>:

static void ce_low()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ba:	4802      	ldr	r0, [pc, #8]	@ (80003c4 <ce_low+0x14>)
 80003bc:	f001 f83c 	bl	8001438 <HAL_GPIO_WritePin>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40010c00 	.word	0x40010c00

080003c8 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af02      	add	r7, sp, #8
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80003d6:	f7ff ffd3 	bl	8000380 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80003da:	f107 020e 	add.w	r2, r7, #14
 80003de:	f107 010f 	add.w	r1, r7, #15
 80003e2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2301      	movs	r3, #1
 80003ea:	4809      	ldr	r0, [pc, #36]	@ (8000410 <read_register+0x48>)
 80003ec:	f001 ff4f 	bl	800228e <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80003f0:	f107 010d 	add.w	r1, r7, #13
 80003f4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80003f8:	2201      	movs	r2, #1
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <read_register+0x48>)
 80003fc:	f001 fe2e 	bl	800205c <HAL_SPI_Receive>
    cs_high();
 8000400:	f7ff ffb2 	bl	8000368 <cs_high>

    return read_val;
 8000404:	7b7b      	ldrb	r3, [r7, #13]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200000ac 	.word	0x200000ac

08000414 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af02      	add	r7, sp, #8
 800041a:	4603      	mov	r3, r0
 800041c:	460a      	mov	r2, r1
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	4613      	mov	r3, r2
 8000422:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	f043 0320 	orr.w	r3, r3, #32
 800042a:	b2db      	uxtb	r3, r3
 800042c:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 800042e:	79bb      	ldrb	r3, [r7, #6]
 8000430:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000432:	f7ff ffa5 	bl	8000380 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000436:	f107 020e 	add.w	r2, r7, #14
 800043a:	f107 010f 	add.w	r1, r7, #15
 800043e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2301      	movs	r3, #1
 8000446:	4809      	ldr	r0, [pc, #36]	@ (800046c <write_register+0x58>)
 8000448:	f001 ff21 	bl	800228e <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 800044c:	f107 010d 	add.w	r1, r7, #13
 8000450:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000454:	2201      	movs	r2, #1
 8000456:	4805      	ldr	r0, [pc, #20]	@ (800046c <write_register+0x58>)
 8000458:	f001 fcbc 	bl	8001dd4 <HAL_SPI_Transmit>
    cs_high();
 800045c:	f7ff ff84 	bl	8000368 <cs_high>

    return write_val;
 8000460:	7b7b      	ldrb	r3, [r7, #13]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200000ac 	.word	0x200000ac

08000470 <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	80fb      	strh	r3, [r7, #6]
 800047c:	4613      	mov	r3, r2
 800047e:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000480:	f000 f84a 	bl	8000518 <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 8000484:	f000 f89c 	bl	80005c0 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8000488:	f000 f8ee 	bl	8000668 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 800048c:	2008      	movs	r0, #8
 800048e:	f000 f8dd 	bl	800064c <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8000492:	88fb      	ldrh	r3, [r7, #6]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f973 	bl	8000780 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 800049a:	797b      	ldrb	r3, [r7, #5]
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f99f 	bl	80007e0 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 80004a2:	2003      	movs	r0, #3
 80004a4:	f000 f97f 	bl	80007a6 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 80004a8:	2001      	movs	r0, #1
 80004aa:	f000 f8f2 	bl	8000692 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 80004ae:	2005      	movs	r0, #5
 80004b0:	f000 f912 	bl	80006d8 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 80004b4:	2003      	movs	r0, #3
 80004b6:	f000 f91f 	bl	80006f8 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 80004ba:	20fa      	movs	r0, #250	@ 0xfa
 80004bc:	f000 f938 	bl	8000730 <nrf24l01p_auto_retransmit_delay>
    
    ce_high();
 80004c0:	f7ff ff6a 	bl	8000398 <ce_high>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <write_register_multi>:

    ce_high();
}

void write_register_multi(uint8_t reg, uint8_t *data, uint8_t length)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	4613      	mov	r3, r2
 80004da:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = NRF24L01P_CMD_W_REGISTER | reg;
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	f043 0320 	orr.w	r3, r3, #32
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	73fb      	strb	r3, [r7, #15]
    cs_low();
 80004e6:	f7ff ff4b 	bl	8000380 <cs_low>
    HAL_SPI_Transmit(NRF24L01P_SPI, &cmd, 1, 100);
 80004ea:	f107 010f 	add.w	r1, r7, #15
 80004ee:	2364      	movs	r3, #100	@ 0x64
 80004f0:	2201      	movs	r2, #1
 80004f2:	4808      	ldr	r0, [pc, #32]	@ (8000514 <write_register_multi+0x48>)
 80004f4:	f001 fc6e 	bl	8001dd4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24L01P_SPI, data, length, 100);
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	2364      	movs	r3, #100	@ 0x64
 80004fe:	6839      	ldr	r1, [r7, #0]
 8000500:	4804      	ldr	r0, [pc, #16]	@ (8000514 <write_register_multi+0x48>)
 8000502:	f001 fc67 	bl	8001dd4 <HAL_SPI_Transmit>
    cs_high();
 8000506:	f7ff ff2f 	bl	8000368 <cs_high>
}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000ac 	.word	0x200000ac

08000518 <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 800051c:	f7ff ff24 	bl	8000368 <cs_high>
    ce_low();
 8000520:	f7ff ff46 	bl	80003b0 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000524:	2108      	movs	r1, #8
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff ff74 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 800052c:	213f      	movs	r1, #63	@ 0x3f
 800052e:	2001      	movs	r0, #1
 8000530:	f7ff ff70 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000534:	2103      	movs	r1, #3
 8000536:	2002      	movs	r0, #2
 8000538:	f7ff ff6c 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 800053c:	2103      	movs	r1, #3
 800053e:	2003      	movs	r0, #3
 8000540:	f7ff ff68 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000544:	2103      	movs	r1, #3
 8000546:	2004      	movs	r0, #4
 8000548:	f7ff ff64 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 800054c:	2102      	movs	r1, #2
 800054e:	2005      	movs	r0, #5
 8000550:	f7ff ff60 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000554:	2107      	movs	r1, #7
 8000556:	2006      	movs	r0, #6
 8000558:	f7ff ff5c 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 800055c:	217e      	movs	r1, #126	@ 0x7e
 800055e:	2007      	movs	r0, #7
 8000560:	f7ff ff58 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000564:	2100      	movs	r1, #0
 8000566:	2011      	movs	r0, #17
 8000568:	f7ff ff54 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800056c:	2100      	movs	r1, #0
 800056e:	2011      	movs	r0, #17
 8000570:	f7ff ff50 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000574:	2100      	movs	r1, #0
 8000576:	2012      	movs	r0, #18
 8000578:	f7ff ff4c 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800057c:	2100      	movs	r1, #0
 800057e:	2013      	movs	r0, #19
 8000580:	f7ff ff48 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000584:	2100      	movs	r1, #0
 8000586:	2014      	movs	r0, #20
 8000588:	f7ff ff44 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800058c:	2100      	movs	r1, #0
 800058e:	2015      	movs	r0, #21
 8000590:	f7ff ff40 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000594:	2100      	movs	r1, #0
 8000596:	2016      	movs	r0, #22
 8000598:	f7ff ff3c 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800059c:	2111      	movs	r1, #17
 800059e:	2017      	movs	r0, #23
 80005a0:	f7ff ff38 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 80005a4:	2100      	movs	r1, #0
 80005a6:	201c      	movs	r0, #28
 80005a8:	f7ff ff34 	bl	8000414 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 80005ac:	2100      	movs	r1, #0
 80005ae:	201d      	movs	r0, #29
 80005b0:	f7ff ff30 	bl	8000414 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 80005b4:	f000 f81a 	bl	80005ec <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 80005b8:	f000 f830 	bl	800061c <nrf24l01p_flush_tx_fifo>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff fefe 	bl	80003c8 <read_register>
 80005cc:	4603      	mov	r3, r0
 80005ce:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4619      	mov	r1, r3
 80005dc:	2000      	movs	r0, #0
 80005de:	f7ff ff19 	bl	8000414 <write_register>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 80005f2:	23e2      	movs	r3, #226	@ 0xe2
 80005f4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80005f6:	f7ff fec3 	bl	8000380 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80005fa:	1dba      	adds	r2, r7, #6
 80005fc:	1df9      	adds	r1, r7, #7
 80005fe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	4804      	ldr	r0, [pc, #16]	@ (8000618 <nrf24l01p_flush_rx_fifo+0x2c>)
 8000608:	f001 fe41 	bl	800228e <HAL_SPI_TransmitReceive>
    cs_high();
 800060c:	f7ff feac 	bl	8000368 <cs_high>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000ac 	.word	0x200000ac

0800061c <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8000622:	23e1      	movs	r3, #225	@ 0xe1
 8000624:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000626:	f7ff feab 	bl	8000380 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800062a:	1dba      	adds	r2, r7, #6
 800062c:	1df9      	adds	r1, r7, #7
 800062e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	4804      	ldr	r0, [pc, #16]	@ (8000648 <nrf24l01p_flush_tx_fifo+0x2c>)
 8000638:	f001 fe29 	bl	800228e <HAL_SPI_TransmitReceive>
    cs_high();
 800063c:	f7ff fe94 	bl	8000368 <cs_high>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000ac 	.word	0x200000ac

0800064c <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4619      	mov	r1, r3
 800065a:	2011      	movs	r0, #17
 800065c:	f7ff feda 	bl	8000414 <write_register>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status); 
}

void nrf24l01p_power_up()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff feaa 	bl	80003c8 <read_register>
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4619      	mov	r1, r3
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff fec5 	bl	8000414 <write_register>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff fe93 	bl	80003c8 <read_register>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d002      	beq.n	80006b2 <nrf24l01p_set_crc_length+0x20>
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d005      	beq.n	80006bc <nrf24l01p_set_crc_length+0x2a>
 80006b0:	e009      	b.n	80006c6 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	f023 0304 	bic.w	r3, r3, #4
 80006b8:	73fb      	strb	r3, [r7, #15]
            break;
 80006ba:	e004      	b.n	80006c6 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	73fb      	strb	r3, [r7, #15]
            break;
 80006c4:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff fea2 	bl	8000414 <write_register>
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	3b02      	subs	r3, #2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	2003      	movs	r0, #3
 80006ec:	f7ff fe92 	bl	8000414 <write_register>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000702:	2004      	movs	r0, #4
 8000704:	f7ff fe60 	bl	80003c8 <read_register>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	f063 030f 	orn	r3, r3, #15
 8000712:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8000714:	7bfa      	ldrb	r2, [r7, #15]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4313      	orrs	r3, r2
 800071a:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4619      	mov	r1, r3
 8000720:	2004      	movs	r0, #4
 8000722:	f7ff fe77 	bl	8000414 <write_register>
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 800073a:	2004      	movs	r0, #4
 800073c:	f7ff fe44 	bl	80003c8 <read_register>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	f043 030f 	orr.w	r3, r3, #15
 800074a:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	4a0b      	ldr	r2, [pc, #44]	@ (800077c <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000750:	fba2 2303 	umull	r2, r3, r2, r3
 8000754:	091b      	lsrs	r3, r3, #4
 8000756:	b29b      	uxth	r3, r3
 8000758:	3b01      	subs	r3, #1
 800075a:	011b      	lsls	r3, r3, #4
 800075c:	b25a      	sxtb	r2, r3
 800075e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000762:	4313      	orrs	r3, r2
 8000764:	b25b      	sxtb	r3, r3
 8000766:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	4619      	mov	r1, r3
 800076c:	2004      	movs	r0, #4
 800076e:	f7ff fe51 	bl	8000414 <write_register>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	10624dd3 	.word	0x10624dd3

08000780 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000790:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4619      	mov	r1, r3
 8000798:	2005      	movs	r0, #5
 800079a:	f7ff fe3b 	bl	8000414 <write_register>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b084      	sub	sp, #16
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 80007b0:	2006      	movs	r0, #6
 80007b2:	f7ff fe09 	bl	80003c8 <read_register>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f023 0306 	bic.w	r3, r3, #6
 80007bc:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	b25a      	sxtb	r2, r3
 80007c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4619      	mov	r1, r3
 80007d2:	2006      	movs	r0, #6
 80007d4:	f7ff fe1e 	bl	8000414 <write_register>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 80007ea:	2006      	movs	r0, #6
 80007ec:	f7ff fdec 	bl	80003c8 <read_register>
 80007f0:	4603      	mov	r3, r0
 80007f2:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80007f6:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d00a      	beq.n	8000814 <nrf24l01p_set_rf_air_data_rate+0x34>
 80007fe:	2b02      	cmp	r3, #2
 8000800:	dc0e      	bgt.n	8000820 <nrf24l01p_set_rf_air_data_rate+0x40>
 8000802:	2b00      	cmp	r3, #0
 8000804:	d00b      	beq.n	800081e <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10a      	bne.n	8000820 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	73fb      	strb	r3, [r7, #15]
            break;
 8000812:	e005      	b.n	8000820 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	f043 0320 	orr.w	r3, r3, #32
 800081a:	73fb      	strb	r3, [r7, #15]
            break;
 800081c:	e000      	b.n	8000820 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 800081e:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4619      	mov	r1, r3
 8000824:	2006      	movs	r0, #6
 8000826:	f7ff fdf5 	bl	8000414 <write_register>
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_SPI1_Init+0x64>)
 800083a:	4a18      	ldr	r2, [pc, #96]	@ (800089c <MX_SPI1_Init+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000840:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000866:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000868:	2210      	movs	r2, #16
 800086a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086c:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000880:	220a      	movs	r2, #10
 8000882:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_SPI1_Init+0x64>)
 8000886:	f001 fa21 	bl	8001ccc <HAL_SPI_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000890:	f7ff fd63 	bl	800035a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000ac 	.word	0x200000ac
 800089c:	40013000 	.word	0x40013000

080008a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1b      	ldr	r2, [pc, #108]	@ (8000928 <HAL_SPI_MspInit+0x88>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d12f      	bne.n	8000920 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <HAL_SPI_MspInit+0x8c>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a19      	ldr	r2, [pc, #100]	@ (800092c <HAL_SPI_MspInit+0x8c>)
 80008c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b17      	ldr	r3, [pc, #92]	@ (800092c <HAL_SPI_MspInit+0x8c>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <HAL_SPI_MspInit+0x8c>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a13      	ldr	r2, [pc, #76]	@ (800092c <HAL_SPI_MspInit+0x8c>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <HAL_SPI_MspInit+0x8c>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008f0:	23a0      	movs	r3, #160	@ 0xa0
 80008f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	480b      	ldr	r0, [pc, #44]	@ (8000930 <HAL_SPI_MspInit+0x90>)
 8000904:	f000 fc14 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000908:	2340      	movs	r3, #64	@ 0x40
 800090a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	4619      	mov	r1, r3
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <HAL_SPI_MspInit+0x90>)
 800091c:	f000 fc08 	bl	8001130 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40013000 	.word	0x40013000
 800092c:	40021000 	.word	0x40021000
 8000930:	40010800 	.word	0x40010800

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_MspInit+0x5c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <HAL_MspInit+0x5c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_MspInit+0x5c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <HAL_MspInit+0x5c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_MspInit+0x60>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <HAL_MspInit+0x60>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <NMI_Handler+0x4>

080009a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <MemManage_Handler+0x4>

080009b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <UsageFault_Handler+0x4>

080009c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 f9a2 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CE_pin_Pin);
 80009f4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80009f8:	f000 fd36 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <USART2_IRQHandler+0x10>)
 8000a06:	f002 f869 	bl	8002adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000108 	.word	0x20000108

08000a14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	e00a      	b.n	8000a3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a26:	f3af 8000 	nop.w
 8000a2a:	4601      	mov	r1, r0
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	60ba      	str	r2, [r7, #8]
 8000a32:	b2ca      	uxtb	r2, r1
 8000a34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf0      	blt.n	8000a26 <_read+0x12>
  }

  return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	e009      	b.n	8000a74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fc23 	bl	80002b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	3301      	adds	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbf1      	blt.n	8000a60 <_write+0x12>
  }
  return len;
 8000a7c:	687b      	ldr	r3, [r7, #4]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_close>:

int _close(int file)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aac:	605a      	str	r2, [r3, #4]
  return 0;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <_isatty>:

int _isatty(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr

08000ace <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b085      	sub	sp, #20
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
	...

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f002 fe80 	bl	800381c <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20005000 	.word	0x20005000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	20000104 	.word	0x20000104
 8000b50:	200002a0 	.word	0x200002a0

08000b54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <MX_USART2_UART_Init+0x50>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b98:	f001 fe2d 	bl	80027f6 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ba2:	f7ff fbda 	bl	800035a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000108 	.word	0x20000108
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a1f      	ldr	r2, [pc, #124]	@ (8000c4c <HAL_UART_MspInit+0x98>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d137      	bne.n	8000c44 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <HAL_UART_MspInit+0x9c>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c50 <HAL_UART_MspInit+0x9c>)
 8000bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bde:	61d3      	str	r3, [r2, #28]
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <HAL_UART_MspInit+0x9c>)
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <HAL_UART_MspInit+0x9c>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <HAL_UART_MspInit+0x9c>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_UART_MspInit+0x9c>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c04:	2304      	movs	r3, #4
 8000c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	480f      	ldr	r0, [pc, #60]	@ (8000c54 <HAL_UART_MspInit+0xa0>)
 8000c18:	f000 fa8a 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <HAL_UART_MspInit+0xa0>)
 8000c30:	f000 fa7e 	bl	8001130 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2026      	movs	r0, #38	@ 0x26
 8000c3a:	f000 f990 	bl	8000f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c3e:	2026      	movs	r0, #38	@ 0x26
 8000c40:	f000 f9a9 	bl	8000f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c44:	bf00      	nop
 8000c46:	3720      	adds	r7, #32
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010800 	.word	0x40010800

08000c58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff ff7c 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c5e:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c60:	4a0c      	ldr	r2, [pc, #48]	@ (8000c94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a09      	ldr	r2, [pc, #36]	@ (8000c98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c74:	4c09      	ldr	r4, [pc, #36]	@ (8000c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f002 fdd1 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c86:	f7ff facd 	bl	8000224 <main>
  bx lr
 8000c8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c94:	08004454 	.word	0x08004454
  ldr r2, =_sbss
 8000c98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c9c:	200002a0 	.word	0x200002a0

08000ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_2_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_Init+0x28>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_Init+0x28>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f947 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe38 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40022000 	.word	0x40022000

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f95f 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f927 	bl	8000f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	@ (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000010 	.word	0x20000010
 8000d2c:	2000000c 	.word	0x2000000c

08000d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_IncTick+0x1c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a03      	ldr	r2, [pc, #12]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	20000010 	.word	0x20000010
 8000d50:	20000150 	.word	0x20000150

08000d54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b02      	ldr	r3, [pc, #8]	@ (8000d64 <HAL_GetTick+0x10>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	20000150 	.word	0x20000150

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff fff0 	bl	8000d54 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d005      	beq.n	8000d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_Delay+0x44>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffe0 	bl	8000d54 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8f7      	bhi.n	8000d90 <HAL_Delay+0x28>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000010 	.word	0x20000010

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4906      	ldr	r1, [pc, #24]	@ (8000e48 <__NVIC_EnableIRQ+0x34>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff90 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff2d 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff42 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff90 	bl	8000ea0 <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5f 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff35 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffa2 	bl	8000f04 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b085      	sub	sp, #20
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d008      	beq.n	8000ff4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e020      	b.n	8001036 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 020e 	bic.w	r2, r2, #14
 8001002:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800101c:	2101      	movs	r1, #1
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d005      	beq.n	8001064 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2204      	movs	r2, #4
 800105c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e051      	b.n	8001108 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 020e 	bic.w	r2, r2, #14
 8001072:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0201 	bic.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a22      	ldr	r2, [pc, #136]	@ (8001114 <HAL_DMA_Abort_IT+0xd4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d029      	beq.n	80010e2 <HAL_DMA_Abort_IT+0xa2>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a21      	ldr	r2, [pc, #132]	@ (8001118 <HAL_DMA_Abort_IT+0xd8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d022      	beq.n	80010de <HAL_DMA_Abort_IT+0x9e>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1f      	ldr	r2, [pc, #124]	@ (800111c <HAL_DMA_Abort_IT+0xdc>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01a      	beq.n	80010d8 <HAL_DMA_Abort_IT+0x98>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001120 <HAL_DMA_Abort_IT+0xe0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d012      	beq.n	80010d2 <HAL_DMA_Abort_IT+0x92>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001124 <HAL_DMA_Abort_IT+0xe4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00a      	beq.n	80010cc <HAL_DMA_Abort_IT+0x8c>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <HAL_DMA_Abort_IT+0xe8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d102      	bne.n	80010c6 <HAL_DMA_Abort_IT+0x86>
 80010c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010c4:	e00e      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010ca:	e00b      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d0:	e008      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d6:	e005      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010dc:	e002      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010de:	2310      	movs	r3, #16
 80010e0:	e000      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010e2:	2301      	movs	r3, #1
 80010e4:	4a11      	ldr	r2, [pc, #68]	@ (800112c <HAL_DMA_Abort_IT+0xec>)
 80010e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	4798      	blx	r3
    } 
  }
  return status;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020008 	.word	0x40020008
 8001118:	4002001c 	.word	0x4002001c
 800111c:	40020030 	.word	0x40020030
 8001120:	40020044 	.word	0x40020044
 8001124:	40020058 	.word	0x40020058
 8001128:	4002006c 	.word	0x4002006c
 800112c:	40020000 	.word	0x40020000

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b08b      	sub	sp, #44	@ 0x2c
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001142:	e169      	b.n	8001418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001144:	2201      	movs	r2, #1
 8001146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	429a      	cmp	r2, r3
 800115e:	f040 8158 	bne.w	8001412 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a9a      	ldr	r2, [pc, #616]	@ (80013d0 <HAL_GPIO_Init+0x2a0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d05e      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 800116c:	4a98      	ldr	r2, [pc, #608]	@ (80013d0 <HAL_GPIO_Init+0x2a0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d875      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 8001172:	4a98      	ldr	r2, [pc, #608]	@ (80013d4 <HAL_GPIO_Init+0x2a4>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d058      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 8001178:	4a96      	ldr	r2, [pc, #600]	@ (80013d4 <HAL_GPIO_Init+0x2a4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d86f      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 800117e:	4a96      	ldr	r2, [pc, #600]	@ (80013d8 <HAL_GPIO_Init+0x2a8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d052      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 8001184:	4a94      	ldr	r2, [pc, #592]	@ (80013d8 <HAL_GPIO_Init+0x2a8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d869      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 800118a:	4a94      	ldr	r2, [pc, #592]	@ (80013dc <HAL_GPIO_Init+0x2ac>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d04c      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 8001190:	4a92      	ldr	r2, [pc, #584]	@ (80013dc <HAL_GPIO_Init+0x2ac>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d863      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 8001196:	4a92      	ldr	r2, [pc, #584]	@ (80013e0 <HAL_GPIO_Init+0x2b0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d046      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 800119c:	4a90      	ldr	r2, [pc, #576]	@ (80013e0 <HAL_GPIO_Init+0x2b0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d85d      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 80011a2:	2b12      	cmp	r3, #18
 80011a4:	d82a      	bhi.n	80011fc <HAL_GPIO_Init+0xcc>
 80011a6:	2b12      	cmp	r3, #18
 80011a8:	d859      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 80011aa:	a201      	add	r2, pc, #4	@ (adr r2, 80011b0 <HAL_GPIO_Init+0x80>)
 80011ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b0:	0800122b 	.word	0x0800122b
 80011b4:	08001205 	.word	0x08001205
 80011b8:	08001217 	.word	0x08001217
 80011bc:	08001259 	.word	0x08001259
 80011c0:	0800125f 	.word	0x0800125f
 80011c4:	0800125f 	.word	0x0800125f
 80011c8:	0800125f 	.word	0x0800125f
 80011cc:	0800125f 	.word	0x0800125f
 80011d0:	0800125f 	.word	0x0800125f
 80011d4:	0800125f 	.word	0x0800125f
 80011d8:	0800125f 	.word	0x0800125f
 80011dc:	0800125f 	.word	0x0800125f
 80011e0:	0800125f 	.word	0x0800125f
 80011e4:	0800125f 	.word	0x0800125f
 80011e8:	0800125f 	.word	0x0800125f
 80011ec:	0800125f 	.word	0x0800125f
 80011f0:	0800125f 	.word	0x0800125f
 80011f4:	0800120d 	.word	0x0800120d
 80011f8:	08001221 	.word	0x08001221
 80011fc:	4a79      	ldr	r2, [pc, #484]	@ (80013e4 <HAL_GPIO_Init+0x2b4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001202:	e02c      	b.n	800125e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	623b      	str	r3, [r7, #32]
          break;
 800120a:	e029      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	3304      	adds	r3, #4
 8001212:	623b      	str	r3, [r7, #32]
          break;
 8001214:	e024      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	3308      	adds	r3, #8
 800121c:	623b      	str	r3, [r7, #32]
          break;
 800121e:	e01f      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	330c      	adds	r3, #12
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	e01a      	b.n	8001260 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001232:	2304      	movs	r3, #4
 8001234:	623b      	str	r3, [r7, #32]
          break;
 8001236:	e013      	b.n	8001260 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d105      	bne.n	800124c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001240:	2308      	movs	r3, #8
 8001242:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	611a      	str	r2, [r3, #16]
          break;
 800124a:	e009      	b.n	8001260 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800124c:	2308      	movs	r3, #8
 800124e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	615a      	str	r2, [r3, #20]
          break;
 8001256:	e003      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
          break;
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x130>
          break;
 800125e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2bff      	cmp	r3, #255	@ 0xff
 8001264:	d801      	bhi.n	800126a <HAL_GPIO_Init+0x13a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	e001      	b.n	800126e <HAL_GPIO_Init+0x13e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3304      	adds	r3, #4
 800126e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2bff      	cmp	r3, #255	@ 0xff
 8001274:	d802      	bhi.n	800127c <HAL_GPIO_Init+0x14c>
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x152>
 800127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127e:	3b08      	subs	r3, #8
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	210f      	movs	r1, #15
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	401a      	ands	r2, r3
 8001294:	6a39      	ldr	r1, [r7, #32]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	431a      	orrs	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80b1 	beq.w	8001412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b0:	4b4d      	ldr	r3, [pc, #308]	@ (80013e8 <HAL_GPIO_Init+0x2b8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a4c      	ldr	r2, [pc, #304]	@ (80013e8 <HAL_GPIO_Init+0x2b8>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b4a      	ldr	r3, [pc, #296]	@ (80013e8 <HAL_GPIO_Init+0x2b8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012c8:	4a48      	ldr	r2, [pc, #288]	@ (80013ec <HAL_GPIO_Init+0x2bc>)
 80012ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a40      	ldr	r2, [pc, #256]	@ (80013f0 <HAL_GPIO_Init+0x2c0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d013      	beq.n	800131c <HAL_GPIO_Init+0x1ec>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a3f      	ldr	r2, [pc, #252]	@ (80013f4 <HAL_GPIO_Init+0x2c4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d00d      	beq.n	8001318 <HAL_GPIO_Init+0x1e8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a3e      	ldr	r2, [pc, #248]	@ (80013f8 <HAL_GPIO_Init+0x2c8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d007      	beq.n	8001314 <HAL_GPIO_Init+0x1e4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a3d      	ldr	r2, [pc, #244]	@ (80013fc <HAL_GPIO_Init+0x2cc>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d101      	bne.n	8001310 <HAL_GPIO_Init+0x1e0>
 800130c:	2303      	movs	r3, #3
 800130e:	e006      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001310:	2304      	movs	r3, #4
 8001312:	e004      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001314:	2302      	movs	r3, #2
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 800131c:	2300      	movs	r3, #0
 800131e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001320:	f002 0203 	and.w	r2, r2, #3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	4093      	lsls	r3, r2
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800132e:	492f      	ldr	r1, [pc, #188]	@ (80013ec <HAL_GPIO_Init+0x2bc>)
 8001330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001348:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	492c      	ldr	r1, [pc, #176]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	608b      	str	r3, [r1, #8]
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001356:	4b2a      	ldr	r3, [pc, #168]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	43db      	mvns	r3, r3
 800135e:	4928      	ldr	r1, [pc, #160]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 8001360:	4013      	ands	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	4922      	ldr	r1, [pc, #136]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	60cb      	str	r3, [r1, #12]
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800137e:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	43db      	mvns	r3, r3
 8001386:	491e      	ldr	r1, [pc, #120]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 8001388:	4013      	ands	r3, r2
 800138a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001398:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4918      	ldr	r1, [pc, #96]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4914      	ldr	r1, [pc, #80]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d021      	beq.n	8001404 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	490e      	ldr	r1, [pc, #56]	@ (8001400 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e021      	b.n	8001412 <HAL_GPIO_Init+0x2e2>
 80013ce:	bf00      	nop
 80013d0:	10320000 	.word	0x10320000
 80013d4:	10310000 	.word	0x10310000
 80013d8:	10220000 	.word	0x10220000
 80013dc:	10210000 	.word	0x10210000
 80013e0:	10120000 	.word	0x10120000
 80013e4:	10110000 	.word	0x10110000
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	40011000 	.word	0x40011000
 80013fc:	40011400 	.word	0x40011400
 8001400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001404:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <HAL_GPIO_Init+0x304>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	43db      	mvns	r3, r3
 800140c:	4909      	ldr	r1, [pc, #36]	@ (8001434 <HAL_GPIO_Init+0x304>)
 800140e:	4013      	ands	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	3301      	adds	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	f47f ae8e 	bne.w	8001144 <HAL_GPIO_Init+0x14>
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	372c      	adds	r7, #44	@ 0x2c
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	611a      	str	r2, [r3, #16]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f806 	bl	8001498 <HAL_GPIO_EXTI_Callback>
  }
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e272      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8087 	beq.w	80015da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014cc:	4b92      	ldr	r3, [pc, #584]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d00c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d112      	bne.n	800150a <HAL_RCC_OscConfig+0x5e>
 80014e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f0:	d10b      	bne.n	800150a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f2:	4b89      	ldr	r3, [pc, #548]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d06c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x12c>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d168      	bne.n	80015d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e24c      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x76>
 8001514:	4b80      	ldr	r3, [pc, #512]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a7f      	ldr	r2, [pc, #508]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e02e      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x98>
 800152a:	4b7b      	ldr	r3, [pc, #492]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a7a      	ldr	r2, [pc, #488]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b78      	ldr	r3, [pc, #480]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a77      	ldr	r2, [pc, #476]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800153c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e01d      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0xbc>
 800154e:	4b72      	ldr	r3, [pc, #456]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a71      	ldr	r2, [pc, #452]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b6f      	ldr	r3, [pc, #444]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6e      	ldr	r2, [pc, #440]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001568:	4b6b      	ldr	r3, [pc, #428]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a6a      	ldr	r2, [pc, #424]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b68      	ldr	r3, [pc, #416]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a67      	ldr	r2, [pc, #412]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fbe4 	bl	8000d54 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fbe0 	bl	8000d54 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e200      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0xe4>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fbd0 	bl	8000d54 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fbcc 	bl	8000d54 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1ec      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	4b53      	ldr	r3, [pc, #332]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x10c>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d063      	beq.n	80016ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015f2:	4b49      	ldr	r3, [pc, #292]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d11c      	bne.n	8001638 <HAL_RCC_OscConfig+0x18c>
 80015fe:	4b46      	ldr	r3, [pc, #280]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d116      	bne.n	8001638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	4b43      	ldr	r3, [pc, #268]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_RCC_OscConfig+0x176>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e1c0      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001622:	4b3d      	ldr	r3, [pc, #244]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4939      	ldr	r1, [pc, #228]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	e03a      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d020      	beq.n	8001682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001640:	4b36      	ldr	r3, [pc, #216]	@ (800171c <HAL_RCC_OscConfig+0x270>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb85 	bl	8000d54 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff fb81 	bl	8000d54 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1a1      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001660:	4b2d      	ldr	r3, [pc, #180]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4927      	ldr	r1, [pc, #156]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001682:	4b26      	ldr	r3, [pc, #152]	@ (800171c <HAL_RCC_OscConfig+0x270>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb64 	bl	8000d54 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fb60 	bl	8000d54 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e180      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d03a      	beq.n	8001730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d019      	beq.n	80016f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <HAL_RCC_OscConfig+0x274>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb44 	bl	8000d54 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fb40 	bl	8000d54 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e160      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 face 	bl	8001c90 <RCC_Delay>
 80016f4:	e01c      	b.n	8001730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_RCC_OscConfig+0x274>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fb2a 	bl	8000d54 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001702:	e00f      	b.n	8001724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fb26 	bl	8000d54 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d908      	bls.n	8001724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e146      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	42420000 	.word	0x42420000
 8001720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	4b92      	ldr	r3, [pc, #584]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1e9      	bne.n	8001704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a6 	beq.w	800188a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001742:	4b8b      	ldr	r3, [pc, #556]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10d      	bne.n	800176a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b88      	ldr	r3, [pc, #544]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a87      	ldr	r2, [pc, #540]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b85      	ldr	r3, [pc, #532]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	4b82      	ldr	r3, [pc, #520]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d118      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	4b7f      	ldr	r3, [pc, #508]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a7e      	ldr	r2, [pc, #504]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001782:	f7ff fae7 	bl	8000d54 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178a:	f7ff fae3 	bl	8000d54 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b64      	cmp	r3, #100	@ 0x64
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e103      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	4b75      	ldr	r3, [pc, #468]	@ (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x312>
 80017b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e02d      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x334>
 80017c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a69      	ldr	r2, [pc, #420]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	4b67      	ldr	r3, [pc, #412]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a66      	ldr	r2, [pc, #408]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6213      	str	r3, [r2, #32]
 80017de:	e01c      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d10c      	bne.n	8001802 <HAL_RCC_OscConfig+0x356>
 80017e8:	4b61      	ldr	r3, [pc, #388]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a60      	ldr	r2, [pc, #384]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6213      	str	r3, [r2, #32]
 8001800:	e00b      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 8001802:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a5a      	ldr	r2, [pc, #360]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6213      	str	r3, [r2, #32]
 800180e:	4b58      	ldr	r3, [pc, #352]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4a57      	ldr	r2, [pc, #348]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d015      	beq.n	800184e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff fa97 	bl	8000d54 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff fa93 	bl	8000d54 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0b1      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	4b4b      	ldr	r3, [pc, #300]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ee      	beq.n	800182a <HAL_RCC_OscConfig+0x37e>
 800184c:	e014      	b.n	8001878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fa81 	bl	8000d54 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff fa7d 	bl	8000d54 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e09b      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	4b40      	ldr	r3, [pc, #256]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ee      	bne.n	8001856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d105      	bne.n	800188a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187e:	4b3c      	ldr	r3, [pc, #240]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a3b      	ldr	r2, [pc, #236]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8087 	beq.w	80019a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001894:	4b36      	ldr	r3, [pc, #216]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b08      	cmp	r3, #8
 800189e:	d061      	beq.n	8001964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d146      	bne.n	8001936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a8:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <HAL_RCC_OscConfig+0x4cc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fa51 	bl	8000d54 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff fa4d 	bl	8000d54 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e06d      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c8:	4b29      	ldr	r3, [pc, #164]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018dc:	d108      	bne.n	80018f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018de:	4b24      	ldr	r3, [pc, #144]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4921      	ldr	r1, [pc, #132]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a19      	ldr	r1, [r3, #32]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	430b      	orrs	r3, r1
 8001902:	491b      	ldr	r1, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_RCC_OscConfig+0x4cc>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fa21 	bl	8000d54 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff fa1d 	bl	8000d54 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e03d      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x46a>
 8001934:	e035      	b.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <HAL_RCC_OscConfig+0x4cc>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fa0a 	bl	8000d54 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fa06 	bl	8000d54 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e026      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x498>
 8001962:	e01e      	b.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e019      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
 8001970:	40021000 	.word	0x40021000
 8001974:	40007000 	.word	0x40007000
 8001978:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_RCC_OscConfig+0x500>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	429a      	cmp	r2, r3
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0d0      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b67      	ldr	r3, [pc, #412]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	4965      	ldr	r1, [pc, #404]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a58      	ldr	r2, [pc, #352]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a52      	ldr	r2, [pc, #328]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d040      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d115      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e073      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06b      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4936      	ldr	r1, [pc, #216]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff f958 	bl	8000d54 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff f954 	bl	8000d54 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e053      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d210      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4922      	ldr	r1, [pc, #136]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	@ (8001b78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	@ (8001b7c <HAL_RCC_ClockConfig+0x1cc>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_RCC_ClockConfig+0x1d0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8b6 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	080043ec 	.word	0x080043ec
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	2000000c 	.word	0x2000000c

08001b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d002      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x30>
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x36>
 8001bb2:	e027      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bb6:	613b      	str	r3, [r7, #16]
      break;
 8001bb8:	e027      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	0c9b      	lsrs	r3, r3, #18
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	0c5b      	lsrs	r3, r3, #17
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	4a11      	ldr	r2, [pc, #68]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001be6:	fb03 f202 	mul.w	r2, r3, r2
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e004      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	613b      	str	r3, [r7, #16]
      break;
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c06:	613b      	str	r3, [r7, #16]
      break;
 8001c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0a:	693b      	ldr	r3, [r7, #16]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	007a1200 	.word	0x007a1200
 8001c20:	08004404 	.word	0x08004404
 8001c24:	08004414 	.word	0x08004414
 8001c28:	003d0900 	.word	0x003d0900

08001c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b02      	ldr	r3, [pc, #8]	@ (8001c3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20000008 	.word	0x20000008

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c44:	f7ff fff2 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	@ (8001c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	080043fc 	.word	0x080043fc

08001c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c6c:	f7ff ffde 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	0adb      	lsrs	r3, r3, #11
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4903      	ldr	r1, [pc, #12]	@ (8001c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	080043fc 	.word	0x080043fc

08001c90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c98:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <RCC_Delay+0x34>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <RCC_Delay+0x38>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	0a5b      	lsrs	r3, r3, #9
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cac:	bf00      	nop
  }
  while (Delay --);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	60fa      	str	r2, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f9      	bne.n	8001cac <RCC_Delay+0x1c>
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	10624dd3 	.word	0x10624dd3

08001ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e076      	b.n	8001dcc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d108      	bne.n	8001cf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001cee:	d009      	beq.n	8001d04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
 8001cf6:	e005      	b.n	8001d04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe fdbe 	bl	80008a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d88:	ea42 0103 	orr.w	r1, r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	0c1a      	lsrs	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f002 0204 	and.w	r2, r2, #4
 8001daa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	4613      	mov	r3, r2
 8001de2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001de4:	f7fe ffb6 	bl	8000d54 <HAL_GetTick>
 8001de8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d001      	beq.n	8001dfe <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e12a      	b.n	8002054 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_SPI_Transmit+0x36>
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e122      	b.n	8002054 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_SPI_Transmit+0x48>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e11b      	b.n	8002054 <HAL_SPI_Transmit+0x280>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2203      	movs	r2, #3
 8001e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	88fa      	ldrh	r2, [r7, #6]
 8001e3c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e6a:	d10f      	bne.n	8001e8c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e96:	2b40      	cmp	r3, #64	@ 0x40
 8001e98:	d007      	beq.n	8001eaa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001eb2:	d152      	bne.n	8001f5a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <HAL_SPI_Transmit+0xee>
 8001ebc:	8b7b      	ldrh	r3, [r7, #26]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d145      	bne.n	8001f4e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	881a      	ldrh	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	1c9a      	adds	r2, r3, #2
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ee6:	e032      	b.n	8001f4e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d112      	bne.n	8001f1c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	881a      	ldrh	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	1c9a      	adds	r2, r3, #2
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f1a:	e018      	b.n	8001f4e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f1c:	f7fe ff1a 	bl	8000d54 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d803      	bhi.n	8001f34 <HAL_SPI_Transmit+0x160>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d102      	bne.n	8001f3a <HAL_SPI_Transmit+0x166>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e082      	b.n	8002054 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1c7      	bne.n	8001ee8 <HAL_SPI_Transmit+0x114>
 8001f58:	e053      	b.n	8002002 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <HAL_SPI_Transmit+0x194>
 8001f62:	8b7b      	ldrh	r3, [r7, #26]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d147      	bne.n	8001ff8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	7812      	ldrb	r2, [r2, #0]
 8001f74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f8e:	e033      	b.n	8001ff8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d113      	bne.n	8001fc6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001fc4:	e018      	b.n	8001ff8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fc6:	f7fe fec5 	bl	8000d54 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d803      	bhi.n	8001fde <HAL_SPI_Transmit+0x20a>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d102      	bne.n	8001fe4 <HAL_SPI_Transmit+0x210>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e02d      	b.n	8002054 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1c6      	bne.n	8001f90 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	6839      	ldr	r1, [r7, #0]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fbc4 	bl	8002794 <SPI_EndRxTxTransaction>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2220      	movs	r2, #32
 8002016:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10a      	bne.n	8002036 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002052:	2300      	movs	r3, #0
  }
}
 8002054:	4618      	mov	r0, r3
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af02      	add	r7, sp, #8
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	4613      	mov	r3, r2
 800206a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d001      	beq.n	800207c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
 800207a:	e104      	b.n	8002286 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002084:	d112      	bne.n	80020ac <HAL_SPI_Receive+0x50>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10e      	bne.n	80020ac <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2204      	movs	r2, #4
 8002092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f8f3 	bl	800228e <HAL_SPI_TransmitReceive>
 80020a8:	4603      	mov	r3, r0
 80020aa:	e0ec      	b.n	8002286 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020ac:	f7fe fe52 	bl	8000d54 <HAL_GetTick>
 80020b0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_SPI_Receive+0x62>
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0e1      	b.n	8002286 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_SPI_Receive+0x74>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e0da      	b.n	8002286 <HAL_SPI_Receive+0x22a>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2204      	movs	r2, #4
 80020dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	88fa      	ldrh	r2, [r7, #6]
 80020f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800211e:	d10f      	bne.n	8002140 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800212e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800213e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214a:	2b40      	cmp	r3, #64	@ 0x40
 800214c:	d007      	beq.n	800215e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d170      	bne.n	8002248 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002166:	e035      	b.n	80021d4 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d115      	bne.n	80021a2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f103 020c 	add.w	r2, r3, #12
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002182:	7812      	ldrb	r2, [r2, #0]
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021a0:	e018      	b.n	80021d4 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021a2:	f7fe fdd7 	bl	8000d54 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d803      	bhi.n	80021ba <HAL_SPI_Receive+0x15e>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d102      	bne.n	80021c0 <HAL_SPI_Receive+0x164>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e058      	b.n	8002286 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1c4      	bne.n	8002168 <HAL_SPI_Receive+0x10c>
 80021de:	e038      	b.n	8002252 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d113      	bne.n	8002216 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f8:	b292      	uxth	r2, r2
 80021fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002200:	1c9a      	adds	r2, r3, #2
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002214:	e018      	b.n	8002248 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002216:	f7fe fd9d 	bl	8000d54 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d803      	bhi.n	800222e <HAL_SPI_Receive+0x1d2>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d102      	bne.n	8002234 <HAL_SPI_Receive+0x1d8>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d109      	bne.n	8002248 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e01e      	b.n	8002286 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1c6      	bne.n	80021e0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	6839      	ldr	r1, [r7, #0]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fa4a 	bl	80026f0 <SPI_EndRxTransaction>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2220      	movs	r2, #32
 8002266:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002284:	2300      	movs	r3, #0
  }
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b08a      	sub	sp, #40	@ 0x28
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800229c:	2301      	movs	r3, #1
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022a0:	f7fe fd58 	bl	8000d54 <HAL_GetTick>
 80022a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022b8:	7ffb      	ldrb	r3, [r7, #31]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d00c      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x4a>
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022c4:	d106      	bne.n	80022d4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_SPI_TransmitReceive+0x46>
 80022ce:	7ffb      	ldrb	r3, [r7, #31]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d001      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
 80022d6:	e17f      	b.n	80025d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_SPI_TransmitReceive+0x5c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_SPI_TransmitReceive+0x5c>
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e174      	b.n	80025d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_SPI_TransmitReceive+0x6e>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e16d      	b.n	80025d8 <HAL_SPI_TransmitReceive+0x34a>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b04      	cmp	r3, #4
 800230e:	d003      	beq.n	8002318 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2205      	movs	r2, #5
 8002314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	887a      	ldrh	r2, [r7, #2]
 800232e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	887a      	ldrh	r2, [r7, #2]
 800233a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002358:	2b40      	cmp	r3, #64	@ 0x40
 800235a:	d007      	beq.n	800236c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800236a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002374:	d17e      	bne.n	8002474 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_SPI_TransmitReceive+0xf6>
 800237e:	8afb      	ldrh	r3, [r7, #22]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d16c      	bne.n	800245e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002394:	1c9a      	adds	r2, r3, #2
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023a8:	e059      	b.n	800245e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d11b      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x162>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d016      	beq.n	80023f0 <HAL_SPI_TransmitReceive+0x162>
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d113      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	881a      	ldrh	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	1c9a      	adds	r2, r3, #2
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d119      	bne.n	8002432 <HAL_SPI_TransmitReceive+0x1a4>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d014      	beq.n	8002432 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002412:	b292      	uxth	r2, r2
 8002414:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241a:	1c9a      	adds	r2, r3, #2
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800242e:	2301      	movs	r3, #1
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002432:	f7fe fc8f 	bl	8000d54 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800243e:	429a      	cmp	r2, r3
 8002440:	d80d      	bhi.n	800245e <HAL_SPI_TransmitReceive+0x1d0>
 8002442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d009      	beq.n	800245e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0bc      	b.n	80025d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1a0      	bne.n	80023aa <HAL_SPI_TransmitReceive+0x11c>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d19b      	bne.n	80023aa <HAL_SPI_TransmitReceive+0x11c>
 8002472:	e082      	b.n	800257a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_SPI_TransmitReceive+0x1f4>
 800247c:	8afb      	ldrh	r3, [r7, #22]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d171      	bne.n	8002566 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	330c      	adds	r3, #12
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024a8:	e05d      	b.n	8002566 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d11c      	bne.n	80024f2 <HAL_SPI_TransmitReceive+0x264>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d017      	beq.n	80024f2 <HAL_SPI_TransmitReceive+0x264>
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d114      	bne.n	80024f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	330c      	adds	r3, #12
 80024d2:	7812      	ldrb	r2, [r2, #0]
 80024d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d119      	bne.n	8002534 <HAL_SPI_TransmitReceive+0x2a6>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d014      	beq.n	8002534 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002530:	2301      	movs	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002534:	f7fe fc0e 	bl	8000d54 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002540:	429a      	cmp	r2, r3
 8002542:	d803      	bhi.n	800254c <HAL_SPI_TransmitReceive+0x2be>
 8002544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254a:	d102      	bne.n	8002552 <HAL_SPI_TransmitReceive+0x2c4>
 800254c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e038      	b.n	80025d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d19c      	bne.n	80024aa <HAL_SPI_TransmitReceive+0x21c>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d197      	bne.n	80024aa <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800257a:	6a3a      	ldr	r2, [r7, #32]
 800257c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f908 	bl	8002794 <SPI_EndRxTxTransaction>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e01d      	b.n	80025d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80025d6:	2300      	movs	r3, #0
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3728      	adds	r7, #40	@ 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025f0:	f7fe fbb0 	bl	8000d54 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002600:	f7fe fba8 	bl	8000d54 <HAL_GetTick>
 8002604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002606:	4b39      	ldr	r3, [pc, #228]	@ (80026ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	015b      	lsls	r3, r3, #5
 800260c:	0d1b      	lsrs	r3, r3, #20
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002616:	e054      	b.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261e:	d050      	beq.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002620:	f7fe fb98 	bl	8000d54 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	429a      	cmp	r2, r3
 800262e:	d902      	bls.n	8002636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d13d      	bne.n	80026b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800264e:	d111      	bne.n	8002674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002658:	d004      	beq.n	8002664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002662:	d107      	bne.n	8002674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800267c:	d10f      	bne.n	800269e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800269c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e017      	b.n	80026e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3b01      	subs	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4013      	ands	r3, r2
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d19b      	bne.n	8002618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000008 	.word	0x20000008

080026f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002704:	d111      	bne.n	800272a <SPI_EndRxTransaction+0x3a>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800270e:	d004      	beq.n	800271a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002718:	d107      	bne.n	800272a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002728:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002732:	d117      	bne.n	8002764 <SPI_EndRxTransaction+0x74>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273c:	d112      	bne.n	8002764 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2200      	movs	r2, #0
 8002746:	2101      	movs	r1, #1
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff ff49 	bl	80025e0 <SPI_WaitFlagStateUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01a      	beq.n	800278a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e013      	b.n	800278c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	2180      	movs	r1, #128	@ 0x80
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff ff36 	bl	80025e0 <SPI_WaitFlagStateUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e000      	b.n	800278c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2201      	movs	r2, #1
 80027a8:	2102      	movs	r1, #2
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f7ff ff18 	bl	80025e0 <SPI_WaitFlagStateUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e013      	b.n	80027ee <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2180      	movs	r1, #128	@ 0x80
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff ff05 	bl	80025e0 <SPI_WaitFlagStateUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e000      	b.n	80027ee <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e042      	b.n	800288e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d106      	bne.n	8002822 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7fe f9c9 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2224      	movs	r2, #36	@ 0x24
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002838:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fdfa 	bl	8003434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800284e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800285e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800286e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b08a      	sub	sp, #40	@ 0x28
 800289a:	af02      	add	r7, sp, #8
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d175      	bne.n	80029a2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_UART_Transmit+0x2c>
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e06e      	b.n	80029a4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2221      	movs	r2, #33	@ 0x21
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028d4:	f7fe fa3e 	bl	8000d54 <HAL_GetTick>
 80028d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	88fa      	ldrh	r2, [r7, #6]
 80028de:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	88fa      	ldrh	r2, [r7, #6]
 80028e4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ee:	d108      	bne.n	8002902 <HAL_UART_Transmit+0x6c>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d104      	bne.n	8002902 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	e003      	b.n	800290a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800290a:	e02e      	b.n	800296a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2200      	movs	r2, #0
 8002914:	2180      	movs	r1, #128	@ 0x80
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fb98 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e03a      	b.n	80029a4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10b      	bne.n	800294c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002942:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	3302      	adds	r3, #2
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	e007      	b.n	800295c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1cb      	bne.n	800290c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2200      	movs	r2, #0
 800297c:	2140      	movs	r1, #64	@ 0x40
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fb64 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e006      	b.n	80029a4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80029a2:	2302      	movs	r3, #2
  }
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	@ 0x28
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	f040 8081 	bne.w	8002ad0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_UART_Receive+0x2e>
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e079      	b.n	8002ad2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2222      	movs	r2, #34	@ 0x22
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029f2:	f7fe f9af 	bl	8000d54 <HAL_GetTick>
 80029f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a0c:	d108      	bne.n	8002a20 <HAL_UART_Receive+0x74>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d104      	bne.n	8002a20 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	e003      	b.n	8002a28 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a28:	e047      	b.n	8002aba <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2120      	movs	r1, #32
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fb09 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e042      	b.n	8002ad2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	3302      	adds	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	e01f      	b.n	8002aac <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a74:	d007      	beq.n	8002a86 <HAL_UART_Receive+0xda>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <HAL_UART_Receive+0xe8>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e008      	b.n	8002aa6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1b2      	bne.n	8002a2a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e000      	b.n	8002ad2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
  }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b0ba      	sub	sp, #232	@ 0xe8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_UART_IRQHandler+0x66>
 8002b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fbbc 	bl	80032b8 <UART_Receive_IT>
      return;
 8002b40:	e25b      	b.n	8002ffa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80de 	beq.w	8002d08 <HAL_UART_IRQHandler+0x22c>
 8002b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80d1 	beq.w	8002d08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_UART_IRQHandler+0xae>
 8002b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_UART_IRQHandler+0xd2>
 8002b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f043 0202 	orr.w	r2, r3, #2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xf6>
 8002bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bca:	f043 0204 	orr.w	r2, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d011      	beq.n	8002c02 <HAL_UART_IRQHandler+0x126>
 8002bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f043 0208 	orr.w	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 81f2 	beq.w	8002ff0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_UART_IRQHandler+0x14e>
 8002c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fb47 	bl	80032b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <HAL_UART_IRQHandler+0x17a>
 8002c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d04f      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa51 	bl	80030fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d041      	beq.n	8002cee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3314      	adds	r3, #20
 8002c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3314      	adds	r3, #20
 8002c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1d9      	bne.n	8002c6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d013      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8002ebc <HAL_UART_IRQHandler+0x3e0>)
 8002cc4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe f9b8 	bl	8001040 <HAL_DMA_Abort_IT>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce4:	e00e      	b.n	8002d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f99c 	bl	8003024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cec:	e00a      	b.n	8002d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f998 	bl	8003024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	e006      	b.n	8002d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f994 	bl	8003024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002d02:	e175      	b.n	8002ff0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	bf00      	nop
    return;
 8002d06:	e173      	b.n	8002ff0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	f040 814f 	bne.w	8002fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8148 	beq.w	8002fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8141 	beq.w	8002fb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80b6 	beq.w	8002ec0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8145 	beq.w	8002ff4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d72:	429a      	cmp	r2, r3
 8002d74:	f080 813e 	bcs.w	8002ff4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	f000 8088 	beq.w	8002e9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d9a:	e853 3f00 	ldrex	r3, [r3]
 8002d9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002da6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002daa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	330c      	adds	r3, #12
 8002db4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002db8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002dc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002dc8:	e841 2300 	strex	r3, r2, [r1]
 8002dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1d9      	bne.n	8002d8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3314      	adds	r3, #20
 8002dde:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002de8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3314      	adds	r3, #20
 8002df8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dfc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e1      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3314      	adds	r3, #20
 8002e1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e1e:	e853 3f00 	ldrex	r3, [r3]
 8002e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3314      	adds	r3, #20
 8002e34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e40:	e841 2300 	strex	r3, r2, [r1]
 8002e44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e3      	bne.n	8002e14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e6c:	f023 0310 	bic.w	r3, r3, #16
 8002e70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e80:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e3      	bne.n	8002e5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe f897 	bl	8000fca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8bf 	bl	8003036 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002eb8:	e09c      	b.n	8002ff4 <HAL_UART_IRQHandler+0x518>
 8002eba:	bf00      	nop
 8002ebc:	080031c3 	.word	0x080031c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 808e 	beq.w	8002ff8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8089 	beq.w	8002ff8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330c      	adds	r3, #12
 8002eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef0:	e853 3f00 	ldrex	r3, [r3]
 8002ef4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002efc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002f0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e3      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3314      	adds	r3, #20
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f42:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e3      	bne.n	8002f1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	330c      	adds	r3, #12
 8002f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	e853 3f00 	ldrex	r3, [r3]
 8002f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0310 	bic.w	r3, r3, #16
 8002f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f88:	61fa      	str	r2, [r7, #28]
 8002f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	69b9      	ldr	r1, [r7, #24]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	617b      	str	r3, [r7, #20]
   return(result);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e3      	bne.n	8002f64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f844 	bl	8003036 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fae:	e023      	b.n	8002ff8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x4f4>
 8002fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f90e 	bl	80031ea <UART_Transmit_IT>
    return;
 8002fce:	e014      	b.n	8002ffa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <HAL_UART_IRQHandler+0x51e>
 8002fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f94d 	bl	8003288 <UART_EndTransmit_IT>
    return;
 8002fee:	e004      	b.n	8002ffa <HAL_UART_IRQHandler+0x51e>
    return;
 8002ff0:	bf00      	nop
 8002ff2:	e002      	b.n	8002ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ff4:	bf00      	nop
 8002ff6:	e000      	b.n	8002ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ff8:	bf00      	nop
  }
}
 8002ffa:	37e8      	adds	r7, #232	@ 0xe8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305c:	e03b      	b.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d037      	beq.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fd fe75 	bl	8000d54 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	6a3a      	ldr	r2, [r7, #32]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <UART_WaitOnFlagUntilTimeout+0x30>
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e03a      	b.n	80030f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d023      	beq.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b80      	cmp	r3, #128	@ 0x80
 8003092:	d020      	beq.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b40      	cmp	r3, #64	@ 0x40
 8003098:	d01d      	beq.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d116      	bne.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f81d 	bl	80030fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2208      	movs	r2, #8
 80030c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e00f      	b.n	80030f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d0b4      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030fe:	b480      	push	{r7}
 8003100:	b095      	sub	sp, #84	@ 0x54
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003118:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800311c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003126:	643a      	str	r2, [r7, #64]	@ 0x40
 8003128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800312c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e5      	bne.n	8003106 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3314      	adds	r3, #20
 8003140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	61fb      	str	r3, [r7, #28]
   return(result);
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3314      	adds	r3, #20
 8003158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800315a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800315c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003160:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003162:	e841 2300 	strex	r3, r2, [r1]
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1e5      	bne.n	800313a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	2b01      	cmp	r3, #1
 8003174:	d119      	bne.n	80031aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	60bb      	str	r3, [r7, #8]
   return(result);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f023 0310 	bic.w	r3, r3, #16
 800318c:	647b      	str	r3, [r7, #68]	@ 0x44
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003196:	61ba      	str	r2, [r7, #24]
 8003198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6979      	ldr	r1, [r7, #20]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	613b      	str	r3, [r7, #16]
   return(result);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e5      	bne.n	8003176 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031b8:	bf00      	nop
 80031ba:	3754      	adds	r7, #84	@ 0x54
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f7ff ff21 	bl	8003024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b21      	cmp	r3, #33	@ 0x21
 80031fc:	d13e      	bne.n	800327c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003206:	d114      	bne.n	8003232 <UART_Transmit_IT+0x48>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d110      	bne.n	8003232 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003224:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	1c9a      	adds	r2, r3, #2
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	621a      	str	r2, [r3, #32]
 8003230:	e008      	b.n	8003244 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	1c59      	adds	r1, r3, #1
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6211      	str	r1, [r2, #32]
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29b      	uxth	r3, r3
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4619      	mov	r1, r3
 8003252:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003266:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003276:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800329e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fea9 	bl	8003000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	@ 0x30
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b22      	cmp	r3, #34	@ 0x22
 80032ca:	f040 80ae 	bne.w	800342a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032d6:	d117      	bne.n	8003308 <UART_Receive_IT+0x50>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d113      	bne.n	8003308 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	1c9a      	adds	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	629a      	str	r2, [r3, #40]	@ 0x28
 8003306:	e026      	b.n	8003356 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800330e:	2300      	movs	r3, #0
 8003310:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331a:	d007      	beq.n	800332c <UART_Receive_IT+0x74>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <UART_Receive_IT+0x82>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d106      	bne.n	800333a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	b2da      	uxtb	r2, r3
 8003334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e008      	b.n	800334c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003346:	b2da      	uxtb	r2, r3
 8003348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29b      	uxth	r3, r3
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4619      	mov	r1, r3
 8003364:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003366:	2b00      	cmp	r3, #0
 8003368:	d15d      	bne.n	8003426 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0220 	bic.w	r2, r2, #32
 8003378:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003388:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d135      	bne.n	800341c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	613b      	str	r3, [r7, #16]
   return(result);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f023 0310 	bic.w	r3, r3, #16
 80033cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d6:	623a      	str	r2, [r7, #32]
 80033d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	69f9      	ldr	r1, [r7, #28]
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e5      	bne.n	80033b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d10a      	bne.n	800340e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fe0e 	bl	8003036 <HAL_UARTEx_RxEventCallback>
 800341a:	e002      	b.n	8003422 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fdf8 	bl	8003012 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e002      	b.n	800342c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e000      	b.n	800342c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
  }
}
 800342c:	4618      	mov	r0, r3
 800342e:	3730      	adds	r7, #48	@ 0x30
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800346e:	f023 030c 	bic.w	r3, r3, #12
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	430b      	orrs	r3, r1
 800347a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2c      	ldr	r2, [pc, #176]	@ (8003548 <UART_SetConfig+0x114>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d103      	bne.n	80034a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800349c:	f7fe fbe4 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	e002      	b.n	80034aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034a4:	f7fe fbcc 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 80034a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	009a      	lsls	r2, r3, #2
 80034b4:	441a      	add	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	4a22      	ldr	r2, [pc, #136]	@ (800354c <UART_SetConfig+0x118>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	0119      	lsls	r1, r3, #4
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009a      	lsls	r2, r3, #2
 80034d4:	441a      	add	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80034e0:	4b1a      	ldr	r3, [pc, #104]	@ (800354c <UART_SetConfig+0x118>)
 80034e2:	fba3 0302 	umull	r0, r3, r3, r2
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	2064      	movs	r0, #100	@ 0x64
 80034ea:	fb00 f303 	mul.w	r3, r0, r3
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	3332      	adds	r3, #50	@ 0x32
 80034f4:	4a15      	ldr	r2, [pc, #84]	@ (800354c <UART_SetConfig+0x118>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003500:	4419      	add	r1, r3
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009a      	lsls	r2, r3, #2
 800350c:	441a      	add	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	fbb2 f2f3 	udiv	r2, r2, r3
 8003518:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <UART_SetConfig+0x118>)
 800351a:	fba3 0302 	umull	r0, r3, r3, r2
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2064      	movs	r0, #100	@ 0x64
 8003522:	fb00 f303 	mul.w	r3, r0, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	3332      	adds	r3, #50	@ 0x32
 800352c:	4a07      	ldr	r2, [pc, #28]	@ (800354c <UART_SetConfig+0x118>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	440a      	add	r2, r1
 800353e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40013800 	.word	0x40013800
 800354c:	51eb851f 	.word	0x51eb851f

08003550 <std>:
 8003550:	2300      	movs	r3, #0
 8003552:	b510      	push	{r4, lr}
 8003554:	4604      	mov	r4, r0
 8003556:	e9c0 3300 	strd	r3, r3, [r0]
 800355a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800355e:	6083      	str	r3, [r0, #8]
 8003560:	8181      	strh	r1, [r0, #12]
 8003562:	6643      	str	r3, [r0, #100]	@ 0x64
 8003564:	81c2      	strh	r2, [r0, #14]
 8003566:	6183      	str	r3, [r0, #24]
 8003568:	4619      	mov	r1, r3
 800356a:	2208      	movs	r2, #8
 800356c:	305c      	adds	r0, #92	@ 0x5c
 800356e:	f000 f906 	bl	800377e <memset>
 8003572:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <std+0x58>)
 8003574:	6224      	str	r4, [r4, #32]
 8003576:	6263      	str	r3, [r4, #36]	@ 0x24
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <std+0x5c>)
 800357a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800357c:	4b0c      	ldr	r3, [pc, #48]	@ (80035b0 <std+0x60>)
 800357e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <std+0x64>)
 8003582:	6323      	str	r3, [r4, #48]	@ 0x30
 8003584:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <std+0x68>)
 8003586:	429c      	cmp	r4, r3
 8003588:	d006      	beq.n	8003598 <std+0x48>
 800358a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800358e:	4294      	cmp	r4, r2
 8003590:	d002      	beq.n	8003598 <std+0x48>
 8003592:	33d0      	adds	r3, #208	@ 0xd0
 8003594:	429c      	cmp	r4, r3
 8003596:	d105      	bne.n	80035a4 <std+0x54>
 8003598:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800359c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035a0:	f000 b966 	b.w	8003870 <__retarget_lock_init_recursive>
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	bf00      	nop
 80035a8:	080036f9 	.word	0x080036f9
 80035ac:	0800371b 	.word	0x0800371b
 80035b0:	08003753 	.word	0x08003753
 80035b4:	08003777 	.word	0x08003777
 80035b8:	20000154 	.word	0x20000154

080035bc <stdio_exit_handler>:
 80035bc:	4a02      	ldr	r2, [pc, #8]	@ (80035c8 <stdio_exit_handler+0xc>)
 80035be:	4903      	ldr	r1, [pc, #12]	@ (80035cc <stdio_exit_handler+0x10>)
 80035c0:	4803      	ldr	r0, [pc, #12]	@ (80035d0 <stdio_exit_handler+0x14>)
 80035c2:	f000 b869 	b.w	8003698 <_fwalk_sglue>
 80035c6:	bf00      	nop
 80035c8:	20000014 	.word	0x20000014
 80035cc:	08004109 	.word	0x08004109
 80035d0:	20000024 	.word	0x20000024

080035d4 <cleanup_stdio>:
 80035d4:	6841      	ldr	r1, [r0, #4]
 80035d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <cleanup_stdio+0x34>)
 80035d8:	b510      	push	{r4, lr}
 80035da:	4299      	cmp	r1, r3
 80035dc:	4604      	mov	r4, r0
 80035de:	d001      	beq.n	80035e4 <cleanup_stdio+0x10>
 80035e0:	f000 fd92 	bl	8004108 <_fflush_r>
 80035e4:	68a1      	ldr	r1, [r4, #8]
 80035e6:	4b09      	ldr	r3, [pc, #36]	@ (800360c <cleanup_stdio+0x38>)
 80035e8:	4299      	cmp	r1, r3
 80035ea:	d002      	beq.n	80035f2 <cleanup_stdio+0x1e>
 80035ec:	4620      	mov	r0, r4
 80035ee:	f000 fd8b 	bl	8004108 <_fflush_r>
 80035f2:	68e1      	ldr	r1, [r4, #12]
 80035f4:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <cleanup_stdio+0x3c>)
 80035f6:	4299      	cmp	r1, r3
 80035f8:	d004      	beq.n	8003604 <cleanup_stdio+0x30>
 80035fa:	4620      	mov	r0, r4
 80035fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003600:	f000 bd82 	b.w	8004108 <_fflush_r>
 8003604:	bd10      	pop	{r4, pc}
 8003606:	bf00      	nop
 8003608:	20000154 	.word	0x20000154
 800360c:	200001bc 	.word	0x200001bc
 8003610:	20000224 	.word	0x20000224

08003614 <global_stdio_init.part.0>:
 8003614:	b510      	push	{r4, lr}
 8003616:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <global_stdio_init.part.0+0x30>)
 8003618:	4c0b      	ldr	r4, [pc, #44]	@ (8003648 <global_stdio_init.part.0+0x34>)
 800361a:	4a0c      	ldr	r2, [pc, #48]	@ (800364c <global_stdio_init.part.0+0x38>)
 800361c:	4620      	mov	r0, r4
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	2104      	movs	r1, #4
 8003622:	2200      	movs	r2, #0
 8003624:	f7ff ff94 	bl	8003550 <std>
 8003628:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800362c:	2201      	movs	r2, #1
 800362e:	2109      	movs	r1, #9
 8003630:	f7ff ff8e 	bl	8003550 <std>
 8003634:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003638:	2202      	movs	r2, #2
 800363a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800363e:	2112      	movs	r1, #18
 8003640:	f7ff bf86 	b.w	8003550 <std>
 8003644:	2000028c 	.word	0x2000028c
 8003648:	20000154 	.word	0x20000154
 800364c:	080035bd 	.word	0x080035bd

08003650 <__sfp_lock_acquire>:
 8003650:	4801      	ldr	r0, [pc, #4]	@ (8003658 <__sfp_lock_acquire+0x8>)
 8003652:	f000 b90e 	b.w	8003872 <__retarget_lock_acquire_recursive>
 8003656:	bf00      	nop
 8003658:	20000295 	.word	0x20000295

0800365c <__sfp_lock_release>:
 800365c:	4801      	ldr	r0, [pc, #4]	@ (8003664 <__sfp_lock_release+0x8>)
 800365e:	f000 b909 	b.w	8003874 <__retarget_lock_release_recursive>
 8003662:	bf00      	nop
 8003664:	20000295 	.word	0x20000295

08003668 <__sinit>:
 8003668:	b510      	push	{r4, lr}
 800366a:	4604      	mov	r4, r0
 800366c:	f7ff fff0 	bl	8003650 <__sfp_lock_acquire>
 8003670:	6a23      	ldr	r3, [r4, #32]
 8003672:	b11b      	cbz	r3, 800367c <__sinit+0x14>
 8003674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003678:	f7ff bff0 	b.w	800365c <__sfp_lock_release>
 800367c:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <__sinit+0x28>)
 800367e:	6223      	str	r3, [r4, #32]
 8003680:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <__sinit+0x2c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f5      	bne.n	8003674 <__sinit+0xc>
 8003688:	f7ff ffc4 	bl	8003614 <global_stdio_init.part.0>
 800368c:	e7f2      	b.n	8003674 <__sinit+0xc>
 800368e:	bf00      	nop
 8003690:	080035d5 	.word	0x080035d5
 8003694:	2000028c 	.word	0x2000028c

08003698 <_fwalk_sglue>:
 8003698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800369c:	4607      	mov	r7, r0
 800369e:	4688      	mov	r8, r1
 80036a0:	4614      	mov	r4, r2
 80036a2:	2600      	movs	r6, #0
 80036a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036a8:	f1b9 0901 	subs.w	r9, r9, #1
 80036ac:	d505      	bpl.n	80036ba <_fwalk_sglue+0x22>
 80036ae:	6824      	ldr	r4, [r4, #0]
 80036b0:	2c00      	cmp	r4, #0
 80036b2:	d1f7      	bne.n	80036a4 <_fwalk_sglue+0xc>
 80036b4:	4630      	mov	r0, r6
 80036b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ba:	89ab      	ldrh	r3, [r5, #12]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d907      	bls.n	80036d0 <_fwalk_sglue+0x38>
 80036c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036c4:	3301      	adds	r3, #1
 80036c6:	d003      	beq.n	80036d0 <_fwalk_sglue+0x38>
 80036c8:	4629      	mov	r1, r5
 80036ca:	4638      	mov	r0, r7
 80036cc:	47c0      	blx	r8
 80036ce:	4306      	orrs	r6, r0
 80036d0:	3568      	adds	r5, #104	@ 0x68
 80036d2:	e7e9      	b.n	80036a8 <_fwalk_sglue+0x10>

080036d4 <iprintf>:
 80036d4:	b40f      	push	{r0, r1, r2, r3}
 80036d6:	b507      	push	{r0, r1, r2, lr}
 80036d8:	4906      	ldr	r1, [pc, #24]	@ (80036f4 <iprintf+0x20>)
 80036da:	ab04      	add	r3, sp, #16
 80036dc:	6808      	ldr	r0, [r1, #0]
 80036de:	f853 2b04 	ldr.w	r2, [r3], #4
 80036e2:	6881      	ldr	r1, [r0, #8]
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	f000 f9e5 	bl	8003ab4 <_vfiprintf_r>
 80036ea:	b003      	add	sp, #12
 80036ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f0:	b004      	add	sp, #16
 80036f2:	4770      	bx	lr
 80036f4:	20000020 	.word	0x20000020

080036f8 <__sread>:
 80036f8:	b510      	push	{r4, lr}
 80036fa:	460c      	mov	r4, r1
 80036fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003700:	f000 f868 	bl	80037d4 <_read_r>
 8003704:	2800      	cmp	r0, #0
 8003706:	bfab      	itete	ge
 8003708:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800370a:	89a3      	ldrhlt	r3, [r4, #12]
 800370c:	181b      	addge	r3, r3, r0
 800370e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003712:	bfac      	ite	ge
 8003714:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003716:	81a3      	strhlt	r3, [r4, #12]
 8003718:	bd10      	pop	{r4, pc}

0800371a <__swrite>:
 800371a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800371e:	461f      	mov	r7, r3
 8003720:	898b      	ldrh	r3, [r1, #12]
 8003722:	4605      	mov	r5, r0
 8003724:	05db      	lsls	r3, r3, #23
 8003726:	460c      	mov	r4, r1
 8003728:	4616      	mov	r6, r2
 800372a:	d505      	bpl.n	8003738 <__swrite+0x1e>
 800372c:	2302      	movs	r3, #2
 800372e:	2200      	movs	r2, #0
 8003730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003734:	f000 f83c 	bl	80037b0 <_lseek_r>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	4632      	mov	r2, r6
 800373c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003740:	81a3      	strh	r3, [r4, #12]
 8003742:	4628      	mov	r0, r5
 8003744:	463b      	mov	r3, r7
 8003746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800374a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800374e:	f000 b853 	b.w	80037f8 <_write_r>

08003752 <__sseek>:
 8003752:	b510      	push	{r4, lr}
 8003754:	460c      	mov	r4, r1
 8003756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800375a:	f000 f829 	bl	80037b0 <_lseek_r>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	bf15      	itete	ne
 8003764:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003766:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800376a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800376e:	81a3      	strheq	r3, [r4, #12]
 8003770:	bf18      	it	ne
 8003772:	81a3      	strhne	r3, [r4, #12]
 8003774:	bd10      	pop	{r4, pc}

08003776 <__sclose>:
 8003776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800377a:	f000 b809 	b.w	8003790 <_close_r>

0800377e <memset>:
 800377e:	4603      	mov	r3, r0
 8003780:	4402      	add	r2, r0
 8003782:	4293      	cmp	r3, r2
 8003784:	d100      	bne.n	8003788 <memset+0xa>
 8003786:	4770      	bx	lr
 8003788:	f803 1b01 	strb.w	r1, [r3], #1
 800378c:	e7f9      	b.n	8003782 <memset+0x4>
	...

08003790 <_close_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	2300      	movs	r3, #0
 8003794:	4d05      	ldr	r5, [pc, #20]	@ (80037ac <_close_r+0x1c>)
 8003796:	4604      	mov	r4, r0
 8003798:	4608      	mov	r0, r1
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	f7fd f973 	bl	8000a86 <_close>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_close_r+0x1a>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_close_r+0x1a>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	20000290 	.word	0x20000290

080037b0 <_lseek_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	4604      	mov	r4, r0
 80037b4:	4608      	mov	r0, r1
 80037b6:	4611      	mov	r1, r2
 80037b8:	2200      	movs	r2, #0
 80037ba:	4d05      	ldr	r5, [pc, #20]	@ (80037d0 <_lseek_r+0x20>)
 80037bc:	602a      	str	r2, [r5, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	f7fd f985 	bl	8000ace <_lseek>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	d102      	bne.n	80037ce <_lseek_r+0x1e>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	b103      	cbz	r3, 80037ce <_lseek_r+0x1e>
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	20000290 	.word	0x20000290

080037d4 <_read_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4604      	mov	r4, r0
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	2200      	movs	r2, #0
 80037de:	4d05      	ldr	r5, [pc, #20]	@ (80037f4 <_read_r+0x20>)
 80037e0:	602a      	str	r2, [r5, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f7fd f916 	bl	8000a14 <_read>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_read_r+0x1e>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_read_r+0x1e>
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	20000290 	.word	0x20000290

080037f8 <_write_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4604      	mov	r4, r0
 80037fc:	4608      	mov	r0, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	2200      	movs	r2, #0
 8003802:	4d05      	ldr	r5, [pc, #20]	@ (8003818 <_write_r+0x20>)
 8003804:	602a      	str	r2, [r5, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	f7fd f921 	bl	8000a4e <_write>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	d102      	bne.n	8003816 <_write_r+0x1e>
 8003810:	682b      	ldr	r3, [r5, #0]
 8003812:	b103      	cbz	r3, 8003816 <_write_r+0x1e>
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	20000290 	.word	0x20000290

0800381c <__errno>:
 800381c:	4b01      	ldr	r3, [pc, #4]	@ (8003824 <__errno+0x8>)
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000020 	.word	0x20000020

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	2600      	movs	r6, #0
 800382c:	4d0c      	ldr	r5, [pc, #48]	@ (8003860 <__libc_init_array+0x38>)
 800382e:	4c0d      	ldr	r4, [pc, #52]	@ (8003864 <__libc_init_array+0x3c>)
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	42a6      	cmp	r6, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	f000 fdc4 	bl	80043c4 <_init>
 800383c:	2600      	movs	r6, #0
 800383e:	4d0a      	ldr	r5, [pc, #40]	@ (8003868 <__libc_init_array+0x40>)
 8003840:	4c0a      	ldr	r4, [pc, #40]	@ (800386c <__libc_init_array+0x44>)
 8003842:	1b64      	subs	r4, r4, r5
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	42a6      	cmp	r6, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003850:	4798      	blx	r3
 8003852:	3601      	adds	r6, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	f855 3b04 	ldr.w	r3, [r5], #4
 800385a:	4798      	blx	r3
 800385c:	3601      	adds	r6, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	0800444c 	.word	0x0800444c
 8003864:	0800444c 	.word	0x0800444c
 8003868:	0800444c 	.word	0x0800444c
 800386c:	08004450 	.word	0x08004450

08003870 <__retarget_lock_init_recursive>:
 8003870:	4770      	bx	lr

08003872 <__retarget_lock_acquire_recursive>:
 8003872:	4770      	bx	lr

08003874 <__retarget_lock_release_recursive>:
 8003874:	4770      	bx	lr
	...

08003878 <_free_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4605      	mov	r5, r0
 800387c:	2900      	cmp	r1, #0
 800387e:	d040      	beq.n	8003902 <_free_r+0x8a>
 8003880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003884:	1f0c      	subs	r4, r1, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfb8      	it	lt
 800388a:	18e4      	addlt	r4, r4, r3
 800388c:	f000 f8de 	bl	8003a4c <__malloc_lock>
 8003890:	4a1c      	ldr	r2, [pc, #112]	@ (8003904 <_free_r+0x8c>)
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	b933      	cbnz	r3, 80038a4 <_free_r+0x2c>
 8003896:	6063      	str	r3, [r4, #4]
 8003898:	6014      	str	r4, [r2, #0]
 800389a:	4628      	mov	r0, r5
 800389c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a0:	f000 b8da 	b.w	8003a58 <__malloc_unlock>
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	d908      	bls.n	80038ba <_free_r+0x42>
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	1821      	adds	r1, r4, r0
 80038ac:	428b      	cmp	r3, r1
 80038ae:	bf01      	itttt	eq
 80038b0:	6819      	ldreq	r1, [r3, #0]
 80038b2:	685b      	ldreq	r3, [r3, #4]
 80038b4:	1809      	addeq	r1, r1, r0
 80038b6:	6021      	streq	r1, [r4, #0]
 80038b8:	e7ed      	b.n	8003896 <_free_r+0x1e>
 80038ba:	461a      	mov	r2, r3
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	b10b      	cbz	r3, 80038c4 <_free_r+0x4c>
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d9fa      	bls.n	80038ba <_free_r+0x42>
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	1850      	adds	r0, r2, r1
 80038c8:	42a0      	cmp	r0, r4
 80038ca:	d10b      	bne.n	80038e4 <_free_r+0x6c>
 80038cc:	6820      	ldr	r0, [r4, #0]
 80038ce:	4401      	add	r1, r0
 80038d0:	1850      	adds	r0, r2, r1
 80038d2:	4283      	cmp	r3, r0
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	d1e0      	bne.n	800389a <_free_r+0x22>
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4408      	add	r0, r1
 80038de:	6010      	str	r0, [r2, #0]
 80038e0:	6053      	str	r3, [r2, #4]
 80038e2:	e7da      	b.n	800389a <_free_r+0x22>
 80038e4:	d902      	bls.n	80038ec <_free_r+0x74>
 80038e6:	230c      	movs	r3, #12
 80038e8:	602b      	str	r3, [r5, #0]
 80038ea:	e7d6      	b.n	800389a <_free_r+0x22>
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	1821      	adds	r1, r4, r0
 80038f0:	428b      	cmp	r3, r1
 80038f2:	bf01      	itttt	eq
 80038f4:	6819      	ldreq	r1, [r3, #0]
 80038f6:	685b      	ldreq	r3, [r3, #4]
 80038f8:	1809      	addeq	r1, r1, r0
 80038fa:	6021      	streq	r1, [r4, #0]
 80038fc:	6063      	str	r3, [r4, #4]
 80038fe:	6054      	str	r4, [r2, #4]
 8003900:	e7cb      	b.n	800389a <_free_r+0x22>
 8003902:	bd38      	pop	{r3, r4, r5, pc}
 8003904:	2000029c 	.word	0x2000029c

08003908 <sbrk_aligned>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4e0f      	ldr	r6, [pc, #60]	@ (8003948 <sbrk_aligned+0x40>)
 800390c:	460c      	mov	r4, r1
 800390e:	6831      	ldr	r1, [r6, #0]
 8003910:	4605      	mov	r5, r0
 8003912:	b911      	cbnz	r1, 800391a <sbrk_aligned+0x12>
 8003914:	f000 fcb4 	bl	8004280 <_sbrk_r>
 8003918:	6030      	str	r0, [r6, #0]
 800391a:	4621      	mov	r1, r4
 800391c:	4628      	mov	r0, r5
 800391e:	f000 fcaf 	bl	8004280 <_sbrk_r>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	d103      	bne.n	800392e <sbrk_aligned+0x26>
 8003926:	f04f 34ff 	mov.w	r4, #4294967295
 800392a:	4620      	mov	r0, r4
 800392c:	bd70      	pop	{r4, r5, r6, pc}
 800392e:	1cc4      	adds	r4, r0, #3
 8003930:	f024 0403 	bic.w	r4, r4, #3
 8003934:	42a0      	cmp	r0, r4
 8003936:	d0f8      	beq.n	800392a <sbrk_aligned+0x22>
 8003938:	1a21      	subs	r1, r4, r0
 800393a:	4628      	mov	r0, r5
 800393c:	f000 fca0 	bl	8004280 <_sbrk_r>
 8003940:	3001      	adds	r0, #1
 8003942:	d1f2      	bne.n	800392a <sbrk_aligned+0x22>
 8003944:	e7ef      	b.n	8003926 <sbrk_aligned+0x1e>
 8003946:	bf00      	nop
 8003948:	20000298 	.word	0x20000298

0800394c <_malloc_r>:
 800394c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003950:	1ccd      	adds	r5, r1, #3
 8003952:	f025 0503 	bic.w	r5, r5, #3
 8003956:	3508      	adds	r5, #8
 8003958:	2d0c      	cmp	r5, #12
 800395a:	bf38      	it	cc
 800395c:	250c      	movcc	r5, #12
 800395e:	2d00      	cmp	r5, #0
 8003960:	4606      	mov	r6, r0
 8003962:	db01      	blt.n	8003968 <_malloc_r+0x1c>
 8003964:	42a9      	cmp	r1, r5
 8003966:	d904      	bls.n	8003972 <_malloc_r+0x26>
 8003968:	230c      	movs	r3, #12
 800396a:	6033      	str	r3, [r6, #0]
 800396c:	2000      	movs	r0, #0
 800396e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a48 <_malloc_r+0xfc>
 8003976:	f000 f869 	bl	8003a4c <__malloc_lock>
 800397a:	f8d8 3000 	ldr.w	r3, [r8]
 800397e:	461c      	mov	r4, r3
 8003980:	bb44      	cbnz	r4, 80039d4 <_malloc_r+0x88>
 8003982:	4629      	mov	r1, r5
 8003984:	4630      	mov	r0, r6
 8003986:	f7ff ffbf 	bl	8003908 <sbrk_aligned>
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	4604      	mov	r4, r0
 800398e:	d158      	bne.n	8003a42 <_malloc_r+0xf6>
 8003990:	f8d8 4000 	ldr.w	r4, [r8]
 8003994:	4627      	mov	r7, r4
 8003996:	2f00      	cmp	r7, #0
 8003998:	d143      	bne.n	8003a22 <_malloc_r+0xd6>
 800399a:	2c00      	cmp	r4, #0
 800399c:	d04b      	beq.n	8003a36 <_malloc_r+0xea>
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	4639      	mov	r1, r7
 80039a2:	4630      	mov	r0, r6
 80039a4:	eb04 0903 	add.w	r9, r4, r3
 80039a8:	f000 fc6a 	bl	8004280 <_sbrk_r>
 80039ac:	4581      	cmp	r9, r0
 80039ae:	d142      	bne.n	8003a36 <_malloc_r+0xea>
 80039b0:	6821      	ldr	r1, [r4, #0]
 80039b2:	4630      	mov	r0, r6
 80039b4:	1a6d      	subs	r5, r5, r1
 80039b6:	4629      	mov	r1, r5
 80039b8:	f7ff ffa6 	bl	8003908 <sbrk_aligned>
 80039bc:	3001      	adds	r0, #1
 80039be:	d03a      	beq.n	8003a36 <_malloc_r+0xea>
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	442b      	add	r3, r5
 80039c4:	6023      	str	r3, [r4, #0]
 80039c6:	f8d8 3000 	ldr.w	r3, [r8]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	bb62      	cbnz	r2, 8003a28 <_malloc_r+0xdc>
 80039ce:	f8c8 7000 	str.w	r7, [r8]
 80039d2:	e00f      	b.n	80039f4 <_malloc_r+0xa8>
 80039d4:	6822      	ldr	r2, [r4, #0]
 80039d6:	1b52      	subs	r2, r2, r5
 80039d8:	d420      	bmi.n	8003a1c <_malloc_r+0xd0>
 80039da:	2a0b      	cmp	r2, #11
 80039dc:	d917      	bls.n	8003a0e <_malloc_r+0xc2>
 80039de:	1961      	adds	r1, r4, r5
 80039e0:	42a3      	cmp	r3, r4
 80039e2:	6025      	str	r5, [r4, #0]
 80039e4:	bf18      	it	ne
 80039e6:	6059      	strne	r1, [r3, #4]
 80039e8:	6863      	ldr	r3, [r4, #4]
 80039ea:	bf08      	it	eq
 80039ec:	f8c8 1000 	streq.w	r1, [r8]
 80039f0:	5162      	str	r2, [r4, r5]
 80039f2:	604b      	str	r3, [r1, #4]
 80039f4:	4630      	mov	r0, r6
 80039f6:	f000 f82f 	bl	8003a58 <__malloc_unlock>
 80039fa:	f104 000b 	add.w	r0, r4, #11
 80039fe:	1d23      	adds	r3, r4, #4
 8003a00:	f020 0007 	bic.w	r0, r0, #7
 8003a04:	1ac2      	subs	r2, r0, r3
 8003a06:	bf1c      	itt	ne
 8003a08:	1a1b      	subne	r3, r3, r0
 8003a0a:	50a3      	strne	r3, [r4, r2]
 8003a0c:	e7af      	b.n	800396e <_malloc_r+0x22>
 8003a0e:	6862      	ldr	r2, [r4, #4]
 8003a10:	42a3      	cmp	r3, r4
 8003a12:	bf0c      	ite	eq
 8003a14:	f8c8 2000 	streq.w	r2, [r8]
 8003a18:	605a      	strne	r2, [r3, #4]
 8003a1a:	e7eb      	b.n	80039f4 <_malloc_r+0xa8>
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	6864      	ldr	r4, [r4, #4]
 8003a20:	e7ae      	b.n	8003980 <_malloc_r+0x34>
 8003a22:	463c      	mov	r4, r7
 8003a24:	687f      	ldr	r7, [r7, #4]
 8003a26:	e7b6      	b.n	8003996 <_malloc_r+0x4a>
 8003a28:	461a      	mov	r2, r3
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	42a3      	cmp	r3, r4
 8003a2e:	d1fb      	bne.n	8003a28 <_malloc_r+0xdc>
 8003a30:	2300      	movs	r3, #0
 8003a32:	6053      	str	r3, [r2, #4]
 8003a34:	e7de      	b.n	80039f4 <_malloc_r+0xa8>
 8003a36:	230c      	movs	r3, #12
 8003a38:	4630      	mov	r0, r6
 8003a3a:	6033      	str	r3, [r6, #0]
 8003a3c:	f000 f80c 	bl	8003a58 <__malloc_unlock>
 8003a40:	e794      	b.n	800396c <_malloc_r+0x20>
 8003a42:	6005      	str	r5, [r0, #0]
 8003a44:	e7d6      	b.n	80039f4 <_malloc_r+0xa8>
 8003a46:	bf00      	nop
 8003a48:	2000029c 	.word	0x2000029c

08003a4c <__malloc_lock>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	@ (8003a54 <__malloc_lock+0x8>)
 8003a4e:	f7ff bf10 	b.w	8003872 <__retarget_lock_acquire_recursive>
 8003a52:	bf00      	nop
 8003a54:	20000294 	.word	0x20000294

08003a58 <__malloc_unlock>:
 8003a58:	4801      	ldr	r0, [pc, #4]	@ (8003a60 <__malloc_unlock+0x8>)
 8003a5a:	f7ff bf0b 	b.w	8003874 <__retarget_lock_release_recursive>
 8003a5e:	bf00      	nop
 8003a60:	20000294 	.word	0x20000294

08003a64 <__sfputc_r>:
 8003a64:	6893      	ldr	r3, [r2, #8]
 8003a66:	b410      	push	{r4}
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	6093      	str	r3, [r2, #8]
 8003a6e:	da07      	bge.n	8003a80 <__sfputc_r+0x1c>
 8003a70:	6994      	ldr	r4, [r2, #24]
 8003a72:	42a3      	cmp	r3, r4
 8003a74:	db01      	blt.n	8003a7a <__sfputc_r+0x16>
 8003a76:	290a      	cmp	r1, #10
 8003a78:	d102      	bne.n	8003a80 <__sfputc_r+0x1c>
 8003a7a:	bc10      	pop	{r4}
 8003a7c:	f000 bb6c 	b.w	8004158 <__swbuf_r>
 8003a80:	6813      	ldr	r3, [r2, #0]
 8003a82:	1c58      	adds	r0, r3, #1
 8003a84:	6010      	str	r0, [r2, #0]
 8003a86:	7019      	strb	r1, [r3, #0]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	bc10      	pop	{r4}
 8003a8c:	4770      	bx	lr

08003a8e <__sfputs_r>:
 8003a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a90:	4606      	mov	r6, r0
 8003a92:	460f      	mov	r7, r1
 8003a94:	4614      	mov	r4, r2
 8003a96:	18d5      	adds	r5, r2, r3
 8003a98:	42ac      	cmp	r4, r5
 8003a9a:	d101      	bne.n	8003aa0 <__sfputs_r+0x12>
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	e007      	b.n	8003ab0 <__sfputs_r+0x22>
 8003aa0:	463a      	mov	r2, r7
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa8:	f7ff ffdc 	bl	8003a64 <__sfputc_r>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d1f3      	bne.n	8003a98 <__sfputs_r+0xa>
 8003ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ab4 <_vfiprintf_r>:
 8003ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab8:	460d      	mov	r5, r1
 8003aba:	4614      	mov	r4, r2
 8003abc:	4698      	mov	r8, r3
 8003abe:	4606      	mov	r6, r0
 8003ac0:	b09d      	sub	sp, #116	@ 0x74
 8003ac2:	b118      	cbz	r0, 8003acc <_vfiprintf_r+0x18>
 8003ac4:	6a03      	ldr	r3, [r0, #32]
 8003ac6:	b90b      	cbnz	r3, 8003acc <_vfiprintf_r+0x18>
 8003ac8:	f7ff fdce 	bl	8003668 <__sinit>
 8003acc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ace:	07d9      	lsls	r1, r3, #31
 8003ad0:	d405      	bmi.n	8003ade <_vfiprintf_r+0x2a>
 8003ad2:	89ab      	ldrh	r3, [r5, #12]
 8003ad4:	059a      	lsls	r2, r3, #22
 8003ad6:	d402      	bmi.n	8003ade <_vfiprintf_r+0x2a>
 8003ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ada:	f7ff feca 	bl	8003872 <__retarget_lock_acquire_recursive>
 8003ade:	89ab      	ldrh	r3, [r5, #12]
 8003ae0:	071b      	lsls	r3, r3, #28
 8003ae2:	d501      	bpl.n	8003ae8 <_vfiprintf_r+0x34>
 8003ae4:	692b      	ldr	r3, [r5, #16]
 8003ae6:	b99b      	cbnz	r3, 8003b10 <_vfiprintf_r+0x5c>
 8003ae8:	4629      	mov	r1, r5
 8003aea:	4630      	mov	r0, r6
 8003aec:	f000 fb72 	bl	80041d4 <__swsetup_r>
 8003af0:	b170      	cbz	r0, 8003b10 <_vfiprintf_r+0x5c>
 8003af2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003af4:	07dc      	lsls	r4, r3, #31
 8003af6:	d504      	bpl.n	8003b02 <_vfiprintf_r+0x4e>
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	b01d      	add	sp, #116	@ 0x74
 8003afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b02:	89ab      	ldrh	r3, [r5, #12]
 8003b04:	0598      	lsls	r0, r3, #22
 8003b06:	d4f7      	bmi.n	8003af8 <_vfiprintf_r+0x44>
 8003b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b0a:	f7ff feb3 	bl	8003874 <__retarget_lock_release_recursive>
 8003b0e:	e7f3      	b.n	8003af8 <_vfiprintf_r+0x44>
 8003b10:	2300      	movs	r3, #0
 8003b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b14:	2320      	movs	r3, #32
 8003b16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b1a:	2330      	movs	r3, #48	@ 0x30
 8003b1c:	f04f 0901 	mov.w	r9, #1
 8003b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b24:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003cd0 <_vfiprintf_r+0x21c>
 8003b28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	469a      	mov	sl, r3
 8003b30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b34:	b10a      	cbz	r2, 8003b3a <_vfiprintf_r+0x86>
 8003b36:	2a25      	cmp	r2, #37	@ 0x25
 8003b38:	d1f9      	bne.n	8003b2e <_vfiprintf_r+0x7a>
 8003b3a:	ebba 0b04 	subs.w	fp, sl, r4
 8003b3e:	d00b      	beq.n	8003b58 <_vfiprintf_r+0xa4>
 8003b40:	465b      	mov	r3, fp
 8003b42:	4622      	mov	r2, r4
 8003b44:	4629      	mov	r1, r5
 8003b46:	4630      	mov	r0, r6
 8003b48:	f7ff ffa1 	bl	8003a8e <__sfputs_r>
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	f000 80a7 	beq.w	8003ca0 <_vfiprintf_r+0x1ec>
 8003b52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b54:	445a      	add	r2, fp
 8003b56:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b58:	f89a 3000 	ldrb.w	r3, [sl]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 809f 	beq.w	8003ca0 <_vfiprintf_r+0x1ec>
 8003b62:	2300      	movs	r3, #0
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b6c:	f10a 0a01 	add.w	sl, sl, #1
 8003b70:	9304      	str	r3, [sp, #16]
 8003b72:	9307      	str	r3, [sp, #28]
 8003b74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b78:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b7a:	4654      	mov	r4, sl
 8003b7c:	2205      	movs	r2, #5
 8003b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b82:	4853      	ldr	r0, [pc, #332]	@ (8003cd0 <_vfiprintf_r+0x21c>)
 8003b84:	f000 fb8c 	bl	80042a0 <memchr>
 8003b88:	9a04      	ldr	r2, [sp, #16]
 8003b8a:	b9d8      	cbnz	r0, 8003bc4 <_vfiprintf_r+0x110>
 8003b8c:	06d1      	lsls	r1, r2, #27
 8003b8e:	bf44      	itt	mi
 8003b90:	2320      	movmi	r3, #32
 8003b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b96:	0713      	lsls	r3, r2, #28
 8003b98:	bf44      	itt	mi
 8003b9a:	232b      	movmi	r3, #43	@ 0x2b
 8003b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ba6:	d015      	beq.n	8003bd4 <_vfiprintf_r+0x120>
 8003ba8:	4654      	mov	r4, sl
 8003baa:	2000      	movs	r0, #0
 8003bac:	f04f 0c0a 	mov.w	ip, #10
 8003bb0:	9a07      	ldr	r2, [sp, #28]
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb8:	3b30      	subs	r3, #48	@ 0x30
 8003bba:	2b09      	cmp	r3, #9
 8003bbc:	d94b      	bls.n	8003c56 <_vfiprintf_r+0x1a2>
 8003bbe:	b1b0      	cbz	r0, 8003bee <_vfiprintf_r+0x13a>
 8003bc0:	9207      	str	r2, [sp, #28]
 8003bc2:	e014      	b.n	8003bee <_vfiprintf_r+0x13a>
 8003bc4:	eba0 0308 	sub.w	r3, r0, r8
 8003bc8:	fa09 f303 	lsl.w	r3, r9, r3
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	46a2      	mov	sl, r4
 8003bd0:	9304      	str	r3, [sp, #16]
 8003bd2:	e7d2      	b.n	8003b7a <_vfiprintf_r+0xc6>
 8003bd4:	9b03      	ldr	r3, [sp, #12]
 8003bd6:	1d19      	adds	r1, r3, #4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	9103      	str	r1, [sp, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bfbb      	ittet	lt
 8003be0:	425b      	neglt	r3, r3
 8003be2:	f042 0202 	orrlt.w	r2, r2, #2
 8003be6:	9307      	strge	r3, [sp, #28]
 8003be8:	9307      	strlt	r3, [sp, #28]
 8003bea:	bfb8      	it	lt
 8003bec:	9204      	strlt	r2, [sp, #16]
 8003bee:	7823      	ldrb	r3, [r4, #0]
 8003bf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bf2:	d10a      	bne.n	8003c0a <_vfiprintf_r+0x156>
 8003bf4:	7863      	ldrb	r3, [r4, #1]
 8003bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bf8:	d132      	bne.n	8003c60 <_vfiprintf_r+0x1ac>
 8003bfa:	9b03      	ldr	r3, [sp, #12]
 8003bfc:	3402      	adds	r4, #2
 8003bfe:	1d1a      	adds	r2, r3, #4
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	9203      	str	r2, [sp, #12]
 8003c04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c08:	9305      	str	r3, [sp, #20]
 8003c0a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003cd4 <_vfiprintf_r+0x220>
 8003c0e:	2203      	movs	r2, #3
 8003c10:	4650      	mov	r0, sl
 8003c12:	7821      	ldrb	r1, [r4, #0]
 8003c14:	f000 fb44 	bl	80042a0 <memchr>
 8003c18:	b138      	cbz	r0, 8003c2a <_vfiprintf_r+0x176>
 8003c1a:	2240      	movs	r2, #64	@ 0x40
 8003c1c:	9b04      	ldr	r3, [sp, #16]
 8003c1e:	eba0 000a 	sub.w	r0, r0, sl
 8003c22:	4082      	lsls	r2, r0
 8003c24:	4313      	orrs	r3, r2
 8003c26:	3401      	adds	r4, #1
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2e:	2206      	movs	r2, #6
 8003c30:	4829      	ldr	r0, [pc, #164]	@ (8003cd8 <_vfiprintf_r+0x224>)
 8003c32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c36:	f000 fb33 	bl	80042a0 <memchr>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d03f      	beq.n	8003cbe <_vfiprintf_r+0x20a>
 8003c3e:	4b27      	ldr	r3, [pc, #156]	@ (8003cdc <_vfiprintf_r+0x228>)
 8003c40:	bb1b      	cbnz	r3, 8003c8a <_vfiprintf_r+0x1d6>
 8003c42:	9b03      	ldr	r3, [sp, #12]
 8003c44:	3307      	adds	r3, #7
 8003c46:	f023 0307 	bic.w	r3, r3, #7
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	9303      	str	r3, [sp, #12]
 8003c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c50:	443b      	add	r3, r7
 8003c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c54:	e76a      	b.n	8003b2c <_vfiprintf_r+0x78>
 8003c56:	460c      	mov	r4, r1
 8003c58:	2001      	movs	r0, #1
 8003c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c5e:	e7a8      	b.n	8003bb2 <_vfiprintf_r+0xfe>
 8003c60:	2300      	movs	r3, #0
 8003c62:	f04f 0c0a 	mov.w	ip, #10
 8003c66:	4619      	mov	r1, r3
 8003c68:	3401      	adds	r4, #1
 8003c6a:	9305      	str	r3, [sp, #20]
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c72:	3a30      	subs	r2, #48	@ 0x30
 8003c74:	2a09      	cmp	r2, #9
 8003c76:	d903      	bls.n	8003c80 <_vfiprintf_r+0x1cc>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0c6      	beq.n	8003c0a <_vfiprintf_r+0x156>
 8003c7c:	9105      	str	r1, [sp, #20]
 8003c7e:	e7c4      	b.n	8003c0a <_vfiprintf_r+0x156>
 8003c80:	4604      	mov	r4, r0
 8003c82:	2301      	movs	r3, #1
 8003c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c88:	e7f0      	b.n	8003c6c <_vfiprintf_r+0x1b8>
 8003c8a:	ab03      	add	r3, sp, #12
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	462a      	mov	r2, r5
 8003c90:	4630      	mov	r0, r6
 8003c92:	4b13      	ldr	r3, [pc, #76]	@ (8003ce0 <_vfiprintf_r+0x22c>)
 8003c94:	a904      	add	r1, sp, #16
 8003c96:	f3af 8000 	nop.w
 8003c9a:	4607      	mov	r7, r0
 8003c9c:	1c78      	adds	r0, r7, #1
 8003c9e:	d1d6      	bne.n	8003c4e <_vfiprintf_r+0x19a>
 8003ca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ca2:	07d9      	lsls	r1, r3, #31
 8003ca4:	d405      	bmi.n	8003cb2 <_vfiprintf_r+0x1fe>
 8003ca6:	89ab      	ldrh	r3, [r5, #12]
 8003ca8:	059a      	lsls	r2, r3, #22
 8003caa:	d402      	bmi.n	8003cb2 <_vfiprintf_r+0x1fe>
 8003cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cae:	f7ff fde1 	bl	8003874 <__retarget_lock_release_recursive>
 8003cb2:	89ab      	ldrh	r3, [r5, #12]
 8003cb4:	065b      	lsls	r3, r3, #25
 8003cb6:	f53f af1f 	bmi.w	8003af8 <_vfiprintf_r+0x44>
 8003cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003cbc:	e71e      	b.n	8003afc <_vfiprintf_r+0x48>
 8003cbe:	ab03      	add	r3, sp, #12
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	462a      	mov	r2, r5
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <_vfiprintf_r+0x22c>)
 8003cc8:	a904      	add	r1, sp, #16
 8003cca:	f000 f87d 	bl	8003dc8 <_printf_i>
 8003cce:	e7e4      	b.n	8003c9a <_vfiprintf_r+0x1e6>
 8003cd0:	08004416 	.word	0x08004416
 8003cd4:	0800441c 	.word	0x0800441c
 8003cd8:	08004420 	.word	0x08004420
 8003cdc:	00000000 	.word	0x00000000
 8003ce0:	08003a8f 	.word	0x08003a8f

08003ce4 <_printf_common>:
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	4616      	mov	r6, r2
 8003cea:	4698      	mov	r8, r3
 8003cec:	688a      	ldr	r2, [r1, #8]
 8003cee:	690b      	ldr	r3, [r1, #16]
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	bfb8      	it	lt
 8003cf6:	4613      	movlt	r3, r2
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cfe:	460c      	mov	r4, r1
 8003d00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d04:	b10a      	cbz	r2, 8003d0a <_printf_common+0x26>
 8003d06:	3301      	adds	r3, #1
 8003d08:	6033      	str	r3, [r6, #0]
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	0699      	lsls	r1, r3, #26
 8003d0e:	bf42      	ittt	mi
 8003d10:	6833      	ldrmi	r3, [r6, #0]
 8003d12:	3302      	addmi	r3, #2
 8003d14:	6033      	strmi	r3, [r6, #0]
 8003d16:	6825      	ldr	r5, [r4, #0]
 8003d18:	f015 0506 	ands.w	r5, r5, #6
 8003d1c:	d106      	bne.n	8003d2c <_printf_common+0x48>
 8003d1e:	f104 0a19 	add.w	sl, r4, #25
 8003d22:	68e3      	ldr	r3, [r4, #12]
 8003d24:	6832      	ldr	r2, [r6, #0]
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	42ab      	cmp	r3, r5
 8003d2a:	dc2b      	bgt.n	8003d84 <_printf_common+0xa0>
 8003d2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d30:	6822      	ldr	r2, [r4, #0]
 8003d32:	3b00      	subs	r3, #0
 8003d34:	bf18      	it	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	0692      	lsls	r2, r2, #26
 8003d3a:	d430      	bmi.n	8003d9e <_printf_common+0xba>
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	4638      	mov	r0, r7
 8003d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d44:	47c8      	blx	r9
 8003d46:	3001      	adds	r0, #1
 8003d48:	d023      	beq.n	8003d92 <_printf_common+0xae>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	6922      	ldr	r2, [r4, #16]
 8003d4e:	f003 0306 	and.w	r3, r3, #6
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	bf14      	ite	ne
 8003d56:	2500      	movne	r5, #0
 8003d58:	6833      	ldreq	r3, [r6, #0]
 8003d5a:	f04f 0600 	mov.w	r6, #0
 8003d5e:	bf08      	it	eq
 8003d60:	68e5      	ldreq	r5, [r4, #12]
 8003d62:	f104 041a 	add.w	r4, r4, #26
 8003d66:	bf08      	it	eq
 8003d68:	1aed      	subeq	r5, r5, r3
 8003d6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d6e:	bf08      	it	eq
 8003d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d74:	4293      	cmp	r3, r2
 8003d76:	bfc4      	itt	gt
 8003d78:	1a9b      	subgt	r3, r3, r2
 8003d7a:	18ed      	addgt	r5, r5, r3
 8003d7c:	42b5      	cmp	r5, r6
 8003d7e:	d11a      	bne.n	8003db6 <_printf_common+0xd2>
 8003d80:	2000      	movs	r0, #0
 8003d82:	e008      	b.n	8003d96 <_printf_common+0xb2>
 8003d84:	2301      	movs	r3, #1
 8003d86:	4652      	mov	r2, sl
 8003d88:	4641      	mov	r1, r8
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	47c8      	blx	r9
 8003d8e:	3001      	adds	r0, #1
 8003d90:	d103      	bne.n	8003d9a <_printf_common+0xb6>
 8003d92:	f04f 30ff 	mov.w	r0, #4294967295
 8003d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9a:	3501      	adds	r5, #1
 8003d9c:	e7c1      	b.n	8003d22 <_printf_common+0x3e>
 8003d9e:	2030      	movs	r0, #48	@ 0x30
 8003da0:	18e1      	adds	r1, r4, r3
 8003da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003dac:	4422      	add	r2, r4
 8003dae:	3302      	adds	r3, #2
 8003db0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003db4:	e7c2      	b.n	8003d3c <_printf_common+0x58>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4622      	mov	r2, r4
 8003dba:	4641      	mov	r1, r8
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	47c8      	blx	r9
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d0e6      	beq.n	8003d92 <_printf_common+0xae>
 8003dc4:	3601      	adds	r6, #1
 8003dc6:	e7d9      	b.n	8003d7c <_printf_common+0x98>

08003dc8 <_printf_i>:
 8003dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	7e0f      	ldrb	r7, [r1, #24]
 8003dce:	4691      	mov	r9, r2
 8003dd0:	2f78      	cmp	r7, #120	@ 0x78
 8003dd2:	4680      	mov	r8, r0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	469a      	mov	sl, r3
 8003dd8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dde:	d807      	bhi.n	8003df0 <_printf_i+0x28>
 8003de0:	2f62      	cmp	r7, #98	@ 0x62
 8003de2:	d80a      	bhi.n	8003dfa <_printf_i+0x32>
 8003de4:	2f00      	cmp	r7, #0
 8003de6:	f000 80d3 	beq.w	8003f90 <_printf_i+0x1c8>
 8003dea:	2f58      	cmp	r7, #88	@ 0x58
 8003dec:	f000 80ba 	beq.w	8003f64 <_printf_i+0x19c>
 8003df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003df8:	e03a      	b.n	8003e70 <_printf_i+0xa8>
 8003dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dfe:	2b15      	cmp	r3, #21
 8003e00:	d8f6      	bhi.n	8003df0 <_printf_i+0x28>
 8003e02:	a101      	add	r1, pc, #4	@ (adr r1, 8003e08 <_printf_i+0x40>)
 8003e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e08:	08003e61 	.word	0x08003e61
 8003e0c:	08003e75 	.word	0x08003e75
 8003e10:	08003df1 	.word	0x08003df1
 8003e14:	08003df1 	.word	0x08003df1
 8003e18:	08003df1 	.word	0x08003df1
 8003e1c:	08003df1 	.word	0x08003df1
 8003e20:	08003e75 	.word	0x08003e75
 8003e24:	08003df1 	.word	0x08003df1
 8003e28:	08003df1 	.word	0x08003df1
 8003e2c:	08003df1 	.word	0x08003df1
 8003e30:	08003df1 	.word	0x08003df1
 8003e34:	08003f77 	.word	0x08003f77
 8003e38:	08003e9f 	.word	0x08003e9f
 8003e3c:	08003f31 	.word	0x08003f31
 8003e40:	08003df1 	.word	0x08003df1
 8003e44:	08003df1 	.word	0x08003df1
 8003e48:	08003f99 	.word	0x08003f99
 8003e4c:	08003df1 	.word	0x08003df1
 8003e50:	08003e9f 	.word	0x08003e9f
 8003e54:	08003df1 	.word	0x08003df1
 8003e58:	08003df1 	.word	0x08003df1
 8003e5c:	08003f39 	.word	0x08003f39
 8003e60:	6833      	ldr	r3, [r6, #0]
 8003e62:	1d1a      	adds	r2, r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6032      	str	r2, [r6, #0]
 8003e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e70:	2301      	movs	r3, #1
 8003e72:	e09e      	b.n	8003fb2 <_printf_i+0x1ea>
 8003e74:	6833      	ldr	r3, [r6, #0]
 8003e76:	6820      	ldr	r0, [r4, #0]
 8003e78:	1d19      	adds	r1, r3, #4
 8003e7a:	6031      	str	r1, [r6, #0]
 8003e7c:	0606      	lsls	r6, r0, #24
 8003e7e:	d501      	bpl.n	8003e84 <_printf_i+0xbc>
 8003e80:	681d      	ldr	r5, [r3, #0]
 8003e82:	e003      	b.n	8003e8c <_printf_i+0xc4>
 8003e84:	0645      	lsls	r5, r0, #25
 8003e86:	d5fb      	bpl.n	8003e80 <_printf_i+0xb8>
 8003e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e8c:	2d00      	cmp	r5, #0
 8003e8e:	da03      	bge.n	8003e98 <_printf_i+0xd0>
 8003e90:	232d      	movs	r3, #45	@ 0x2d
 8003e92:	426d      	negs	r5, r5
 8003e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e98:	230a      	movs	r3, #10
 8003e9a:	4859      	ldr	r0, [pc, #356]	@ (8004000 <_printf_i+0x238>)
 8003e9c:	e011      	b.n	8003ec2 <_printf_i+0xfa>
 8003e9e:	6821      	ldr	r1, [r4, #0]
 8003ea0:	6833      	ldr	r3, [r6, #0]
 8003ea2:	0608      	lsls	r0, r1, #24
 8003ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ea8:	d402      	bmi.n	8003eb0 <_printf_i+0xe8>
 8003eaa:	0649      	lsls	r1, r1, #25
 8003eac:	bf48      	it	mi
 8003eae:	b2ad      	uxthmi	r5, r5
 8003eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003eb2:	6033      	str	r3, [r6, #0]
 8003eb4:	bf14      	ite	ne
 8003eb6:	230a      	movne	r3, #10
 8003eb8:	2308      	moveq	r3, #8
 8003eba:	4851      	ldr	r0, [pc, #324]	@ (8004000 <_printf_i+0x238>)
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ec2:	6866      	ldr	r6, [r4, #4]
 8003ec4:	2e00      	cmp	r6, #0
 8003ec6:	bfa8      	it	ge
 8003ec8:	6821      	ldrge	r1, [r4, #0]
 8003eca:	60a6      	str	r6, [r4, #8]
 8003ecc:	bfa4      	itt	ge
 8003ece:	f021 0104 	bicge.w	r1, r1, #4
 8003ed2:	6021      	strge	r1, [r4, #0]
 8003ed4:	b90d      	cbnz	r5, 8003eda <_printf_i+0x112>
 8003ed6:	2e00      	cmp	r6, #0
 8003ed8:	d04b      	beq.n	8003f72 <_printf_i+0x1aa>
 8003eda:	4616      	mov	r6, r2
 8003edc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ee0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ee4:	5dc7      	ldrb	r7, [r0, r7]
 8003ee6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eea:	462f      	mov	r7, r5
 8003eec:	42bb      	cmp	r3, r7
 8003eee:	460d      	mov	r5, r1
 8003ef0:	d9f4      	bls.n	8003edc <_printf_i+0x114>
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d10b      	bne.n	8003f0e <_printf_i+0x146>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	07df      	lsls	r7, r3, #31
 8003efa:	d508      	bpl.n	8003f0e <_printf_i+0x146>
 8003efc:	6923      	ldr	r3, [r4, #16]
 8003efe:	6861      	ldr	r1, [r4, #4]
 8003f00:	4299      	cmp	r1, r3
 8003f02:	bfde      	ittt	le
 8003f04:	2330      	movle	r3, #48	@ 0x30
 8003f06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f0e:	1b92      	subs	r2, r2, r6
 8003f10:	6122      	str	r2, [r4, #16]
 8003f12:	464b      	mov	r3, r9
 8003f14:	4621      	mov	r1, r4
 8003f16:	4640      	mov	r0, r8
 8003f18:	f8cd a000 	str.w	sl, [sp]
 8003f1c:	aa03      	add	r2, sp, #12
 8003f1e:	f7ff fee1 	bl	8003ce4 <_printf_common>
 8003f22:	3001      	adds	r0, #1
 8003f24:	d14a      	bne.n	8003fbc <_printf_i+0x1f4>
 8003f26:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2a:	b004      	add	sp, #16
 8003f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	f043 0320 	orr.w	r3, r3, #32
 8003f36:	6023      	str	r3, [r4, #0]
 8003f38:	2778      	movs	r7, #120	@ 0x78
 8003f3a:	4832      	ldr	r0, [pc, #200]	@ (8004004 <_printf_i+0x23c>)
 8003f3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	6831      	ldr	r1, [r6, #0]
 8003f44:	061f      	lsls	r7, r3, #24
 8003f46:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f4a:	d402      	bmi.n	8003f52 <_printf_i+0x18a>
 8003f4c:	065f      	lsls	r7, r3, #25
 8003f4e:	bf48      	it	mi
 8003f50:	b2ad      	uxthmi	r5, r5
 8003f52:	6031      	str	r1, [r6, #0]
 8003f54:	07d9      	lsls	r1, r3, #31
 8003f56:	bf44      	itt	mi
 8003f58:	f043 0320 	orrmi.w	r3, r3, #32
 8003f5c:	6023      	strmi	r3, [r4, #0]
 8003f5e:	b11d      	cbz	r5, 8003f68 <_printf_i+0x1a0>
 8003f60:	2310      	movs	r3, #16
 8003f62:	e7ab      	b.n	8003ebc <_printf_i+0xf4>
 8003f64:	4826      	ldr	r0, [pc, #152]	@ (8004000 <_printf_i+0x238>)
 8003f66:	e7e9      	b.n	8003f3c <_printf_i+0x174>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	f023 0320 	bic.w	r3, r3, #32
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	e7f6      	b.n	8003f60 <_printf_i+0x198>
 8003f72:	4616      	mov	r6, r2
 8003f74:	e7bd      	b.n	8003ef2 <_printf_i+0x12a>
 8003f76:	6833      	ldr	r3, [r6, #0]
 8003f78:	6825      	ldr	r5, [r4, #0]
 8003f7a:	1d18      	adds	r0, r3, #4
 8003f7c:	6961      	ldr	r1, [r4, #20]
 8003f7e:	6030      	str	r0, [r6, #0]
 8003f80:	062e      	lsls	r6, r5, #24
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	d501      	bpl.n	8003f8a <_printf_i+0x1c2>
 8003f86:	6019      	str	r1, [r3, #0]
 8003f88:	e002      	b.n	8003f90 <_printf_i+0x1c8>
 8003f8a:	0668      	lsls	r0, r5, #25
 8003f8c:	d5fb      	bpl.n	8003f86 <_printf_i+0x1be>
 8003f8e:	8019      	strh	r1, [r3, #0]
 8003f90:	2300      	movs	r3, #0
 8003f92:	4616      	mov	r6, r2
 8003f94:	6123      	str	r3, [r4, #16]
 8003f96:	e7bc      	b.n	8003f12 <_printf_i+0x14a>
 8003f98:	6833      	ldr	r3, [r6, #0]
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	1d1a      	adds	r2, r3, #4
 8003f9e:	6032      	str	r2, [r6, #0]
 8003fa0:	681e      	ldr	r6, [r3, #0]
 8003fa2:	6862      	ldr	r2, [r4, #4]
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	f000 f97b 	bl	80042a0 <memchr>
 8003faa:	b108      	cbz	r0, 8003fb0 <_printf_i+0x1e8>
 8003fac:	1b80      	subs	r0, r0, r6
 8003fae:	6060      	str	r0, [r4, #4]
 8003fb0:	6863      	ldr	r3, [r4, #4]
 8003fb2:	6123      	str	r3, [r4, #16]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fba:	e7aa      	b.n	8003f12 <_printf_i+0x14a>
 8003fbc:	4632      	mov	r2, r6
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	4640      	mov	r0, r8
 8003fc2:	6923      	ldr	r3, [r4, #16]
 8003fc4:	47d0      	blx	sl
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d0ad      	beq.n	8003f26 <_printf_i+0x15e>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	079b      	lsls	r3, r3, #30
 8003fce:	d413      	bmi.n	8003ff8 <_printf_i+0x230>
 8003fd0:	68e0      	ldr	r0, [r4, #12]
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	4298      	cmp	r0, r3
 8003fd6:	bfb8      	it	lt
 8003fd8:	4618      	movlt	r0, r3
 8003fda:	e7a6      	b.n	8003f2a <_printf_i+0x162>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	4632      	mov	r2, r6
 8003fe0:	4649      	mov	r1, r9
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	47d0      	blx	sl
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d09d      	beq.n	8003f26 <_printf_i+0x15e>
 8003fea:	3501      	adds	r5, #1
 8003fec:	68e3      	ldr	r3, [r4, #12]
 8003fee:	9903      	ldr	r1, [sp, #12]
 8003ff0:	1a5b      	subs	r3, r3, r1
 8003ff2:	42ab      	cmp	r3, r5
 8003ff4:	dcf2      	bgt.n	8003fdc <_printf_i+0x214>
 8003ff6:	e7eb      	b.n	8003fd0 <_printf_i+0x208>
 8003ff8:	2500      	movs	r5, #0
 8003ffa:	f104 0619 	add.w	r6, r4, #25
 8003ffe:	e7f5      	b.n	8003fec <_printf_i+0x224>
 8004000:	08004427 	.word	0x08004427
 8004004:	08004438 	.word	0x08004438

08004008 <__sflush_r>:
 8004008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	0716      	lsls	r6, r2, #28
 8004010:	4605      	mov	r5, r0
 8004012:	460c      	mov	r4, r1
 8004014:	d454      	bmi.n	80040c0 <__sflush_r+0xb8>
 8004016:	684b      	ldr	r3, [r1, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	dc02      	bgt.n	8004022 <__sflush_r+0x1a>
 800401c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	dd48      	ble.n	80040b4 <__sflush_r+0xac>
 8004022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004024:	2e00      	cmp	r6, #0
 8004026:	d045      	beq.n	80040b4 <__sflush_r+0xac>
 8004028:	2300      	movs	r3, #0
 800402a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800402e:	682f      	ldr	r7, [r5, #0]
 8004030:	6a21      	ldr	r1, [r4, #32]
 8004032:	602b      	str	r3, [r5, #0]
 8004034:	d030      	beq.n	8004098 <__sflush_r+0x90>
 8004036:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	0759      	lsls	r1, r3, #29
 800403c:	d505      	bpl.n	800404a <__sflush_r+0x42>
 800403e:	6863      	ldr	r3, [r4, #4]
 8004040:	1ad2      	subs	r2, r2, r3
 8004042:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004044:	b10b      	cbz	r3, 800404a <__sflush_r+0x42>
 8004046:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004048:	1ad2      	subs	r2, r2, r3
 800404a:	2300      	movs	r3, #0
 800404c:	4628      	mov	r0, r5
 800404e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004050:	6a21      	ldr	r1, [r4, #32]
 8004052:	47b0      	blx	r6
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	d106      	bne.n	8004068 <__sflush_r+0x60>
 800405a:	6829      	ldr	r1, [r5, #0]
 800405c:	291d      	cmp	r1, #29
 800405e:	d82b      	bhi.n	80040b8 <__sflush_r+0xb0>
 8004060:	4a28      	ldr	r2, [pc, #160]	@ (8004104 <__sflush_r+0xfc>)
 8004062:	410a      	asrs	r2, r1
 8004064:	07d6      	lsls	r6, r2, #31
 8004066:	d427      	bmi.n	80040b8 <__sflush_r+0xb0>
 8004068:	2200      	movs	r2, #0
 800406a:	6062      	str	r2, [r4, #4]
 800406c:	6922      	ldr	r2, [r4, #16]
 800406e:	04d9      	lsls	r1, r3, #19
 8004070:	6022      	str	r2, [r4, #0]
 8004072:	d504      	bpl.n	800407e <__sflush_r+0x76>
 8004074:	1c42      	adds	r2, r0, #1
 8004076:	d101      	bne.n	800407c <__sflush_r+0x74>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	b903      	cbnz	r3, 800407e <__sflush_r+0x76>
 800407c:	6560      	str	r0, [r4, #84]	@ 0x54
 800407e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004080:	602f      	str	r7, [r5, #0]
 8004082:	b1b9      	cbz	r1, 80040b4 <__sflush_r+0xac>
 8004084:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004088:	4299      	cmp	r1, r3
 800408a:	d002      	beq.n	8004092 <__sflush_r+0x8a>
 800408c:	4628      	mov	r0, r5
 800408e:	f7ff fbf3 	bl	8003878 <_free_r>
 8004092:	2300      	movs	r3, #0
 8004094:	6363      	str	r3, [r4, #52]	@ 0x34
 8004096:	e00d      	b.n	80040b4 <__sflush_r+0xac>
 8004098:	2301      	movs	r3, #1
 800409a:	4628      	mov	r0, r5
 800409c:	47b0      	blx	r6
 800409e:	4602      	mov	r2, r0
 80040a0:	1c50      	adds	r0, r2, #1
 80040a2:	d1c9      	bne.n	8004038 <__sflush_r+0x30>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0c6      	beq.n	8004038 <__sflush_r+0x30>
 80040aa:	2b1d      	cmp	r3, #29
 80040ac:	d001      	beq.n	80040b2 <__sflush_r+0xaa>
 80040ae:	2b16      	cmp	r3, #22
 80040b0:	d11d      	bne.n	80040ee <__sflush_r+0xe6>
 80040b2:	602f      	str	r7, [r5, #0]
 80040b4:	2000      	movs	r0, #0
 80040b6:	e021      	b.n	80040fc <__sflush_r+0xf4>
 80040b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040bc:	b21b      	sxth	r3, r3
 80040be:	e01a      	b.n	80040f6 <__sflush_r+0xee>
 80040c0:	690f      	ldr	r7, [r1, #16]
 80040c2:	2f00      	cmp	r7, #0
 80040c4:	d0f6      	beq.n	80040b4 <__sflush_r+0xac>
 80040c6:	0793      	lsls	r3, r2, #30
 80040c8:	bf18      	it	ne
 80040ca:	2300      	movne	r3, #0
 80040cc:	680e      	ldr	r6, [r1, #0]
 80040ce:	bf08      	it	eq
 80040d0:	694b      	ldreq	r3, [r1, #20]
 80040d2:	1bf6      	subs	r6, r6, r7
 80040d4:	600f      	str	r7, [r1, #0]
 80040d6:	608b      	str	r3, [r1, #8]
 80040d8:	2e00      	cmp	r6, #0
 80040da:	ddeb      	ble.n	80040b4 <__sflush_r+0xac>
 80040dc:	4633      	mov	r3, r6
 80040de:	463a      	mov	r2, r7
 80040e0:	4628      	mov	r0, r5
 80040e2:	6a21      	ldr	r1, [r4, #32]
 80040e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80040e8:	47e0      	blx	ip
 80040ea:	2800      	cmp	r0, #0
 80040ec:	dc07      	bgt.n	80040fe <__sflush_r+0xf6>
 80040ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040fe:	4407      	add	r7, r0
 8004100:	1a36      	subs	r6, r6, r0
 8004102:	e7e9      	b.n	80040d8 <__sflush_r+0xd0>
 8004104:	dfbffffe 	.word	0xdfbffffe

08004108 <_fflush_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	690b      	ldr	r3, [r1, #16]
 800410c:	4605      	mov	r5, r0
 800410e:	460c      	mov	r4, r1
 8004110:	b913      	cbnz	r3, 8004118 <_fflush_r+0x10>
 8004112:	2500      	movs	r5, #0
 8004114:	4628      	mov	r0, r5
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	b118      	cbz	r0, 8004122 <_fflush_r+0x1a>
 800411a:	6a03      	ldr	r3, [r0, #32]
 800411c:	b90b      	cbnz	r3, 8004122 <_fflush_r+0x1a>
 800411e:	f7ff faa3 	bl	8003668 <__sinit>
 8004122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f3      	beq.n	8004112 <_fflush_r+0xa>
 800412a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800412c:	07d0      	lsls	r0, r2, #31
 800412e:	d404      	bmi.n	800413a <_fflush_r+0x32>
 8004130:	0599      	lsls	r1, r3, #22
 8004132:	d402      	bmi.n	800413a <_fflush_r+0x32>
 8004134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004136:	f7ff fb9c 	bl	8003872 <__retarget_lock_acquire_recursive>
 800413a:	4628      	mov	r0, r5
 800413c:	4621      	mov	r1, r4
 800413e:	f7ff ff63 	bl	8004008 <__sflush_r>
 8004142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004144:	4605      	mov	r5, r0
 8004146:	07da      	lsls	r2, r3, #31
 8004148:	d4e4      	bmi.n	8004114 <_fflush_r+0xc>
 800414a:	89a3      	ldrh	r3, [r4, #12]
 800414c:	059b      	lsls	r3, r3, #22
 800414e:	d4e1      	bmi.n	8004114 <_fflush_r+0xc>
 8004150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004152:	f7ff fb8f 	bl	8003874 <__retarget_lock_release_recursive>
 8004156:	e7dd      	b.n	8004114 <_fflush_r+0xc>

08004158 <__swbuf_r>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	460e      	mov	r6, r1
 800415c:	4614      	mov	r4, r2
 800415e:	4605      	mov	r5, r0
 8004160:	b118      	cbz	r0, 800416a <__swbuf_r+0x12>
 8004162:	6a03      	ldr	r3, [r0, #32]
 8004164:	b90b      	cbnz	r3, 800416a <__swbuf_r+0x12>
 8004166:	f7ff fa7f 	bl	8003668 <__sinit>
 800416a:	69a3      	ldr	r3, [r4, #24]
 800416c:	60a3      	str	r3, [r4, #8]
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	071a      	lsls	r2, r3, #28
 8004172:	d501      	bpl.n	8004178 <__swbuf_r+0x20>
 8004174:	6923      	ldr	r3, [r4, #16]
 8004176:	b943      	cbnz	r3, 800418a <__swbuf_r+0x32>
 8004178:	4621      	mov	r1, r4
 800417a:	4628      	mov	r0, r5
 800417c:	f000 f82a 	bl	80041d4 <__swsetup_r>
 8004180:	b118      	cbz	r0, 800418a <__swbuf_r+0x32>
 8004182:	f04f 37ff 	mov.w	r7, #4294967295
 8004186:	4638      	mov	r0, r7
 8004188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	6922      	ldr	r2, [r4, #16]
 800418e:	b2f6      	uxtb	r6, r6
 8004190:	1a98      	subs	r0, r3, r2
 8004192:	6963      	ldr	r3, [r4, #20]
 8004194:	4637      	mov	r7, r6
 8004196:	4283      	cmp	r3, r0
 8004198:	dc05      	bgt.n	80041a6 <__swbuf_r+0x4e>
 800419a:	4621      	mov	r1, r4
 800419c:	4628      	mov	r0, r5
 800419e:	f7ff ffb3 	bl	8004108 <_fflush_r>
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d1ed      	bne.n	8004182 <__swbuf_r+0x2a>
 80041a6:	68a3      	ldr	r3, [r4, #8]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	60a3      	str	r3, [r4, #8]
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	6022      	str	r2, [r4, #0]
 80041b2:	701e      	strb	r6, [r3, #0]
 80041b4:	6962      	ldr	r2, [r4, #20]
 80041b6:	1c43      	adds	r3, r0, #1
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d004      	beq.n	80041c6 <__swbuf_r+0x6e>
 80041bc:	89a3      	ldrh	r3, [r4, #12]
 80041be:	07db      	lsls	r3, r3, #31
 80041c0:	d5e1      	bpl.n	8004186 <__swbuf_r+0x2e>
 80041c2:	2e0a      	cmp	r6, #10
 80041c4:	d1df      	bne.n	8004186 <__swbuf_r+0x2e>
 80041c6:	4621      	mov	r1, r4
 80041c8:	4628      	mov	r0, r5
 80041ca:	f7ff ff9d 	bl	8004108 <_fflush_r>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d0d9      	beq.n	8004186 <__swbuf_r+0x2e>
 80041d2:	e7d6      	b.n	8004182 <__swbuf_r+0x2a>

080041d4 <__swsetup_r>:
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	4b29      	ldr	r3, [pc, #164]	@ (800427c <__swsetup_r+0xa8>)
 80041d8:	4605      	mov	r5, r0
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	460c      	mov	r4, r1
 80041de:	b118      	cbz	r0, 80041e8 <__swsetup_r+0x14>
 80041e0:	6a03      	ldr	r3, [r0, #32]
 80041e2:	b90b      	cbnz	r3, 80041e8 <__swsetup_r+0x14>
 80041e4:	f7ff fa40 	bl	8003668 <__sinit>
 80041e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ec:	0719      	lsls	r1, r3, #28
 80041ee:	d422      	bmi.n	8004236 <__swsetup_r+0x62>
 80041f0:	06da      	lsls	r2, r3, #27
 80041f2:	d407      	bmi.n	8004204 <__swsetup_r+0x30>
 80041f4:	2209      	movs	r2, #9
 80041f6:	602a      	str	r2, [r5, #0]
 80041f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	e033      	b.n	800426c <__swsetup_r+0x98>
 8004204:	0758      	lsls	r0, r3, #29
 8004206:	d512      	bpl.n	800422e <__swsetup_r+0x5a>
 8004208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800420a:	b141      	cbz	r1, 800421e <__swsetup_r+0x4a>
 800420c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004210:	4299      	cmp	r1, r3
 8004212:	d002      	beq.n	800421a <__swsetup_r+0x46>
 8004214:	4628      	mov	r0, r5
 8004216:	f7ff fb2f 	bl	8003878 <_free_r>
 800421a:	2300      	movs	r3, #0
 800421c:	6363      	str	r3, [r4, #52]	@ 0x34
 800421e:	89a3      	ldrh	r3, [r4, #12]
 8004220:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004224:	81a3      	strh	r3, [r4, #12]
 8004226:	2300      	movs	r3, #0
 8004228:	6063      	str	r3, [r4, #4]
 800422a:	6923      	ldr	r3, [r4, #16]
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	f043 0308 	orr.w	r3, r3, #8
 8004234:	81a3      	strh	r3, [r4, #12]
 8004236:	6923      	ldr	r3, [r4, #16]
 8004238:	b94b      	cbnz	r3, 800424e <__swsetup_r+0x7a>
 800423a:	89a3      	ldrh	r3, [r4, #12]
 800423c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004244:	d003      	beq.n	800424e <__swsetup_r+0x7a>
 8004246:	4621      	mov	r1, r4
 8004248:	4628      	mov	r0, r5
 800424a:	f000 f85c 	bl	8004306 <__smakebuf_r>
 800424e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004252:	f013 0201 	ands.w	r2, r3, #1
 8004256:	d00a      	beq.n	800426e <__swsetup_r+0x9a>
 8004258:	2200      	movs	r2, #0
 800425a:	60a2      	str	r2, [r4, #8]
 800425c:	6962      	ldr	r2, [r4, #20]
 800425e:	4252      	negs	r2, r2
 8004260:	61a2      	str	r2, [r4, #24]
 8004262:	6922      	ldr	r2, [r4, #16]
 8004264:	b942      	cbnz	r2, 8004278 <__swsetup_r+0xa4>
 8004266:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800426a:	d1c5      	bne.n	80041f8 <__swsetup_r+0x24>
 800426c:	bd38      	pop	{r3, r4, r5, pc}
 800426e:	0799      	lsls	r1, r3, #30
 8004270:	bf58      	it	pl
 8004272:	6962      	ldrpl	r2, [r4, #20]
 8004274:	60a2      	str	r2, [r4, #8]
 8004276:	e7f4      	b.n	8004262 <__swsetup_r+0x8e>
 8004278:	2000      	movs	r0, #0
 800427a:	e7f7      	b.n	800426c <__swsetup_r+0x98>
 800427c:	20000020 	.word	0x20000020

08004280 <_sbrk_r>:
 8004280:	b538      	push	{r3, r4, r5, lr}
 8004282:	2300      	movs	r3, #0
 8004284:	4d05      	ldr	r5, [pc, #20]	@ (800429c <_sbrk_r+0x1c>)
 8004286:	4604      	mov	r4, r0
 8004288:	4608      	mov	r0, r1
 800428a:	602b      	str	r3, [r5, #0]
 800428c:	f7fc fc2c 	bl	8000ae8 <_sbrk>
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	d102      	bne.n	800429a <_sbrk_r+0x1a>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	b103      	cbz	r3, 800429a <_sbrk_r+0x1a>
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	20000290 	.word	0x20000290

080042a0 <memchr>:
 80042a0:	4603      	mov	r3, r0
 80042a2:	b510      	push	{r4, lr}
 80042a4:	b2c9      	uxtb	r1, r1
 80042a6:	4402      	add	r2, r0
 80042a8:	4293      	cmp	r3, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	d101      	bne.n	80042b2 <memchr+0x12>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e003      	b.n	80042ba <memchr+0x1a>
 80042b2:	7804      	ldrb	r4, [r0, #0]
 80042b4:	3301      	adds	r3, #1
 80042b6:	428c      	cmp	r4, r1
 80042b8:	d1f6      	bne.n	80042a8 <memchr+0x8>
 80042ba:	bd10      	pop	{r4, pc}

080042bc <__swhatbuf_r>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	460c      	mov	r4, r1
 80042c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c4:	4615      	mov	r5, r2
 80042c6:	2900      	cmp	r1, #0
 80042c8:	461e      	mov	r6, r3
 80042ca:	b096      	sub	sp, #88	@ 0x58
 80042cc:	da0c      	bge.n	80042e8 <__swhatbuf_r+0x2c>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	2100      	movs	r1, #0
 80042d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80042d6:	bf14      	ite	ne
 80042d8:	2340      	movne	r3, #64	@ 0x40
 80042da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80042de:	2000      	movs	r0, #0
 80042e0:	6031      	str	r1, [r6, #0]
 80042e2:	602b      	str	r3, [r5, #0]
 80042e4:	b016      	add	sp, #88	@ 0x58
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	466a      	mov	r2, sp
 80042ea:	f000 f849 	bl	8004380 <_fstat_r>
 80042ee:	2800      	cmp	r0, #0
 80042f0:	dbed      	blt.n	80042ce <__swhatbuf_r+0x12>
 80042f2:	9901      	ldr	r1, [sp, #4]
 80042f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80042f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80042fc:	4259      	negs	r1, r3
 80042fe:	4159      	adcs	r1, r3
 8004300:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004304:	e7eb      	b.n	80042de <__swhatbuf_r+0x22>

08004306 <__smakebuf_r>:
 8004306:	898b      	ldrh	r3, [r1, #12]
 8004308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800430a:	079d      	lsls	r5, r3, #30
 800430c:	4606      	mov	r6, r0
 800430e:	460c      	mov	r4, r1
 8004310:	d507      	bpl.n	8004322 <__smakebuf_r+0x1c>
 8004312:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004316:	6023      	str	r3, [r4, #0]
 8004318:	6123      	str	r3, [r4, #16]
 800431a:	2301      	movs	r3, #1
 800431c:	6163      	str	r3, [r4, #20]
 800431e:	b003      	add	sp, #12
 8004320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004322:	466a      	mov	r2, sp
 8004324:	ab01      	add	r3, sp, #4
 8004326:	f7ff ffc9 	bl	80042bc <__swhatbuf_r>
 800432a:	9f00      	ldr	r7, [sp, #0]
 800432c:	4605      	mov	r5, r0
 800432e:	4639      	mov	r1, r7
 8004330:	4630      	mov	r0, r6
 8004332:	f7ff fb0b 	bl	800394c <_malloc_r>
 8004336:	b948      	cbnz	r0, 800434c <__smakebuf_r+0x46>
 8004338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800433c:	059a      	lsls	r2, r3, #22
 800433e:	d4ee      	bmi.n	800431e <__smakebuf_r+0x18>
 8004340:	f023 0303 	bic.w	r3, r3, #3
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	81a3      	strh	r3, [r4, #12]
 800434a:	e7e2      	b.n	8004312 <__smakebuf_r+0xc>
 800434c:	89a3      	ldrh	r3, [r4, #12]
 800434e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004356:	81a3      	strh	r3, [r4, #12]
 8004358:	9b01      	ldr	r3, [sp, #4]
 800435a:	6020      	str	r0, [r4, #0]
 800435c:	b15b      	cbz	r3, 8004376 <__smakebuf_r+0x70>
 800435e:	4630      	mov	r0, r6
 8004360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004364:	f000 f81e 	bl	80043a4 <_isatty_r>
 8004368:	b128      	cbz	r0, 8004376 <__smakebuf_r+0x70>
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	f023 0303 	bic.w	r3, r3, #3
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	89a3      	ldrh	r3, [r4, #12]
 8004378:	431d      	orrs	r5, r3
 800437a:	81a5      	strh	r5, [r4, #12]
 800437c:	e7cf      	b.n	800431e <__smakebuf_r+0x18>
	...

08004380 <_fstat_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	2300      	movs	r3, #0
 8004384:	4d06      	ldr	r5, [pc, #24]	@ (80043a0 <_fstat_r+0x20>)
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	602b      	str	r3, [r5, #0]
 800438e:	f7fc fb85 	bl	8000a9c <_fstat>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	d102      	bne.n	800439c <_fstat_r+0x1c>
 8004396:	682b      	ldr	r3, [r5, #0]
 8004398:	b103      	cbz	r3, 800439c <_fstat_r+0x1c>
 800439a:	6023      	str	r3, [r4, #0]
 800439c:	bd38      	pop	{r3, r4, r5, pc}
 800439e:	bf00      	nop
 80043a0:	20000290 	.word	0x20000290

080043a4 <_isatty_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	2300      	movs	r3, #0
 80043a8:	4d05      	ldr	r5, [pc, #20]	@ (80043c0 <_isatty_r+0x1c>)
 80043aa:	4604      	mov	r4, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	f7fc fb83 	bl	8000aba <_isatty>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_isatty_r+0x1a>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_isatty_r+0x1a>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	20000290 	.word	0x20000290

080043c4 <_init>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr

080043d0 <_fini>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr
