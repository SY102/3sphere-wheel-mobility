
1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005120  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800522c  0800522c  0000622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005344  08005344  00007070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005344  08005344  00007070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005344  08005344  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005344  08005344  00006344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005348  08005348  00006348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800534c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000070  080053bc  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080053bc  00007310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddd0  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d1a  00000000  00000000  00014e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00017b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a16  00000000  00000000  000188e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b52  00000000  00000000  000192f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010894  00000000  00000000  00032e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b771  00000000  00000000  000436dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cee4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb8  00000000  00000000  000cee90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d2a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005214 	.word	0x08005214

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005214 	.word	0x08005214

0800014c <nrf24_get_status>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;

uint8_t nrf24_get_status(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    return nrf24_r_reg(STATUS, 1);  // ★ 'STATUS' 사용 (NRF_STATUS 아님)
 8000150:	2101      	movs	r1, #1
 8000152:	2007      	movs	r0, #7
 8000154:	f000 f85c 	bl	8000210 <nrf24_r_reg>
 8000158:	4603      	mov	r3, r0
}
 800015a:	4618      	mov	r0, r3
 800015c:	bd80      	pop	{r7, pc}
	...

08000160 <csn_high>:

void csn_high(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	2101      	movs	r1, #1
 8000168:	4802      	ldr	r0, [pc, #8]	@ (8000174 <csn_high+0x14>)
 800016a:	f002 fbb5 	bl	80028d8 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 시작 표시
	   // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
	}
 800016e:	bf00      	nop
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40010800 	.word	0x40010800

08000178 <csn_low>:



void csn_low(void){
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_RESET);
 800017c:	2200      	movs	r2, #0
 800017e:	2101      	movs	r1, #1
 8000180:	4802      	ldr	r0, [pc, #8]	@ (800018c <csn_low+0x14>)
 8000182:	f002 fba9 	bl	80028d8 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 종료 표시
	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800

08000190 <ce_high>:

void ce_high(void){
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_SET);
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800019a:	4802      	ldr	r0, [pc, #8]	@ (80001a4 <ce_high+0x14>)
 800019c:	f002 fb9c 	bl	80028d8 <HAL_GPIO_WritePin>
}
 80001a0:	bf00      	nop
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40010800 	.word	0x40010800

080001a8 <ce_low>:

void ce_low(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001b2:	4802      	ldr	r0, [pc, #8]	@ (80001bc <ce_low+0x14>)
 80001b4:	f002 fb90 	bl	80028d8 <HAL_GPIO_WritePin>
}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40010800 	.word	0x40010800

080001c0 <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	6039      	str	r1, [r7, #0]
 80001ca:	71fb      	strb	r3, [r7, #7]
 80001cc:	4613      	mov	r3, r2
 80001ce:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80001da:	f7ff ffcd 	bl	8000178 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80001de:	f107 010f 	add.w	r1, r7, #15
 80001e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e6:	2201      	movs	r2, #1
 80001e8:	4808      	ldr	r0, [pc, #32]	@ (800020c <nrf24_w_reg+0x4c>)
 80001ea:	f003 f9a5 	bl	8003538 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	b29a      	uxth	r2, r3
 80001f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001f6:	6839      	ldr	r1, [r7, #0]
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <nrf24_w_reg+0x4c>)
 80001fa:	f003 f99d 	bl	8003538 <HAL_SPI_Transmit>

	csn_high();
 80001fe:	f7ff ffaf 	bl	8000160 <csn_high>
}
 8000202:	bf00      	nop
 8000204:	3710      	adds	r7, #16
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	2000011c 	.word	0x2000011c

08000210 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	460a      	mov	r2, r1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	4613      	mov	r3, r2
 800021e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000228:	f7ff ffa6 	bl	8000178 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800022c:	f107 010f 	add.w	r1, r7, #15
 8000230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000234:	2201      	movs	r2, #1
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <nrf24_r_reg+0x4c>)
 8000238:	f003 f97e 	bl	8003538 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	b29a      	uxth	r2, r3
 8000240:	f107 010e 	add.w	r1, r7, #14
 8000244:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000248:	4804      	ldr	r0, [pc, #16]	@ (800025c <nrf24_r_reg+0x4c>)
 800024a:	f003 fab9 	bl	80037c0 <HAL_SPI_Receive>

	csn_high();
 800024e:	f7ff ff87 	bl	8000160 <csn_high>

	return data;
 8000252:	7bbb      	ldrb	r3, [r7, #14]
}
 8000254:	4618      	mov	r0, r3
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000011c 	.word	0x2000011c

08000260 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800026a:	1df9      	adds	r1, r7, #7
 800026c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000270:	2201      	movs	r2, #1
 8000272:	4803      	ldr	r0, [pc, #12]	@ (8000280 <nrf24_w_spec_cmd+0x20>)
 8000274:	f003 f960 	bl	8003538 <HAL_SPI_Transmit>
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	2000011c 	.word	0x2000011c

08000284 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800028e:	2101      	movs	r1, #1
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ffbd 	bl	8000210 <nrf24_r_reg>
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f043 0302 	orr.w	r3, r3, #2
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	2201      	movs	r2, #1
 80002a8:	4619      	mov	r1, r3
 80002aa:	2000      	movs	r0, #0
 80002ac:	f7ff ff88 	bl	80001c0 <nrf24_w_reg>
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <nrf24_pwr_dwn>:

void nrf24_pwr_dwn(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80002c2:	2101      	movs	r1, #1
 80002c4:	2000      	movs	r0, #0
 80002c6:	f7ff ffa3 	bl	8000210 <nrf24_r_reg>
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PWR_UP);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f023 0302 	bic.w	r3, r3, #2
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	2201      	movs	r2, #1
 80002dc:	4619      	mov	r1, r3
 80002de:	2000      	movs	r0, #0
 80002e0:	f7ff ff6e 	bl	80001c0 <nrf24_w_reg>
}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <nrf24_tx_pwr>:

void nrf24_tx_pwr(uint8_t pwr){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80002fa:	2101      	movs	r1, #1
 80002fc:	2006      	movs	r0, #6
 80002fe:	f7ff ff87 	bl	8000210 <nrf24_r_reg>
 8000302:	4603      	mov	r3, r0
 8000304:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 8000306:	7bfb      	ldrb	r3, [r7, #15]
 8000308:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 800030c:	b2db      	uxtb	r3, r3
 800030e:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 8000310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	b25a      	sxtb	r2, r3
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	b25b      	sxtb	r3, r3
 800031c:	4313      	orrs	r3, r2
 800031e:	b25b      	sxtb	r3, r3
 8000320:	b2db      	uxtb	r3, r3
 8000322:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000324:	f107 030f 	add.w	r3, r7, #15
 8000328:	2201      	movs	r2, #1
 800032a:	4619      	mov	r1, r3
 800032c:	2006      	movs	r0, #6
 800032e:	f7ff ff47 	bl	80001c0 <nrf24_w_reg>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 800033a:	b580      	push	{r7, lr}
 800033c:	b084      	sub	sp, #16
 800033e:	af00      	add	r7, sp, #0
 8000340:	4603      	mov	r3, r0
 8000342:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000348:	2101      	movs	r1, #1
 800034a:	2006      	movs	r0, #6
 800034c:	f7ff ff60 	bl	8000210 <nrf24_r_reg>
 8000350:	4603      	mov	r3, r0
 8000352:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8000354:	7bfb      	ldrb	r3, [r7, #15]
 8000356:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800035a:	b2db      	uxtb	r3, r3
 800035c:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d105      	bne.n	8000370 <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	b2db      	uxtb	r3, r3
 800036c:	73fb      	strb	r3, [r7, #15]
 800036e:	e007      	b.n	8000380 <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d104      	bne.n	8000380 <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	f043 0320 	orr.w	r3, r3, #32
 800037c:	b2db      	uxtb	r3, r3
 800037e:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000380:	f107 030f 	add.w	r3, r7, #15
 8000384:	2201      	movs	r2, #1
 8000386:	4619      	mov	r1, r3
 8000388:	2006      	movs	r0, #6
 800038a:	f7ff ff19 	bl	80001c0 <nrf24_w_reg>
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000396:	b580      	push	{r7, lr}
 8000398:	b082      	sub	sp, #8
 800039a:	af00      	add	r7, sp, #0
 800039c:	4603      	mov	r3, r0
 800039e:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	2201      	movs	r2, #1
 80003a4:	4619      	mov	r1, r3
 80003a6:	2005      	movs	r0, #5
 80003a8:	f7ff ff0a 	bl	80001c0 <nrf24_w_reg>
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 80003bc:	2205      	movs	r2, #5
 80003be:	6879      	ldr	r1, [r7, #4]
 80003c0:	2010      	movs	r0, #16
 80003c2:	f7ff fefd 	bl	80001c0 <nrf24_w_reg>
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	460a      	mov	r2, r1
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	4613      	mov	r3, r2
 80003de:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 80003e0:	79bb      	ldrb	r3, [r7, #6]
 80003e2:	2b20      	cmp	r3, #32
 80003e4:	d901      	bls.n	80003ea <nrf24_pipe_pld_size+0x1a>
		size = 32;
 80003e6:	2320      	movs	r3, #32
 80003e8:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	2b05      	cmp	r3, #5
 80003ee:	d839      	bhi.n	8000464 <nrf24_pipe_pld_size+0x94>
 80003f0:	a201      	add	r2, pc, #4	@ (adr r2, 80003f8 <nrf24_pipe_pld_size+0x28>)
 80003f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f6:	bf00      	nop
 80003f8:	08000411 	.word	0x08000411
 80003fc:	0800041f 	.word	0x0800041f
 8000400:	0800042d 	.word	0x0800042d
 8000404:	0800043b 	.word	0x0800043b
 8000408:	08000449 	.word	0x08000449
 800040c:	08000457 	.word	0x08000457
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8000410:	1dbb      	adds	r3, r7, #6
 8000412:	2201      	movs	r2, #1
 8000414:	4619      	mov	r1, r3
 8000416:	2011      	movs	r0, #17
 8000418:	f7ff fed2 	bl	80001c0 <nrf24_w_reg>

		break;
 800041c:	e022      	b.n	8000464 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800041e:	1dbb      	adds	r3, r7, #6
 8000420:	2201      	movs	r2, #1
 8000422:	4619      	mov	r1, r3
 8000424:	2012      	movs	r0, #18
 8000426:	f7ff fecb 	bl	80001c0 <nrf24_w_reg>

		break;
 800042a:	e01b      	b.n	8000464 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 800042c:	1dbb      	adds	r3, r7, #6
 800042e:	2201      	movs	r2, #1
 8000430:	4619      	mov	r1, r3
 8000432:	2013      	movs	r0, #19
 8000434:	f7ff fec4 	bl	80001c0 <nrf24_w_reg>

		break;
 8000438:	e014      	b.n	8000464 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	2201      	movs	r2, #1
 800043e:	4619      	mov	r1, r3
 8000440:	2014      	movs	r0, #20
 8000442:	f7ff febd 	bl	80001c0 <nrf24_w_reg>

		break;
 8000446:	e00d      	b.n	8000464 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000448:	1dbb      	adds	r3, r7, #6
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	2015      	movs	r0, #21
 8000450:	f7ff feb6 	bl	80001c0 <nrf24_w_reg>

		break;
 8000454:	e006      	b.n	8000464 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000456:	1dbb      	adds	r3, r7, #6
 8000458:	2201      	movs	r2, #1
 800045a:	4619      	mov	r1, r3
 800045c:	2016      	movs	r0, #22
 800045e:	f7ff feaf 	bl	80001c0 <nrf24_w_reg>

		break;
 8000462:	bf00      	nop
	}
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <nrf24_cls_rx_pipe>:
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_cls_rx_pipe(uint8_t pipe){
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(EN_RXADDR, 1);
 8000476:	2101      	movs	r1, #1
 8000478:	2002      	movs	r0, #2
 800047a:	f7ff fec9 	bl	8000210 <nrf24_r_reg>
 800047e:	4603      	mov	r3, r0
 8000480:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << pipe);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	2201      	movs	r2, #1
 8000486:	fa02 f303 	lsl.w	r3, r2, r3
 800048a:	b25b      	sxtb	r3, r3
 800048c:	43db      	mvns	r3, r3
 800048e:	b25a      	sxtb	r2, r3
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	b25b      	sxtb	r3, r3
 8000494:	4013      	ands	r3, r2
 8000496:	b25b      	sxtb	r3, r3
 8000498:	b2db      	uxtb	r3, r3
 800049a:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(EN_RXADDR, &data, 1);
 800049c:	f107 030f 	add.w	r3, r7, #15
 80004a0:	2201      	movs	r2, #1
 80004a2:	4619      	mov	r1, r3
 80004a4:	2002      	movs	r0, #2
 80004a6:	f7ff fe8b 	bl	80001c0 <nrf24_w_reg>
}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <nrf24_set_crc>:

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b084      	sub	sp, #16
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	4603      	mov	r3, r0
 80004ba:	460a      	mov	r2, r1
 80004bc:	71fb      	strb	r3, [r7, #7]
 80004be:	4613      	mov	r3, r2
 80004c0:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 80004c2:	2101      	movs	r1, #1
 80004c4:	2000      	movs	r0, #0
 80004c6:	f7ff fea3 	bl	8000210 <nrf24_r_reg>
 80004ca:	4603      	mov	r3, r0
 80004cc:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
 80004d0:	f023 030c 	bic.w	r3, r3, #12
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 80004d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004dc:	00db      	lsls	r3, r3, #3
 80004de:	b25a      	sxtb	r2, r3
 80004e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	4313      	orrs	r3, r2
 80004ea:	b25a      	sxtb	r2, r3
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	b25b      	sxtb	r3, r3
 80004f0:	4313      	orrs	r3, r2
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 80004f8:	f107 030f 	add.w	r3, r7, #15
 80004fc:	2201      	movs	r2, #1
 80004fe:	4619      	mov	r1, r3
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff fe5d 	bl	80001c0 <nrf24_w_reg>
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	4603      	mov	r3, r0
 8000516:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	3b02      	subs	r3, #2
 800051c:	b2db      	uxtb	r3, r3
 800051e:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	2201      	movs	r2, #1
 8000524:	4619      	mov	r1, r3
 8000526:	2003      	movs	r0, #3
 8000528:	f7ff fe4a 	bl	80001c0 <nrf24_w_reg>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	csn_low();
 8000538:	f7ff fe1e 	bl	8000178 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 800053c:	20e1      	movs	r0, #225	@ 0xe1
 800053e:	f7ff fe8f 	bl	8000260 <nrf24_w_spec_cmd>
	csn_high();
 8000542:	f7ff fe0d 	bl	8000160 <csn_high>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}

0800054a <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
	csn_low();
 800054e:	f7ff fe13 	bl	8000178 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 8000552:	20e2      	movs	r0, #226	@ 0xe2
 8000554:	f7ff fe84 	bl	8000260 <nrf24_w_spec_cmd>
	csn_high();
 8000558:	f7ff fe02 	bl	8000160 <csn_high>
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 800056a:	23ff      	movs	r3, #255	@ 0xff
 800056c:	71bb      	strb	r3, [r7, #6]

	csn_low();
 800056e:	f7ff fe03 	bl	8000178 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 8000572:	1dfa      	adds	r2, r7, #7
 8000574:	1db9      	adds	r1, r7, #6
 8000576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2301      	movs	r3, #1
 800057e:	4805      	ldr	r0, [pc, #20]	@ (8000594 <nrf24_r_status+0x34>)
 8000580:	f003 fa37 	bl	80039f2 <HAL_SPI_TransmitReceive>
	csn_high();
 8000584:	f7ff fdec 	bl	8000160 <csn_high>

	return data;
 8000588:	79fb      	ldrb	r3, [r7, #7]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000011c 	.word	0x2000011c

08000598 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005a2:	f7ff ffdd 	bl	8000560 <nrf24_r_status>
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	2201      	movs	r2, #1
 80005b8:	4619      	mov	r1, r3
 80005ba:	2007      	movs	r0, #7
 80005bc:	f7ff fe00 	bl	80001c0 <nrf24_w_reg>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005d2:	f7ff ffc5 	bl	8000560 <nrf24_r_status>
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f043 0320 	orr.w	r3, r3, #32
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80005e4:	1dfb      	adds	r3, r7, #7
 80005e6:	2201      	movs	r2, #1
 80005e8:	4619      	mov	r1, r3
 80005ea:	2007      	movs	r0, #7
 80005ec:	f7ff fde8 	bl	80001c0 <nrf24_w_reg>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8000602:	f7ff ffad 	bl	8000560 <nrf24_r_status>
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	b2db      	uxtb	r3, r3
 8000612:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000614:	1dfb      	adds	r3, r7, #7
 8000616:	2201      	movs	r2, #1
 8000618:	4619      	mov	r1, r3
 800061a:	2007      	movs	r0, #7
 800061c:	f7ff fdd0 	bl	80001c0 <nrf24_w_reg>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000632:	2101      	movs	r1, #1
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff fdeb 	bl	8000210 <nrf24_r_reg>
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	f023 0301 	bic.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	2201      	movs	r2, #1
 800064c:	4619      	mov	r1, r3
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff fdb6 	bl	80001c0 <nrf24_w_reg>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000666:	2101      	movs	r1, #1
 8000668:	201d      	movs	r0, #29
 800066a:	f7ff fdd1 	bl	8000210 <nrf24_r_reg>
 800066e:	4603      	mov	r3, r0
 8000670:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d105      	bne.n	8000684 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	b2db      	uxtb	r3, r3
 8000680:	73fb      	strb	r3, [r7, #15]
 8000682:	e004      	b.n	800068e <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	f023 0304 	bic.w	r3, r3, #4
 800068a:	b2db      	uxtb	r3, r3
 800068c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800068e:	f107 030f 	add.w	r3, r7, #15
 8000692:	2201      	movs	r2, #1
 8000694:	4619      	mov	r1, r3
 8000696:	201d      	movs	r0, #29
 8000698:	f7ff fd92 	bl	80001c0 <nrf24_w_reg>
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <nrf24_set_rx_dpl>:

void nrf24_set_rx_dpl(uint8_t pipe, uint8_t en){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]

	uint8_t dynpd = nrf24_r_reg(DYNPD, 1);
 80006b4:	2101      	movs	r1, #1
 80006b6:	201c      	movs	r0, #28
 80006b8:	f7ff fdaa 	bl	8000210 <nrf24_r_reg>
 80006bc:	4603      	mov	r3, r0
 80006be:	73fb      	strb	r3, [r7, #15]

	if(pipe > 5){
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	2b05      	cmp	r3, #5
 80006c4:	d901      	bls.n	80006ca <nrf24_set_rx_dpl+0x26>
		pipe = 5;
 80006c6:	2305      	movs	r3, #5
 80006c8:	71fb      	strb	r3, [r7, #7]
	}

	if(en){
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00b      	beq.n	80006e8 <nrf24_set_rx_dpl+0x44>
		dynpd |= (1 << pipe);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2201      	movs	r2, #1
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	b25a      	sxtb	r2, r3
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	4313      	orrs	r3, r2
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	e00c      	b.n	8000702 <nrf24_set_rx_dpl+0x5e>
	}else{
		dynpd &= ~(1 << pipe);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2201      	movs	r2, #1
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	43db      	mvns	r3, r3
 80006f4:	b25a      	sxtb	r2, r3
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	4013      	ands	r3, r2
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
 8000702:	f107 030f 	add.w	r3, r7, #15
 8000706:	2201      	movs	r2, #1
 8000708:	4619      	mov	r1, r3
 800070a:	201c      	movs	r0, #28
 800070c:	f7ff fd58 	bl	80001c0 <nrf24_w_reg>
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <nrf24_auto_ack>:

void nrf24_auto_ack(uint8_t pipe, uint8_t ack){
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]

	if(pipe > 5){
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b05      	cmp	r3, #5
 800072c:	d901      	bls.n	8000732 <nrf24_auto_ack+0x1a>
		pipe = 5;
 800072e:	2305      	movs	r3, #5
 8000730:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000732:	2101      	movs	r1, #1
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff fd6b 	bl	8000210 <nrf24_r_reg>
 800073a:	4603      	mov	r3, r0
 800073c:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00b      	beq.n	800075c <nrf24_auto_ack+0x44>
		enaa |= (1 << pipe);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2201      	movs	r2, #1
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	b25a      	sxtb	r2, r3
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	b25b      	sxtb	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b25b      	sxtb	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e00c      	b.n	8000776 <nrf24_auto_ack+0x5e>
	}else{
		enaa &= ~(1 << pipe);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2201      	movs	r2, #1
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	b25b      	sxtb	r3, r3
 8000766:	43db      	mvns	r3, r3
 8000768:	b25a      	sxtb	r2, r3
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4013      	ands	r3, r2
 8000770:	b25b      	sxtb	r3, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000776:	f107 030f 	add.w	r3, r7, #15
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fd1e 	bl	80001c0 <nrf24_w_reg>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <nrf24_auto_ack_all>:

void nrf24_auto_ack_all(uint8_t ack){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000796:	2101      	movs	r1, #1
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff fd39 	bl	8000210 <nrf24_r_reg>
 800079e:	4603      	mov	r3, r0
 80007a0:	73fb      	strb	r3, [r7, #15]

	if(ack){
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <nrf24_auto_ack_all+0x22>
		enaa = 63;
 80007a8:	233f      	movs	r3, #63	@ 0x3f
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e001      	b.n	80007b2 <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 80007b2:	f107 030f 	add.w	r3, r7, #15
 80007b6:	2201      	movs	r2, #1
 80007b8:	4619      	mov	r1, r3
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fd00 	bl	80001c0 <nrf24_w_reg>
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80007d2:	2101      	movs	r1, #1
 80007d4:	201d      	movs	r0, #29
 80007d6:	f7ff fd1b 	bl	8000210 <nrf24_r_reg>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]

	if(en){
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d005      	beq.n	80007f0 <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	e004      	b.n	80007fa <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	f023 0302 	bic.w	r3, r3, #2
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80007fa:	f107 030f 	add.w	r3, r7, #15
 80007fe:	2201      	movs	r2, #1
 8000800:	4619      	mov	r1, r3
 8000802:	201d      	movs	r0, #29
 8000804:	f7ff fcdc 	bl	80001c0 <nrf24_w_reg>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 800081a:	2101      	movs	r1, #1
 800081c:	201d      	movs	r0, #29
 800081e:	f7ff fcf7 	bl	8000210 <nrf24_r_reg>
 8000822:	4603      	mov	r3, r0
 8000824:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d005      	beq.n	8000838 <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	e004      	b.n	8000842 <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	f023 0301 	bic.w	r3, r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8000842:	f107 030f 	add.w	r3, r7, #15
 8000846:	2201      	movs	r2, #1
 8000848:	4619      	mov	r1, r3
 800084a:	201d      	movs	r0, #29
 800084c:	f7ff fcb8 	bl	80001c0 <nrf24_w_reg>
}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <nrf24_auto_retr_delay>:

void nrf24_auto_retr_delay(uint8_t delay){
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8000862:	2101      	movs	r1, #1
 8000864:	2004      	movs	r0, #4
 8000866:	f7ff fcd3 	bl	8000210 <nrf24_r_reg>
 800086a:	4603      	mov	r3, r0
 800086c:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	f003 030f 	and.w	r3, r3, #15
 8000874:	b2db      	uxtb	r3, r3
 8000876:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	b25a      	sxtb	r2, r3
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	b25b      	sxtb	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	b25b      	sxtb	r3, r3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 800088c:	f107 030f 	add.w	r3, r7, #15
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	2004      	movs	r0, #4
 8000896:	f7ff fc93 	bl	80001c0 <nrf24_w_reg>
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b084      	sub	sp, #16
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 80008ac:	2101      	movs	r1, #1
 80008ae:	2004      	movs	r0, #4
 80008b0:	f7ff fcae 	bl	8000210 <nrf24_r_reg>
 80008b4:	4603      	mov	r3, r0
 80008b6:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	f023 030f 	bic.w	r3, r3, #15
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 80008c2:	7bfa      	ldrb	r2, [r7, #15]
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80008cc:	f107 030f 	add.w	r3, r7, #15
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	2004      	movs	r0, #4
 80008d6:	f7ff fc73 	bl	80001c0 <nrf24_w_reg>
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]

	ce_low();
 80008f0:	f7ff fc5a 	bl	80001a8 <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 80008f4:	23a0      	movs	r3, #160	@ 0xa0
 80008f6:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80008f8:	f7ff fc3e 	bl	8000178 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80008fc:	f107 010f 	add.w	r1, r7, #15
 8000900:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000904:	2201      	movs	r2, #1
 8000906:	4813      	ldr	r0, [pc, #76]	@ (8000954 <nrf24_transmit+0x70>)
 8000908:	f002 fe16 	bl	8003538 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	b29a      	uxth	r2, r3
 8000910:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	480f      	ldr	r0, [pc, #60]	@ (8000954 <nrf24_transmit+0x70>)
 8000918:	f002 fe0e 	bl	8003538 <HAL_SPI_Transmit>
	csn_high();
 800091c:	f7ff fc20 	bl	8000160 <csn_high>

	ce_high();
 8000920:	f7ff fc36 	bl	8000190 <ce_high>
	HAL_Delay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f000 fdf1 	bl	800150c <HAL_Delay>
	ce_low();
 800092a:	f7ff fc3d 	bl	80001a8 <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 800092e:	f7ff fe17 	bl	8000560 <nrf24_r_status>
 8000932:	4603      	mov	r3, r0
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	2b00      	cmp	r3, #0
 800093a:	d005      	beq.n	8000948 <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 800093c:	f7ff fe5c 	bl	80005f8 <nrf24_clear_max_rt>
		nrf24_flush_tx();
 8000940:	f7ff fdf8 	bl	8000534 <nrf24_flush_tx>
		return 1;
 8000944:	2301      	movs	r3, #1
 8000946:	e000      	b.n	800094a <nrf24_transmit+0x66>
	}

	return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000011c 	.word	0x2000011c

08000958 <nrf24_defaults>:
	csn_high();

	nrf24_clear_rx_dr();
}

void nrf24_defaults(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	ce_low();
 800095e:	f7ff fc23 	bl	80001a8 <ce_low>

	nrf24_pwr_dwn();
 8000962:	f7ff fca9 	bl	80002b8 <nrf24_pwr_dwn>
	nrf24_tx_pwr(3);
 8000966:	2003      	movs	r0, #3
 8000968:	f7ff fcc0 	bl	80002ec <nrf24_tx_pwr>
	nrf24_data_rate(_1mbps);
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff fce4 	bl	800033a <nrf24_data_rate>
	nrf24_set_channel(2);
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff fd0f 	bl	8000396 <nrf24_set_channel>
	nrf24_set_crc(no_crc, _1byte);
 8000978:	2100      	movs	r1, #0
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fd99 	bl	80004b2 <nrf24_set_crc>
	nrf24_set_addr_width(5);
 8000980:	2005      	movs	r0, #5
 8000982:	f7ff fdc4 	bl	800050e <nrf24_set_addr_width>
	nrf24_flush_tx();
 8000986:	f7ff fdd5 	bl	8000534 <nrf24_flush_tx>
	nrf24_flush_rx();
 800098a:	f7ff fdde 	bl	800054a <nrf24_flush_rx>
	nrf24_clear_rx_dr();
 800098e:	f7ff fe03 	bl	8000598 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8000992:	f7ff fe19 	bl	80005c8 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000996:	f7ff fe2f 	bl	80005f8 <nrf24_clear_max_rt>
	nrf24_stop_listen();
 800099a:	f7ff fe45 	bl	8000628 <nrf24_stop_listen>
	nrf24_dpl(disable);
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff fe5c 	bl	800065c <nrf24_dpl>
	nrf24_en_ack_pld(disable);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff ff0f 	bl	80007c8 <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff ff30 	bl	8000810 <nrf24_en_dyn_ack>
	nrf24_auto_retr_delay(0);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff ff51 	bl	8000858 <nrf24_auto_retr_delay>
	nrf24_auto_retr_limit(3);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f7ff ff73 	bl	80008a2 <nrf24_auto_retr_limit>


	for(uint8_t i = 0; i < 5; i++){
 80009bc:	2300      	movs	r3, #0
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	e015      	b.n	80009ee <nrf24_defaults+0x96>
		nrf24_pipe_pld_size(i, 0);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fd02 	bl	80003d0 <nrf24_pipe_pld_size>
		nrf24_cls_rx_pipe(i);
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fd4c 	bl	800046c <nrf24_cls_rx_pipe>
		nrf24_set_rx_dpl(i, disable);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fe63 	bl	80006a4 <nrf24_set_rx_dpl>
		nrf24_auto_ack(i, enable);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2101      	movs	r1, #1
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fe98 	bl	8000718 <nrf24_auto_ack>
	for(uint8_t i = 0; i < 5; i++){
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	3301      	adds	r3, #1
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d9e6      	bls.n	80009c2 <nrf24_defaults+0x6a>
	}

	ce_high();
 80009f4:	f7ff fbcc 	bl	8000190 <ce_high>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <nrf24_init>:

void nrf24_init(void){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 8000a04:	f7ff fc3e 	bl	8000284 <nrf24_pwr_up>

	nrf24_flush_tx();
 8000a08:	f7ff fd94 	bl	8000534 <nrf24_flush_tx>
	nrf24_flush_rx();
 8000a0c:	f7ff fd9d 	bl	800054a <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 8000a10:	f7ff fdc2 	bl	8000598 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8000a14:	f7ff fdd8 	bl	80005c8 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000a18:	f7ff fdee 	bl	80005f8 <nrf24_clear_max_rt>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;
/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a30:	4b27      	ldr	r3, [pc, #156]	@ (8000ad0 <MX_ADC1_Init+0xb0>)
 8000a32:	4a28      	ldr	r2, [pc, #160]	@ (8000ad4 <MX_ADC1_Init+0xb4>)
 8000a34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a36:	4b26      	ldr	r3, [pc, #152]	@ (8000ad0 <MX_ADC1_Init+0xb0>)
 8000a38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a3e:	4b24      	ldr	r3, [pc, #144]	@ (8000ad0 <MX_ADC1_Init+0xb0>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a44:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <MX_ADC1_Init+0xb0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <MX_ADC1_Init+0xb0>)
 8000a4c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <MX_ADC1_Init+0xb0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_ADC1_Init+0xb0>)
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a5e:	481c      	ldr	r0, [pc, #112]	@ (8000ad0 <MX_ADC1_Init+0xb0>)
 8000a60:	f000 fd78 	bl	8001554 <HAL_ADC_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000a6a:	f000 fa2f 	bl	8000ecc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a6e:	230a      	movs	r3, #10
 8000a70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a76:	2307      	movs	r3, #7
 8000a78:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4814      	ldr	r0, [pc, #80]	@ (8000ad0 <MX_ADC1_Init+0xb0>)
 8000a80:	f000 fff8 	bl	8001a74 <HAL_ADC_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a8a:	f000 fa1f 	bl	8000ecc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a8e:	230b      	movs	r3, #11
 8000a90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480d      	ldr	r0, [pc, #52]	@ (8000ad0 <MX_ADC1_Init+0xb0>)
 8000a9c:	f000 ffea 	bl	8001a74 <HAL_ADC_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000aa6:	f000 fa11 	bl	8000ecc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000aaa:	230c      	movs	r3, #12
 8000aac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <MX_ADC1_Init+0xb0>)
 8000ab8:	f000 ffdc 	bl	8001a74 <HAL_ADC_ConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ac2:	f000 fa03 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000008c 	.word	0x2000008c
 8000ad4:	40012400 	.word	0x40012400

08000ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <MX_DMA_Init+0x38>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b10 <MX_DMA_Init+0x38>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <MX_DMA_Init+0x38>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	200b      	movs	r0, #11
 8000afc:	f001 fb43 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b00:	200b      	movs	r0, #11
 8000b02:	f001 fb5c 	bl	80021be <HAL_NVIC_EnableIRQ>

}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b28:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <MX_GPIO_Init+0xb8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a27      	ldr	r2, [pc, #156]	@ (8000bcc <MX_GPIO_Init+0xb8>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <MX_GPIO_Init+0xb8>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0310 	and.w	r3, r3, #16
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <MX_GPIO_Init+0xb8>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a21      	ldr	r2, [pc, #132]	@ (8000bcc <MX_GPIO_Init+0xb8>)
 8000b46:	f043 0320 	orr.w	r3, r3, #32
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <MX_GPIO_Init+0xb8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0320 	and.w	r3, r3, #32
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <MX_GPIO_Init+0xb8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bcc <MX_GPIO_Init+0xb8>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <MX_GPIO_Init+0xb8>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin_Pin|CE_Pin_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f240 1101 	movw	r1, #257	@ 0x101
 8000b76:	4816      	ldr	r0, [pc, #88]	@ (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b78:	f001 feae 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin_Pin CE_Pin_Pin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin|CE_Pin_Pin;
 8000b7c:	f240 1301 	movw	r3, #257	@ 0x101
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4619      	mov	r1, r3
 8000b94:	480e      	ldr	r0, [pc, #56]	@ (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b96:	f001 fd1b 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <MX_GPIO_Init+0xc0>)
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4619      	mov	r1, r3
 8000bac:	4808      	ldr	r0, [pc, #32]	@ (8000bd0 <MX_GPIO_Init+0xbc>)
 8000bae:	f001 fd0f 	bl	80025d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f001 fae5 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000bbc:	200a      	movs	r0, #10
 8000bbe:	f001 fafe 	bl	80021be <HAL_NVIC_EnableIRQ>

}
 8000bc2:	bf00      	nop
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	10210000 	.word	0x10210000

08000bd8 <nrf24_set_payload_size>:
 * Receive data
 */
void nrf24_receive(uint8_t *data, uint8_t size);

static inline void nrf24_set_payload_size(uint8_t size)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
    nrf24_pipe_pld_size(0, size);   // 파이프 0만 사용
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4619      	mov	r1, r3
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fbf2 	bl	80003d0 <nrf24_pipe_pld_size>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <nrf24_transmitter_setup>:
extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart2;

void nrf24_transmitter_setup(void)

{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
nrf24_defaults();
 8000bfa:	f7ff fead 	bl	8000958 <nrf24_defaults>
nrf24_pwr_up();
 8000bfe:	f7ff fb41 	bl	8000284 <nrf24_pwr_up>
nrf24_flush_tx();
 8000c02:	f7ff fc97 	bl	8000534 <nrf24_flush_tx>
nrf24_flush_rx();
 8000c06:	f7ff fca0 	bl	800054a <nrf24_flush_rx>
nrf24_clear_rx_dr();
 8000c0a:	f7ff fcc5 	bl	8000598 <nrf24_clear_rx_dr>
nrf24_clear_tx_ds();
 8000c0e:	f7ff fcdb 	bl	80005c8 <nrf24_clear_tx_ds>
nrf24_clear_max_rt();
 8000c12:	f7ff fcf1 	bl	80005f8 <nrf24_clear_max_rt>
nrf24_stop_listen();                        //수신모드 비활성화 하여 송신 전용 모드로 전환
 8000c16:	f7ff fd07 	bl	8000628 <nrf24_stop_listen>
nrf24_set_channel(40);                      //무선 채널 40번으로 설정
 8000c1a:	2028      	movs	r0, #40	@ 0x28
 8000c1c:	f7ff fbbb 	bl	8000396 <nrf24_set_channel>
nrf24_auto_ack_all(disable);                //자동 ack기능 off=>단순 송신만 수행
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fdb3 	bl	800078c <nrf24_auto_ack_all>
nrf24_set_payload_size(6);                  //한번에 전송할 페이로드 크기 최대 32바이트
 8000c26:	2006      	movs	r0, #6
 8000c28:	f7ff ffd6 	bl	8000bd8 <nrf24_set_payload_size>
nrf24_tx_pwr(3);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f7ff fb5d 	bl	80002ec <nrf24_tx_pwr>
nrf24_data_rate(_1mbps);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff fb81 	bl	800033a <nrf24_data_rate>
nrf24_open_tx_pipe(tx_address);             //파이프 0에 tx_address를 열어 송신 대상 지정
 8000c38:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <nrf24_transmitter_setup+0x78>)
 8000c3a:	f7ff fbbb 	bl	80003b4 <nrf24_open_tx_pipe>
nrf24_pwr_up();                             //모듈 power up=>송신 준비 완료
 8000c3e:	f7ff fb21 	bl	8000284 <nrf24_pwr_up>

    uint8_t cfg = nrf24_r_reg(CONFIG, 1);
 8000c42:	2101      	movs	r1, #1
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff fae3 	bl	8000210 <nrf24_r_reg>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
    cfg &= ~((1<<5)|(1<<4));                // MASK_TX_DS=5, MASK_MAX_RT=4 -> 0
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	71fb      	strb	r3, [r7, #7]
    nrf24_w_reg(CONFIG, &cfg, 1);
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff faae 	bl	80001c0 <nrf24_w_reg>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000

08000c70 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_4) {     // IRQ 핀(예: PA4)과 일치시켜야 함
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	d102      	bne.n	8000c86 <HAL_GPIO_EXTI_Callback+0x16>
        nrf_irq_flag = 1;
 8000c80:	4b03      	ldr	r3, [pc, #12]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0x20>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
    }
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	20000113 	.word	0x20000113

08000c94 <nrf24_irq_service>:

static void nrf24_irq_service(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	uint8_t st = nrf24_get_status();
 8000c9a:	f7ff fa57 	bl	800014c <nrf24_get_status>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]

	    if (st & (1<<TX_DS)) {            // 전송 성공
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 0320 	and.w	r3, r3, #32
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d009      	beq.n	8000cc0 <nrf24_irq_service+0x2c>
	        nrf24_clear_tx_ds();
 8000cac:	f7ff fc8c 	bl	80005c8 <nrf24_clear_tx_ds>
	        nrf_tx_ok++;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <nrf24_irq_service+0x58>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <nrf24_irq_service+0x58>)
 8000cb8:	6013      	str	r3, [r2, #0]
	        nrf_busy = 0; // 이제 안 바쁨
 8000cba:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <nrf24_irq_service+0x5c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
	    }
	    if (st & (1<<MAX_RT)) {           // 재전송 한계 → 실패
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00b      	beq.n	8000ce2 <nrf24_irq_service+0x4e>
	        nrf24_clear_max_rt();
 8000cca:	f7ff fc95 	bl	80005f8 <nrf24_clear_max_rt>
	        nrf24_flush_tx();
 8000cce:	f7ff fc31 	bl	8000534 <nrf24_flush_tx>
	        nrf_tx_fail++;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <nrf24_irq_service+0x60>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a06      	ldr	r2, [pc, #24]	@ (8000cf4 <nrf24_irq_service+0x60>)
 8000cda:	6013      	str	r3, [r2, #0]
	        nrf_busy = 0; // 이제 안 바쁨
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <nrf24_irq_service+0x5c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
    }
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000114 	.word	0x20000114
 8000cf0:	20000112 	.word	0x20000112
 8000cf4:	20000118 	.word	0x20000118

08000cf8 <__io_putchar>:
printf("======================\r\n");
}


int __io_putchar(int ch)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000d00:	1d39      	adds	r1, r7, #4
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	2201      	movs	r2, #1
 8000d08:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <__io_putchar+0x20>)
 8000d0a:	f003 f976 	bl	8003ffa <HAL_UART_Transmit>
return ch;
 8000d0e:	687b      	ldr	r3, [r7, #4]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000178 	.word	0x20000178

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d20:	f000 fb92 	bl	8001448 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d24:	f000 f858 	bl	8000dd8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d28:	f7ff fef4 	bl	8000b14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d2c:	f7ff fed4 	bl	8000ad8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d30:	f000 f8d2 	bl	8000ed8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d34:	f000 faee 	bl	8001314 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d38:	f7ff fe72 	bl	8000a20 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


HAL_ADCEx_Calibration_Start(&hadc1);
 8000d3c:	481f      	ldr	r0, [pc, #124]	@ (8000dbc <main+0xa0>)
 8000d3e:	f001 f893 	bl	8001e68 <HAL_ADCEx_Calibration_Start>
HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 3);
 8000d42:	2203      	movs	r2, #3
 8000d44:	491e      	ldr	r1, [pc, #120]	@ (8000dc0 <main+0xa4>)
 8000d46:	481d      	ldr	r0, [pc, #116]	@ (8000dbc <main+0xa0>)
 8000d48:	f000 fcdc 	bl	8001704 <HAL_ADC_Start_DMA>

nrf24_init();
 8000d4c:	f7ff fe58 	bl	8000a00 <nrf24_init>
nrf24_transmitter_setup();
 8000d50:	f7ff ff50 	bl	8000bf4 <nrf24_transmitter_setup>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (nrf_irq_flag) {
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <main+0xa8>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d004      	beq.n	8000d68 <main+0x4c>
	        nrf_irq_flag = 0;                          // 플래그를 내리고,
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <main+0xa8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
	        nrf24_irq_service();                       // 실제 인터럽트 처리 작업을 수행합니다.
 8000d64:	f7ff ff96 	bl	8000c94 <nrf24_irq_service>
	    }

	         // 2. ADC 데이터가 준비되었고, NRF가 현재 송신 중이 아닐 때만 새 전송을 시작합니다.
	 if (adc_data_ready_flag && !nrf_busy) {
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <main+0xac>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <main+0x38>
 8000d72:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <main+0xb0>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1eb      	bne.n	8000d54 <main+0x38>
	        adc_data_ready_flag = 0;                    // ADC 플래그는 사용했으니 내립니다.
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <main+0xac>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
	        nrf_busy = 1;                               // NRF가 이제부터 바빠질 것이라고 표시합니다.
 8000d82:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <main+0xb0>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]

	         // payload에 최신 ADC 값을 복사합니다.
	        memcpy(payload, (uint8_t*)adc_values, 6);
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <main+0xb4>)
 8000d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <main+0xa4>)
 8000d8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d90:	6018      	str	r0, [r3, #0]
 8000d92:	3304      	adds	r3, #4
 8000d94:	8019      	strh	r1, [r3, #0]

	         // NRF로 전송을 '시작'만 합니다. (결과는 인터럽트가 알려줄 것입니다)
	        nrf24_transmit(payload, 6);
 8000d96:	2106      	movs	r1, #6
 8000d98:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <main+0xb4>)
 8000d9a:	f7ff fda3 	bl	80008e4 <nrf24_transmit>

	         // (선택사항) 전송 시작을 터미널에 표시
	        printf("TX Start -> X:%u Y:%u Z:%u\r\n",
	               adc_values[0], adc_values[1], adc_values[2]);
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <main+0xa4>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
	        printf("TX Start -> X:%u Y:%u Z:%u\r\n",
 8000da4:	4619      	mov	r1, r3
	               adc_values[0], adc_values[1], adc_values[2]);
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <main+0xa4>)
 8000da8:	885b      	ldrh	r3, [r3, #2]
 8000daa:	b29b      	uxth	r3, r3
	        printf("TX Start -> X:%u Y:%u Z:%u\r\n",
 8000dac:	461a      	mov	r2, r3
	               adc_values[0], adc_values[1], adc_values[2]);
 8000dae:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <main+0xa4>)
 8000db0:	889b      	ldrh	r3, [r3, #4]
 8000db2:	b29b      	uxth	r3, r3
	        printf("TX Start -> X:%u Y:%u Z:%u\r\n",
 8000db4:	4807      	ldr	r0, [pc, #28]	@ (8000dd4 <main+0xb8>)
 8000db6:	f003 fbb7 	bl	8004528 <iprintf>
	if (nrf_irq_flag) {
 8000dba:	e7cb      	b.n	8000d54 <main+0x38>
 8000dbc:	2000008c 	.word	0x2000008c
 8000dc0:	20000100 	.word	0x20000100
 8000dc4:	20000113 	.word	0x20000113
 8000dc8:	20000106 	.word	0x20000106
 8000dcc:	20000112 	.word	0x20000112
 8000dd0:	2000010c 	.word	0x2000010c
 8000dd4:	080052b0 	.word	0x080052b0

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	@ 0x50
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000de2:	2228      	movs	r2, #40	@ 0x28
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f003 fc88 	bl	80046fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e0c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e16:	2301      	movs	r3, #1
 8000e18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e24:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fd82 	bl	8002938 <HAL_RCC_OscConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e3a:	f000 f847 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	230f      	movs	r3, #15
 8000e40:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e4e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 ffee 	bl	8002e3c <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e66:	f000 f831 	bl	8000ecc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e72:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 f96e 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e82:	f000 f823 	bl	8000ecc <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3750      	adds	r7, #80	@ 0x50
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
if (hadc->Instance != ADC1) return;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a08      	ldr	r2, [pc, #32]	@ (8000ec0 <HAL_ADC_ConvCpltCallback+0x30>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d108      	bne.n	8000eb4 <HAL_ADC_ConvCpltCallback+0x24>
adc_cb_cnt++; // (선택) 콜백 진입 확인
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0x34>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4a06      	ldr	r2, [pc, #24]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0x34>)
 8000eaa:	6013      	str	r3, [r2, #0]
adc_data_ready_flag = 1; // 메인에서 출력/전송
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_ADC_ConvCpltCallback+0x38>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e000      	b.n	8000eb6 <HAL_ADC_ConvCpltCallback+0x26>
if (hadc->Instance != ADC1) return;
 8000eb4:	bf00      	nop
}
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40012400 	.word	0x40012400
 8000ec4:	20000108 	.word	0x20000108
 8000ec8:	20000106 	.word	0x20000106

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop

__disable_irq();



while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <Error_Handler+0x8>

08000ed8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000edc:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000ede:	4a18      	ldr	r2, [pc, #96]	@ (8000f40 <MX_SPI1_Init+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000ee4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f0c:	2218      	movs	r2, #24
 8000f0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f24:	220a      	movs	r2, #10
 8000f26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f2a:	f002 fa81 	bl	8003430 <HAL_SPI_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f34:	f7ff ffca 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000011c 	.word	0x2000011c
 8000f40:	40013000 	.word	0x40013000

08000f44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <HAL_SPI_MspInit+0x88>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d12f      	bne.n	8000fc4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <HAL_SPI_MspInit+0x8c>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a19      	ldr	r2, [pc, #100]	@ (8000fd0 <HAL_SPI_MspInit+0x8c>)
 8000f6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <HAL_SPI_MspInit+0x8c>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <HAL_SPI_MspInit+0x8c>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a13      	ldr	r2, [pc, #76]	@ (8000fd0 <HAL_SPI_MspInit+0x8c>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <HAL_SPI_MspInit+0x8c>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f94:	23a0      	movs	r3, #160	@ 0xa0
 8000f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480b      	ldr	r0, [pc, #44]	@ (8000fd4 <HAL_SPI_MspInit+0x90>)
 8000fa8:	f001 fb12 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fac:	2340      	movs	r3, #64	@ 0x40
 8000fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <HAL_SPI_MspInit+0x90>)
 8000fc0:	f001 fb06 	bl	80025d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40013000 	.word	0x40013000
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010800 	.word	0x40010800

08000fd8 <HAL_ADC_MspInit>:

/* USER CODE END ExternalFunctions */

/* USER CODE BEGIN 0 */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a36      	ldr	r2, [pc, #216]	@ (80010c0 <HAL_ADC_MspInit+0xe8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d165      	bne.n	80010b6 <HAL_ADC_MspInit+0xde>
  {
    /* 클럭 enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fea:	4b36      	ldr	r3, [pc, #216]	@ (80010c4 <HAL_ADC_MspInit+0xec>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4a35      	ldr	r2, [pc, #212]	@ (80010c4 <HAL_ADC_MspInit+0xec>)
 8000ff0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ff4:	6193      	str	r3, [r2, #24]
 8000ff6:	4b33      	ldr	r3, [pc, #204]	@ (80010c4 <HAL_ADC_MspInit+0xec>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b30      	ldr	r3, [pc, #192]	@ (80010c4 <HAL_ADC_MspInit+0xec>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	4a2f      	ldr	r2, [pc, #188]	@ (80010c4 <HAL_ADC_MspInit+0xec>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6193      	str	r3, [r2, #24]
 800100e:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <HAL_ADC_MspInit+0xec>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <HAL_ADC_MspInit+0xec>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4a29      	ldr	r2, [pc, #164]	@ (80010c4 <HAL_ADC_MspInit+0xec>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6153      	str	r3, [r2, #20]
 8001026:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <HAL_ADC_MspInit+0xec>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

    /* PC0~PC2 (ADC123_IN10~12) 핀을 Analog로 설정 */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0318 	add.w	r3, r7, #24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin  = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8001040:	2307      	movs	r3, #7
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001044:	2303      	movs	r3, #3
 8001046:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001048:	f107 0318 	add.w	r3, r7, #24
 800104c:	4619      	mov	r1, r3
 800104e:	481e      	ldr	r0, [pc, #120]	@ (80010c8 <HAL_ADC_MspInit+0xf0>)
 8001050:	f001 fabe 	bl	80025d0 <HAL_GPIO_Init>

    /* DMA1 Channel1 설정 */
    hdma_adc1.Instance                 = DMA1_Channel1;
 8001054:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <HAL_ADC_MspInit+0xf4>)
 8001056:	4a1e      	ldr	r2, [pc, #120]	@ (80010d0 <HAL_ADC_MspInit+0xf8>)
 8001058:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <HAL_ADC_MspInit+0xf4>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001060:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <HAL_ADC_MspInit+0xf4>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc              = DMA_MINC_ENABLE;
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_ADC_MspInit+0xf4>)
 8001068:	2280      	movs	r2, #128	@ 0x80
 800106a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800106c:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <HAL_ADC_MspInit+0xf4>)
 800106e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001072:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_ADC_MspInit+0xf4>)
 8001076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800107c:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <HAL_ADC_MspInit+0xf4>)
 800107e:	2220      	movs	r2, #32
 8001080:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority            = DMA_PRIORITY_MEDIUM;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_ADC_MspInit+0xf4>)
 8001084:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001088:	61da      	str	r2, [r3, #28]



    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800108a:	4810      	ldr	r0, [pc, #64]	@ (80010cc <HAL_ADC_MspInit+0xf4>)
 800108c:	f001 f8b2 	bl	80021f4 <HAL_DMA_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001096:	f7ff ff19 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <HAL_ADC_MspInit+0xf4>)
 800109e:	621a      	str	r2, [r3, #32]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <HAL_ADC_MspInit+0xf4>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* DMA1 Channel1 IRQ 설정 (이미 MX_DMA_Init에서 했다면 중복 가능) */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	200b      	movs	r0, #11
 80010ac:	f001 f86b 	bl	8002186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b0:	200b      	movs	r0, #11
 80010b2:	f001 f884 	bl	80021be <HAL_NVIC_EnableIRQ>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	@ 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40012400 	.word	0x40012400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40011000 	.word	0x40011000
 80010cc:	200000bc 	.word	0x200000bc
 80010d0:	40020008 	.word	0x40020008

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_MspInit+0x5c>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	4a14      	ldr	r2, [pc, #80]	@ (8001130 <HAL_MspInit+0x5c>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6193      	str	r3, [r2, #24]
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_MspInit+0x5c>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <HAL_MspInit+0x5c>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001130 <HAL_MspInit+0x5c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <HAL_MspInit+0x5c>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_MspInit+0x60>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <HAL_MspInit+0x60>)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000
 8001134:	40010000 	.word	0x40010000

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <NMI_Handler+0x4>

08001140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <MemManage_Handler+0x4>

08001150 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <UsageFault_Handler+0x4>

08001160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f000 f9a4 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001194:	2010      	movs	r0, #16
 8001196:	f001 fbb7 	bl	8002908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <DMA1_Channel1_IRQHandler+0x10>)
 80011a6:	f001 f8df 	bl	8002368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000bc 	.word	0x200000bc

080011b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <ADC1_2_IRQHandler+0x10>)
 80011ba:	f000 fb81 	bl	80018c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000008c 	.word	0x2000008c

080011c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	e00a      	b.n	80011f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011da:	f3af 8000 	nop.w
 80011de:	4601      	mov	r1, r0
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	b2ca      	uxtb	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbf0      	blt.n	80011da <_read+0x12>
  }

  return len;
 80011f8:	687b      	ldr	r3, [r7, #4]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e009      	b.n	8001228 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	60ba      	str	r2, [r7, #8]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fd6b 	bl	8000cf8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf1      	blt.n	8001214 <_write+0x12>
  }
  return len;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_close>:

int _close(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001260:	605a      	str	r2, [r3, #4]
  return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <_isatty>:

int _isatty(int file)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001282:	b480      	push	{r7}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
	...

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f003 fa64 	bl	8004798 <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	@ (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20005000 	.word	0x20005000
 80012fc:	00000400 	.word	0x00000400
 8001300:	20000174 	.word	0x20000174
 8001304:	20000310 	.word	0x20000310

08001308 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <MX_USART2_UART_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131e:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 800134c:	f002 fe05 	bl	8003f5a <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001356:	f7ff fdb9 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000178 	.word	0x20000178
 8001364:	40004400 	.word	0x40004400

08001368 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1b      	ldr	r2, [pc, #108]	@ (80013f0 <HAL_UART_MspInit+0x88>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d12f      	bne.n	80013e8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001388:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <HAL_UART_MspInit+0x8c>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	4a19      	ldr	r2, [pc, #100]	@ (80013f4 <HAL_UART_MspInit+0x8c>)
 800138e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001392:	61d3      	str	r3, [r2, #28]
 8001394:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <HAL_UART_MspInit+0x8c>)
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_UART_MspInit+0x8c>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a13      	ldr	r2, [pc, #76]	@ (80013f4 <HAL_UART_MspInit+0x8c>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_UART_MspInit+0x8c>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b8:	2304      	movs	r3, #4
 80013ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	4619      	mov	r1, r3
 80013ca:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <HAL_UART_MspInit+0x90>)
 80013cc:	f001 f900 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013d0:	2308      	movs	r3, #8
 80013d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <HAL_UART_MspInit+0x90>)
 80013e4:	f001 f8f4 	bl	80025d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40004400 	.word	0x40004400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010800 	.word	0x40010800

080013fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013fc:	f7ff ff84 	bl	8001308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001400:	480b      	ldr	r0, [pc, #44]	@ (8001430 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001402:	490c      	ldr	r1, [pc, #48]	@ (8001434 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001404:	4a0c      	ldr	r2, [pc, #48]	@ (8001438 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a09      	ldr	r2, [pc, #36]	@ (800143c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001418:	4c09      	ldr	r4, [pc, #36]	@ (8001440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001426:	f003 f9bd 	bl	80047a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800142a:	f7ff fc77 	bl	8000d1c <main>
  bx lr
 800142e:	4770      	bx	lr
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001438:	0800534c 	.word	0x0800534c
  ldr r2, =_sbss
 800143c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001440:	20000310 	.word	0x20000310

08001444 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <CAN1_RX1_IRQHandler>
	...

08001448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <HAL_Init+0x28>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <HAL_Init+0x28>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 fe89 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145e:	2000      	movs	r0, #0
 8001460:	f000 f808 	bl	8001474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001464:	f7ff fe36 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40022000 	.word	0x40022000

08001474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_InitTick+0x54>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <HAL_InitTick+0x58>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fea1 	bl	80021da <HAL_SYSTICK_Config>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e00e      	b.n	80014c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d80a      	bhi.n	80014be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f000 fe69 	bl	8002186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b4:	4a06      	ldr	r2, [pc, #24]	@ (80014d0 <HAL_InitTick+0x5c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e000      	b.n	80014c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000010 	.word	0x20000010
 80014d0:	2000000c 	.word	0x2000000c

080014d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <HAL_IncTick+0x1c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_IncTick+0x20>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a03      	ldr	r2, [pc, #12]	@ (80014f4 <HAL_IncTick+0x20>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000010 	.word	0x20000010
 80014f4:	200001c0 	.word	0x200001c0

080014f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b02      	ldr	r3, [pc, #8]	@ (8001508 <HAL_GetTick+0x10>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	200001c0 	.word	0x200001c0

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff fff0 	bl	80014f8 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffe0 	bl	80014f8 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000010 	.word	0x20000010

08001554 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0be      	b.n	80016f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fd20 	bl	8000fd8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 fbbd 	bl	8001d18 <ADC_ConversionStop_Disable>
 800159e:	4603      	mov	r3, r0
 80015a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f040 8099 	bne.w	80016e2 <HAL_ADC_Init+0x18e>
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 8095 	bne.w	80016e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015c0:	f023 0302 	bic.w	r3, r3, #2
 80015c4:	f043 0202 	orr.w	r2, r3, #2
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7b1b      	ldrb	r3, [r3, #12]
 80015da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015ec:	d003      	beq.n	80015f6 <HAL_ADC_Init+0xa2>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d102      	bne.n	80015fc <HAL_ADC_Init+0xa8>
 80015f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015fa:	e000      	b.n	80015fe <HAL_ADC_Init+0xaa>
 80015fc:	2300      	movs	r3, #0
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7d1b      	ldrb	r3, [r3, #20]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d119      	bne.n	8001640 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7b1b      	ldrb	r3, [r3, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d109      	bne.n	8001628 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	3b01      	subs	r3, #1
 800161a:	035a      	lsls	r2, r3, #13
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	e00b      	b.n	8001640 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	f043 0220 	orr.w	r2, r3, #32
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	430a      	orrs	r2, r1
 8001652:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <HAL_ADC_Init+0x1a8>)
 800165c:	4013      	ands	r3, r2
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	430b      	orrs	r3, r1
 8001666:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001670:	d003      	beq.n	800167a <HAL_ADC_Init+0x126>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d104      	bne.n	8001684 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	3b01      	subs	r3, #1
 8001680:	051b      	lsls	r3, r3, #20
 8001682:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	430a      	orrs	r2, r1
 8001696:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_ADC_Init+0x1ac>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d10b      	bne.n	80016c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	f023 0303 	bic.w	r3, r3, #3
 80016b6:	f043 0201 	orr.w	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016be:	e018      	b.n	80016f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	f023 0312 	bic.w	r3, r3, #18
 80016c8:	f043 0210 	orr.w	r2, r3, #16
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016e0:	e007      	b.n	80016f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e6:	f043 0210 	orr.w	r2, r3, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001700:	ff1f0efe 	.word	0xff1f0efe

08001704 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a64      	ldr	r2, [pc, #400]	@ (80018ac <HAL_ADC_Start_DMA+0x1a8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d004      	beq.n	8001728 <HAL_ADC_Start_DMA+0x24>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a63      	ldr	r2, [pc, #396]	@ (80018b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d106      	bne.n	8001736 <HAL_ADC_Start_DMA+0x32>
 8001728:	4b60      	ldr	r3, [pc, #384]	@ (80018ac <HAL_ADC_Start_DMA+0x1a8>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 80b3 	bne.w	800189c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADC_Start_DMA+0x40>
 8001740:	2302      	movs	r3, #2
 8001742:	e0ae      	b.n	80018a2 <HAL_ADC_Start_DMA+0x19e>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 fa89 	bl	8001c64 <ADC_Enable>
 8001752:	4603      	mov	r3, r0
 8001754:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001756:	7dfb      	ldrb	r3, [r7, #23]
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 809a 	bne.w	8001892 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a4e      	ldr	r2, [pc, #312]	@ (80018b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d105      	bne.n	8001788 <HAL_ADC_Start_DMA+0x84>
 800177c:	4b4b      	ldr	r3, [pc, #300]	@ (80018ac <HAL_ADC_Start_DMA+0x1a8>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d115      	bne.n	80017b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d026      	beq.n	80017f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017b2:	e01d      	b.n	80017f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a39      	ldr	r2, [pc, #228]	@ (80018ac <HAL_ADC_Start_DMA+0x1a8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d004      	beq.n	80017d4 <HAL_ADC_Start_DMA+0xd0>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a38      	ldr	r2, [pc, #224]	@ (80018b0 <HAL_ADC_Start_DMA+0x1ac>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d10d      	bne.n	80017f0 <HAL_ADC_Start_DMA+0xec>
 80017d4:	4b35      	ldr	r3, [pc, #212]	@ (80018ac <HAL_ADC_Start_DMA+0x1a8>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001800:	f023 0206 	bic.w	r2, r3, #6
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001808:	e002      	b.n	8001810 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <HAL_ADC_Start_DMA+0x1b0>)
 800181e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4a24      	ldr	r2, [pc, #144]	@ (80018b8 <HAL_ADC_Start_DMA+0x1b4>)
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4a23      	ldr	r2, [pc, #140]	@ (80018bc <HAL_ADC_Start_DMA+0x1b8>)
 800182e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f06f 0202 	mvn.w	r2, #2
 8001838:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001848:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a18      	ldr	r0, [r3, #32]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	334c      	adds	r3, #76	@ 0x4c
 8001854:	4619      	mov	r1, r3
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f000 fd25 	bl	80022a8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001868:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800186c:	d108      	bne.n	8001880 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800187c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800187e:	e00f      	b.n	80018a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800188e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001890:	e006      	b.n	80018a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800189a:	e001      	b.n	80018a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40012400 	.word	0x40012400
 80018b0:	40012800 	.word	0x40012800
 80018b4:	08001d9b 	.word	0x08001d9b
 80018b8:	08001e17 	.word	0x08001e17
 80018bc:	08001e33 	.word	0x08001e33

080018c0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d03e      	beq.n	8001960 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d039      	beq.n	8001960 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f0:	f003 0310 	and.w	r3, r3, #16
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d105      	bne.n	8001904 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800190e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001912:	d11d      	bne.n	8001950 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001918:	2b00      	cmp	r3, #0
 800191a:	d119      	bne.n	8001950 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0220 	bic.w	r2, r2, #32
 800192a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001930:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff fa9d 	bl	8000e90 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f06f 0212 	mvn.w	r2, #18
 800195e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001966:	2b00      	cmp	r3, #0
 8001968:	d04d      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d048      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001984:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001996:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800199a:	d012      	beq.n	80019c2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d125      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019b4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019b8:	d11d      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d119      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019d0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d105      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fae4 	bl	8001fc4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f06f 020c 	mvn.w	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d012      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00d      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f812 	bl	8001a50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 0201 	mvn.w	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x20>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e0dc      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x1da>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	d81c      	bhi.n	8001ade <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3b05      	subs	r3, #5
 8001ab6:	221f      	movs	r2, #31
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	4019      	ands	r1, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	3b05      	subs	r3, #5
 8001ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	635a      	str	r2, [r3, #52]	@ 0x34
 8001adc:	e03c      	b.n	8001b58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d81c      	bhi.n	8001b20 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	3b23      	subs	r3, #35	@ 0x23
 8001af8:	221f      	movs	r2, #31
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4019      	ands	r1, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b23      	subs	r3, #35	@ 0x23
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b1e:	e01b      	b.n	8001b58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b41      	subs	r3, #65	@ 0x41
 8001b32:	221f      	movs	r2, #31
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4019      	ands	r1, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b41      	subs	r3, #65	@ 0x41
 8001b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d91c      	bls.n	8001b9a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68d9      	ldr	r1, [r3, #12]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	2207      	movs	r2, #7
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4019      	ands	r1, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6898      	ldr	r0, [r3, #8]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b1e      	subs	r3, #30
 8001b8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	e019      	b.n	8001bce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6919      	ldr	r1, [r3, #16]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	2207      	movs	r2, #7
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4019      	ands	r1, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6898      	ldr	r0, [r3, #8]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d003      	beq.n	8001bde <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bda:	2b11      	cmp	r3, #17
 8001bdc:	d132      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c58 <HAL_ADC_ConfigChannel+0x1e4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d125      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d126      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c04:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d11a      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <HAL_ADC_ConfigChannel+0x1e8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	0c9a      	lsrs	r2, r3, #18
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c24:	e002      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f9      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x1b2>
 8001c32:	e007      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	40012400 	.word	0x40012400
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	431bde83 	.word	0x431bde83

08001c64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d040      	beq.n	8001d04 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0201 	orr.w	r2, r2, #1
 8001c90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c92:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <ADC_Enable+0xac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <ADC_Enable+0xb0>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	0c9b      	lsrs	r3, r3, #18
 8001c9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ca0:	e002      	b.n	8001ca8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f9      	bne.n	8001ca2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cae:	f7ff fc23 	bl	80014f8 <HAL_GetTick>
 8001cb2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cb4:	e01f      	b.n	8001cf6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cb6:	f7ff fc1f 	bl	80014f8 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d918      	bls.n	8001cf6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d011      	beq.n	8001cf6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd6:	f043 0210 	orr.w	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e007      	b.n	8001d06 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d1d8      	bne.n	8001cb6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008
 8001d14:	431bde83 	.word	0x431bde83

08001d18 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d12e      	bne.n	8001d90 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d42:	f7ff fbd9 	bl	80014f8 <HAL_GetTick>
 8001d46:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d48:	e01b      	b.n	8001d82 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d4a:	f7ff fbd5 	bl	80014f8 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d914      	bls.n	8001d82 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d10d      	bne.n	8001d82 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6a:	f043 0210 	orr.w	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e007      	b.n	8001d92 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d0dc      	beq.n	8001d4a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d127      	bne.n	8001e04 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001dca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001dce:	d115      	bne.n	8001dfc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d111      	bne.n	8001dfc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ddc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7ff f847 	bl	8000e90 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e02:	e004      	b.n	8001e0e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	4798      	blx	r3
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff fe0a 	bl	8001a3e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e50:	f043 0204 	orr.w	r2, r3, #4
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7ff fe02 	bl	8001a62 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_ADCEx_Calibration_Start+0x1e>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e097      	b.n	8001fb6 <HAL_ADCEx_Calibration_Start+0x14e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff42 	bl	8001d18 <ADC_ConversionStop_Disable>
 8001e94:	4603      	mov	r3, r0
 8001e96:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fee3 	bl	8001c64 <ADC_Enable>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 8081 	bne.w	8001fac <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eb2:	f023 0302 	bic.w	r3, r3, #2
 8001eb6:	f043 0202 	orr.w	r2, r3, #2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ebe:	4b40      	ldr	r3, [pc, #256]	@ (8001fc0 <HAL_ADCEx_Calibration_Start+0x158>)
 8001ec0:	681c      	ldr	r4, [r3, #0]
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f001 f9fe 	bl	80032c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001ece:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001ed0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001ed2:	e002      	b.n	8001eda <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f9      	bne.n	8001ed4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ef0:	f7ff fb02 	bl	80014f8 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ef6:	e01b      	b.n	8001f30 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ef8:	f7ff fafe 	bl	80014f8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b0a      	cmp	r3, #10
 8001f04:	d914      	bls.n	8001f30 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00d      	beq.n	8001f30 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	f023 0312 	bic.w	r3, r3, #18
 8001f1c:	f043 0210 	orr.w	r2, r3, #16
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e042      	b.n	8001fb6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1dc      	bne.n	8001ef8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0204 	orr.w	r2, r2, #4
 8001f4c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001f4e:	f7ff fad3 	bl	80014f8 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001f54:	e01b      	b.n	8001f8e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f56:	f7ff facf 	bl	80014f8 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b0a      	cmp	r3, #10
 8001f62:	d914      	bls.n	8001f8e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f76:	f023 0312 	bic.w	r3, r3, #18
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e013      	b.n	8001fb6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1dc      	bne.n	8001f56 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa0:	f023 0303 	bic.w	r3, r3, #3
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd90      	pop	{r4, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008

08001fc4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
	...

08001fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <__NVIC_SetPriorityGrouping+0x44>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200a:	4a04      	ldr	r2, [pc, #16]	@ (800201c <__NVIC_SetPriorityGrouping+0x44>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	60d3      	str	r3, [r2, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002024:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <__NVIC_GetPriorityGrouping+0x18>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	f003 0307 	and.w	r3, r3, #7
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	db0b      	blt.n	8002066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	4906      	ldr	r1, [pc, #24]	@ (8002070 <__NVIC_EnableIRQ+0x34>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	2001      	movs	r0, #1
 800205e:	fa00 f202 	lsl.w	r2, r0, r2
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	e000e100 	.word	0xe000e100

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db0a      	blt.n	800209e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <__NVIC_SetPriority+0x4c>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	440b      	add	r3, r1
 8002098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800209c:	e00a      	b.n	80020b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4908      	ldr	r1, [pc, #32]	@ (80020c4 <__NVIC_SetPriority+0x50>)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3b04      	subs	r3, #4
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	761a      	strb	r2, [r3, #24]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f1c3 0307 	rsb	r3, r3, #7
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	bf28      	it	cs
 80020e6:	2304      	movcs	r3, #4
 80020e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d902      	bls.n	80020f8 <NVIC_EncodePriority+0x30>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3b03      	subs	r3, #3
 80020f6:	e000      	b.n	80020fa <NVIC_EncodePriority+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43d9      	mvns	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	4313      	orrs	r3, r2
         );
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	@ 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800213c:	d301      	bcc.n	8002142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002142:	4a0a      	ldr	r2, [pc, #40]	@ (800216c <SysTick_Config+0x40>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214a:	210f      	movs	r1, #15
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f7ff ff90 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <SysTick_Config+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <SysTick_Config+0x40>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff2d 	bl	8001fd8 <__NVIC_SetPriorityGrouping>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002198:	f7ff ff42 	bl	8002020 <__NVIC_GetPriorityGrouping>
 800219c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff90 	bl	80020c8 <NVIC_EncodePriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5f 	bl	8002074 <__NVIC_SetPriority>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff35 	bl	800203c <__NVIC_EnableIRQ>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ffa2 	bl	800212c <SysTick_Config>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e043      	b.n	8002292 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	4b22      	ldr	r3, [pc, #136]	@ (800229c <HAL_DMA_Init+0xa8>)
 8002212:	4413      	add	r3, r2
 8002214:	4a22      	ldr	r2, [pc, #136]	@ (80022a0 <HAL_DMA_Init+0xac>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	009a      	lsls	r2, r3, #2
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1f      	ldr	r2, [pc, #124]	@ (80022a4 <HAL_DMA_Init+0xb0>)
 8002226:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800223e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002242:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800224c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	bffdfff8 	.word	0xbffdfff8
 80022a0:	cccccccd 	.word	0xcccccccd
 80022a4:	40020000 	.word	0x40020000

080022a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_DMA_Start_IT+0x20>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e04b      	b.n	8002360 <HAL_DMA_Start_IT+0xb8>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d13a      	bne.n	8002352 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f937 	bl	8002574 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 020e 	orr.w	r2, r2, #14
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e00f      	b.n	8002340 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0204 	bic.w	r2, r2, #4
 800232e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 020a 	orr.w	r2, r2, #10
 800233e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e005      	b.n	800235e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800235a:	2302      	movs	r3, #2
 800235c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800235e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	2204      	movs	r2, #4
 8002386:	409a      	lsls	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d04f      	beq.n	8002430 <HAL_DMA_IRQHandler+0xc8>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d04a      	beq.n	8002430 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0204 	bic.w	r2, r2, #4
 80023b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a66      	ldr	r2, [pc, #408]	@ (8002558 <HAL_DMA_IRQHandler+0x1f0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d029      	beq.n	8002416 <HAL_DMA_IRQHandler+0xae>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a65      	ldr	r2, [pc, #404]	@ (800255c <HAL_DMA_IRQHandler+0x1f4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d022      	beq.n	8002412 <HAL_DMA_IRQHandler+0xaa>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a63      	ldr	r2, [pc, #396]	@ (8002560 <HAL_DMA_IRQHandler+0x1f8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01a      	beq.n	800240c <HAL_DMA_IRQHandler+0xa4>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a62      	ldr	r2, [pc, #392]	@ (8002564 <HAL_DMA_IRQHandler+0x1fc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d012      	beq.n	8002406 <HAL_DMA_IRQHandler+0x9e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a60      	ldr	r2, [pc, #384]	@ (8002568 <HAL_DMA_IRQHandler+0x200>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00a      	beq.n	8002400 <HAL_DMA_IRQHandler+0x98>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a5f      	ldr	r2, [pc, #380]	@ (800256c <HAL_DMA_IRQHandler+0x204>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d102      	bne.n	80023fa <HAL_DMA_IRQHandler+0x92>
 80023f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023f8:	e00e      	b.n	8002418 <HAL_DMA_IRQHandler+0xb0>
 80023fa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80023fe:	e00b      	b.n	8002418 <HAL_DMA_IRQHandler+0xb0>
 8002400:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002404:	e008      	b.n	8002418 <HAL_DMA_IRQHandler+0xb0>
 8002406:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800240a:	e005      	b.n	8002418 <HAL_DMA_IRQHandler+0xb0>
 800240c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002410:	e002      	b.n	8002418 <HAL_DMA_IRQHandler+0xb0>
 8002412:	2340      	movs	r3, #64	@ 0x40
 8002414:	e000      	b.n	8002418 <HAL_DMA_IRQHandler+0xb0>
 8002416:	2304      	movs	r3, #4
 8002418:	4a55      	ldr	r2, [pc, #340]	@ (8002570 <HAL_DMA_IRQHandler+0x208>)
 800241a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8094 	beq.w	800254e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800242e:	e08e      	b.n	800254e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	2202      	movs	r2, #2
 8002436:	409a      	lsls	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d056      	beq.n	80024ee <HAL_DMA_IRQHandler+0x186>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d051      	beq.n	80024ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10b      	bne.n	8002470 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 020a 	bic.w	r2, r2, #10
 8002466:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a38      	ldr	r2, [pc, #224]	@ (8002558 <HAL_DMA_IRQHandler+0x1f0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d029      	beq.n	80024ce <HAL_DMA_IRQHandler+0x166>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a37      	ldr	r2, [pc, #220]	@ (800255c <HAL_DMA_IRQHandler+0x1f4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d022      	beq.n	80024ca <HAL_DMA_IRQHandler+0x162>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a35      	ldr	r2, [pc, #212]	@ (8002560 <HAL_DMA_IRQHandler+0x1f8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01a      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x15c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a34      	ldr	r2, [pc, #208]	@ (8002564 <HAL_DMA_IRQHandler+0x1fc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d012      	beq.n	80024be <HAL_DMA_IRQHandler+0x156>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a32      	ldr	r2, [pc, #200]	@ (8002568 <HAL_DMA_IRQHandler+0x200>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00a      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x150>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a31      	ldr	r2, [pc, #196]	@ (800256c <HAL_DMA_IRQHandler+0x204>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d102      	bne.n	80024b2 <HAL_DMA_IRQHandler+0x14a>
 80024ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80024b0:	e00e      	b.n	80024d0 <HAL_DMA_IRQHandler+0x168>
 80024b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024b6:	e00b      	b.n	80024d0 <HAL_DMA_IRQHandler+0x168>
 80024b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024bc:	e008      	b.n	80024d0 <HAL_DMA_IRQHandler+0x168>
 80024be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024c2:	e005      	b.n	80024d0 <HAL_DMA_IRQHandler+0x168>
 80024c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024c8:	e002      	b.n	80024d0 <HAL_DMA_IRQHandler+0x168>
 80024ca:	2320      	movs	r3, #32
 80024cc:	e000      	b.n	80024d0 <HAL_DMA_IRQHandler+0x168>
 80024ce:	2302      	movs	r3, #2
 80024d0:	4a27      	ldr	r2, [pc, #156]	@ (8002570 <HAL_DMA_IRQHandler+0x208>)
 80024d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d034      	beq.n	800254e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024ec:	e02f      	b.n	800254e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	2208      	movs	r2, #8
 80024f4:	409a      	lsls	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d028      	beq.n	8002550 <HAL_DMA_IRQHandler+0x1e8>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d023      	beq.n	8002550 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 020e 	bic.w	r2, r2, #14
 8002516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
    }
  }
  return;
 800254e:	bf00      	nop
 8002550:	bf00      	nop
}
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40020008 	.word	0x40020008
 800255c:	4002001c 	.word	0x4002001c
 8002560:	40020030 	.word	0x40020030
 8002564:	40020044 	.word	0x40020044
 8002568:	40020058 	.word	0x40020058
 800256c:	4002006c 	.word	0x4002006c
 8002570:	40020000 	.word	0x40020000

08002574 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d108      	bne.n	80025b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025b2:	e007      	b.n	80025c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	60da      	str	r2, [r3, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b08b      	sub	sp, #44	@ 0x2c
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	e169      	b.n	80028b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025e4:	2201      	movs	r2, #1
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f040 8158 	bne.w	80028b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a9a      	ldr	r2, [pc, #616]	@ (8002870 <HAL_GPIO_Init+0x2a0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d05e      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 800260c:	4a98      	ldr	r2, [pc, #608]	@ (8002870 <HAL_GPIO_Init+0x2a0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d875      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002612:	4a98      	ldr	r2, [pc, #608]	@ (8002874 <HAL_GPIO_Init+0x2a4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d058      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002618:	4a96      	ldr	r2, [pc, #600]	@ (8002874 <HAL_GPIO_Init+0x2a4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d86f      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800261e:	4a96      	ldr	r2, [pc, #600]	@ (8002878 <HAL_GPIO_Init+0x2a8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d052      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002624:	4a94      	ldr	r2, [pc, #592]	@ (8002878 <HAL_GPIO_Init+0x2a8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d869      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800262a:	4a94      	ldr	r2, [pc, #592]	@ (800287c <HAL_GPIO_Init+0x2ac>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04c      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002630:	4a92      	ldr	r2, [pc, #584]	@ (800287c <HAL_GPIO_Init+0x2ac>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d863      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002636:	4a92      	ldr	r2, [pc, #584]	@ (8002880 <HAL_GPIO_Init+0x2b0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d046      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 800263c:	4a90      	ldr	r2, [pc, #576]	@ (8002880 <HAL_GPIO_Init+0x2b0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d85d      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002642:	2b12      	cmp	r3, #18
 8002644:	d82a      	bhi.n	800269c <HAL_GPIO_Init+0xcc>
 8002646:	2b12      	cmp	r3, #18
 8002648:	d859      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800264a:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <HAL_GPIO_Init+0x80>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	080026cb 	.word	0x080026cb
 8002654:	080026a5 	.word	0x080026a5
 8002658:	080026b7 	.word	0x080026b7
 800265c:	080026f9 	.word	0x080026f9
 8002660:	080026ff 	.word	0x080026ff
 8002664:	080026ff 	.word	0x080026ff
 8002668:	080026ff 	.word	0x080026ff
 800266c:	080026ff 	.word	0x080026ff
 8002670:	080026ff 	.word	0x080026ff
 8002674:	080026ff 	.word	0x080026ff
 8002678:	080026ff 	.word	0x080026ff
 800267c:	080026ff 	.word	0x080026ff
 8002680:	080026ff 	.word	0x080026ff
 8002684:	080026ff 	.word	0x080026ff
 8002688:	080026ff 	.word	0x080026ff
 800268c:	080026ff 	.word	0x080026ff
 8002690:	080026ff 	.word	0x080026ff
 8002694:	080026ad 	.word	0x080026ad
 8002698:	080026c1 	.word	0x080026c1
 800269c:	4a79      	ldr	r2, [pc, #484]	@ (8002884 <HAL_GPIO_Init+0x2b4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026a2:	e02c      	b.n	80026fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	623b      	str	r3, [r7, #32]
          break;
 80026aa:	e029      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	3304      	adds	r3, #4
 80026b2:	623b      	str	r3, [r7, #32]
          break;
 80026b4:	e024      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	3308      	adds	r3, #8
 80026bc:	623b      	str	r3, [r7, #32]
          break;
 80026be:	e01f      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	330c      	adds	r3, #12
 80026c6:	623b      	str	r3, [r7, #32]
          break;
 80026c8:	e01a      	b.n	8002700 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026d2:	2304      	movs	r3, #4
 80026d4:	623b      	str	r3, [r7, #32]
          break;
 80026d6:	e013      	b.n	8002700 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e0:	2308      	movs	r3, #8
 80026e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	611a      	str	r2, [r3, #16]
          break;
 80026ea:	e009      	b.n	8002700 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ec:	2308      	movs	r3, #8
 80026ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	615a      	str	r2, [r3, #20]
          break;
 80026f6:	e003      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026f8:	2300      	movs	r3, #0
 80026fa:	623b      	str	r3, [r7, #32]
          break;
 80026fc:	e000      	b.n	8002700 <HAL_GPIO_Init+0x130>
          break;
 80026fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2bff      	cmp	r3, #255	@ 0xff
 8002704:	d801      	bhi.n	800270a <HAL_GPIO_Init+0x13a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	e001      	b.n	800270e <HAL_GPIO_Init+0x13e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2bff      	cmp	r3, #255	@ 0xff
 8002714:	d802      	bhi.n	800271c <HAL_GPIO_Init+0x14c>
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	e002      	b.n	8002722 <HAL_GPIO_Init+0x152>
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	3b08      	subs	r3, #8
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	210f      	movs	r1, #15
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	6a39      	ldr	r1, [r7, #32]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	431a      	orrs	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80b1 	beq.w	80028b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002750:	4b4d      	ldr	r3, [pc, #308]	@ (8002888 <HAL_GPIO_Init+0x2b8>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4a4c      	ldr	r2, [pc, #304]	@ (8002888 <HAL_GPIO_Init+0x2b8>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6193      	str	r3, [r2, #24]
 800275c:	4b4a      	ldr	r3, [pc, #296]	@ (8002888 <HAL_GPIO_Init+0x2b8>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002768:	4a48      	ldr	r2, [pc, #288]	@ (800288c <HAL_GPIO_Init+0x2bc>)
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a40      	ldr	r2, [pc, #256]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_GPIO_Init+0x1ec>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a3f      	ldr	r2, [pc, #252]	@ (8002894 <HAL_GPIO_Init+0x2c4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00d      	beq.n	80027b8 <HAL_GPIO_Init+0x1e8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a3e      	ldr	r2, [pc, #248]	@ (8002898 <HAL_GPIO_Init+0x2c8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <HAL_GPIO_Init+0x1e4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a3d      	ldr	r2, [pc, #244]	@ (800289c <HAL_GPIO_Init+0x2cc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_GPIO_Init+0x1e0>
 80027ac:	2303      	movs	r3, #3
 80027ae:	e006      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b0:	2304      	movs	r3, #4
 80027b2:	e004      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e002      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027bc:	2300      	movs	r3, #0
 80027be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c0:	f002 0203 	and.w	r2, r2, #3
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	4093      	lsls	r3, r2
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ce:	492f      	ldr	r1, [pc, #188]	@ (800288c <HAL_GPIO_Init+0x2bc>)
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027e8:	4b2d      	ldr	r3, [pc, #180]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	492c      	ldr	r1, [pc, #176]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027f6:	4b2a      	ldr	r3, [pc, #168]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	4928      	ldr	r1, [pc, #160]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002800:	4013      	ands	r3, r2
 8002802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002810:	4b23      	ldr	r3, [pc, #140]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4922      	ldr	r1, [pc, #136]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	43db      	mvns	r3, r3
 8002826:	491e      	ldr	r1, [pc, #120]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002828:	4013      	ands	r3, r2
 800282a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4918      	ldr	r1, [pc, #96]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002846:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	43db      	mvns	r3, r3
 800284e:	4914      	ldr	r1, [pc, #80]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002850:	4013      	ands	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d021      	beq.n	80028a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002860:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	490e      	ldr	r1, [pc, #56]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]
 800286c:	e021      	b.n	80028b2 <HAL_GPIO_Init+0x2e2>
 800286e:	bf00      	nop
 8002870:	10320000 	.word	0x10320000
 8002874:	10310000 	.word	0x10310000
 8002878:	10220000 	.word	0x10220000
 800287c:	10210000 	.word	0x10210000
 8002880:	10120000 	.word	0x10120000
 8002884:	10110000 	.word	0x10110000
 8002888:	40021000 	.word	0x40021000
 800288c:	40010000 	.word	0x40010000
 8002890:	40010800 	.word	0x40010800
 8002894:	40010c00 	.word	0x40010c00
 8002898:	40011000 	.word	0x40011000
 800289c:	40011400 	.word	0x40011400
 80028a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <HAL_GPIO_Init+0x304>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	4909      	ldr	r1, [pc, #36]	@ (80028d4 <HAL_GPIO_Init+0x304>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f47f ae8e 	bne.w	80025e4 <HAL_GPIO_Init+0x14>
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	372c      	adds	r7, #44	@ 0x2c
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40010400 	.word	0x40010400

080028d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028f4:	e003      	b.n	80028fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	041a      	lsls	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	611a      	str	r2, [r3, #16]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002912:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d006      	beq.n	800292c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800291e:	4a05      	ldr	r2, [pc, #20]	@ (8002934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe f9a2 	bl	8000c70 <HAL_GPIO_EXTI_Callback>
  }
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40010400 	.word	0x40010400

08002938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e272      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8087 	beq.w	8002a66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002958:	4b92      	ldr	r3, [pc, #584]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b04      	cmp	r3, #4
 8002962:	d00c      	beq.n	800297e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002964:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b08      	cmp	r3, #8
 800296e:	d112      	bne.n	8002996 <HAL_RCC_OscConfig+0x5e>
 8002970:	4b8c      	ldr	r3, [pc, #560]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800297c:	d10b      	bne.n	8002996 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297e:	4b89      	ldr	r3, [pc, #548]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d06c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x12c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d168      	bne.n	8002a64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e24c      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x76>
 80029a0:	4b80      	ldr	r3, [pc, #512]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a7f      	ldr	r2, [pc, #508]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e02e      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x98>
 80029b6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7a      	ldr	r2, [pc, #488]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b78      	ldr	r3, [pc, #480]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a77      	ldr	r2, [pc, #476]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01d      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0xbc>
 80029da:	4b72      	ldr	r3, [pc, #456]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a71      	ldr	r2, [pc, #452]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029f4:	4b6b      	ldr	r3, [pc, #428]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6a      	ldr	r2, [pc, #424]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b68      	ldr	r3, [pc, #416]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a67      	ldr	r2, [pc, #412]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fd70 	bl	80014f8 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fd6c 	bl	80014f8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	@ 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e200      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0xe4>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fd5c 	bl	80014f8 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fd58 	bl	80014f8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e1ec      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	4b53      	ldr	r3, [pc, #332]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x10c>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d063      	beq.n	8002b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a72:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d11c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x18c>
 8002a8a:	4b46      	ldr	r3, [pc, #280]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d116      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a96:	4b43      	ldr	r3, [pc, #268]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_RCC_OscConfig+0x176>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e1c0      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4939      	ldr	r1, [pc, #228]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	e03a      	b.n	8002b3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002acc:	4b36      	ldr	r3, [pc, #216]	@ (8002ba8 <HAL_RCC_OscConfig+0x270>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fd11 	bl	80014f8 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ada:	f7fe fd0d 	bl	80014f8 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e1a1      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4927      	ldr	r1, [pc, #156]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]
 8002b0c:	e015      	b.n	8002b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ba8 <HAL_RCC_OscConfig+0x270>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fe fcf0 	bl	80014f8 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1c:	f7fe fcec 	bl	80014f8 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e180      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d03a      	beq.n	8002bbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d019      	beq.n	8002b82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4e:	4b17      	ldr	r3, [pc, #92]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b54:	f7fe fcd0 	bl	80014f8 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fccc 	bl	80014f8 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e160      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f000 face 	bl	800311c <RCC_Delay>
 8002b80:	e01c      	b.n	8002bbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b82:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b88:	f7fe fcb6 	bl	80014f8 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8e:	e00f      	b.n	8002bb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fe fcb2 	bl	80014f8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d908      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e146      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	42420000 	.word	0x42420000
 8002bac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb0:	4b92      	ldr	r3, [pc, #584]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e9      	bne.n	8002b90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80a6 	beq.w	8002d16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bce:	4b8b      	ldr	r3, [pc, #556]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10d      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	4b88      	ldr	r3, [pc, #544]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4a87      	ldr	r2, [pc, #540]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	61d3      	str	r3, [r2, #28]
 8002be6:	4b85      	ldr	r3, [pc, #532]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	4b82      	ldr	r3, [pc, #520]	@ (8002e00 <HAL_RCC_OscConfig+0x4c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c02:	4b7f      	ldr	r3, [pc, #508]	@ (8002e00 <HAL_RCC_OscConfig+0x4c8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7e      	ldr	r2, [pc, #504]	@ (8002e00 <HAL_RCC_OscConfig+0x4c8>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fc73 	bl	80014f8 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c16:	f7fe fc6f 	bl	80014f8 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b64      	cmp	r3, #100	@ 0x64
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e103      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	4b75      	ldr	r3, [pc, #468]	@ (8002e00 <HAL_RCC_OscConfig+0x4c8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x312>
 8002c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	4a6e      	ldr	r2, [pc, #440]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6213      	str	r3, [r2, #32]
 8002c48:	e02d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x36e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x334>
 8002c52:	4b6a      	ldr	r3, [pc, #424]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a69      	ldr	r2, [pc, #420]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6213      	str	r3, [r2, #32]
 8002c5e:	4b67      	ldr	r3, [pc, #412]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4a66      	ldr	r2, [pc, #408]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	6213      	str	r3, [r2, #32]
 8002c6a:	e01c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x36e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d10c      	bne.n	8002c8e <HAL_RCC_OscConfig+0x356>
 8002c74:	4b61      	ldr	r3, [pc, #388]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a60      	ldr	r2, [pc, #384]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	6213      	str	r3, [r2, #32]
 8002c80:	4b5e      	ldr	r3, [pc, #376]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4a5d      	ldr	r2, [pc, #372]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6213      	str	r3, [r2, #32]
 8002c8c:	e00b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x36e>
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a5a      	ldr	r2, [pc, #360]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	6213      	str	r3, [r2, #32]
 8002c9a:	4b58      	ldr	r3, [pc, #352]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4a57      	ldr	r2, [pc, #348]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d015      	beq.n	8002cda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cae:	f7fe fc23 	bl	80014f8 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe fc1f 	bl	80014f8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0b1      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ee      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x37e>
 8002cd8:	e014      	b.n	8002d04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cda:	f7fe fc0d 	bl	80014f8 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fe fc09 	bl	80014f8 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e09b      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	4b40      	ldr	r3, [pc, #256]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ee      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	4a3b      	ldr	r2, [pc, #236]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8087 	beq.w	8002e2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d20:	4b36      	ldr	r3, [pc, #216]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d061      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d146      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d34:	4b33      	ldr	r3, [pc, #204]	@ (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fbdd 	bl	80014f8 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe fbd9 	bl	80014f8 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e06d      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d54:	4b29      	ldr	r3, [pc, #164]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d68:	d108      	bne.n	8002d7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d6a:	4b24      	ldr	r3, [pc, #144]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4921      	ldr	r1, [pc, #132]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a19      	ldr	r1, [r3, #32]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	491b      	ldr	r1, [pc, #108]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d94:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fbad 	bl	80014f8 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da2:	f7fe fba9 	bl	80014f8 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e03d      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db4:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x46a>
 8002dc0:	e035      	b.n	8002e2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b10      	ldr	r3, [pc, #64]	@ (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fb96 	bl	80014f8 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fe fb92 	bl	80014f8 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e026      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de2:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x498>
 8002dee:	e01e      	b.n	8002e2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e019      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
 8002e04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <HAL_RCC_OscConfig+0x500>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000

08002e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0d0      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b6a      	ldr	r3, [pc, #424]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d910      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b67      	ldr	r3, [pc, #412]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 0207 	bic.w	r2, r3, #7
 8002e66:	4965      	ldr	r1, [pc, #404]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b63      	ldr	r3, [pc, #396]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0b8      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e98:	4b59      	ldr	r3, [pc, #356]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a58      	ldr	r2, [pc, #352]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ea2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb0:	4b53      	ldr	r3, [pc, #332]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002eba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b50      	ldr	r3, [pc, #320]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	494d      	ldr	r1, [pc, #308]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d040      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b47      	ldr	r3, [pc, #284]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d115      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07f      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b41      	ldr	r3, [pc, #260]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e073      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06b      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4936      	ldr	r1, [pc, #216]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fae4 	bl	80014f8 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fe fae0 	bl	80014f8 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e053      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d210      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 0207 	bic.w	r2, r3, #7
 8002f72:	4922      	ldr	r1, [pc, #136]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b20      	ldr	r3, [pc, #128]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e032      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f98:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4916      	ldr	r1, [pc, #88]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fb6:	4b12      	ldr	r3, [pc, #72]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	490e      	ldr	r1, [pc, #56]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fca:	f000 f821 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	490a      	ldr	r1, [pc, #40]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	5ccb      	ldrb	r3, [r1, r3]
 8002fde:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe2:	4a09      	ldr	r2, [pc, #36]	@ (8003008 <HAL_RCC_ClockConfig+0x1cc>)
 8002fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fe6:	4b09      	ldr	r3, [pc, #36]	@ (800300c <HAL_RCC_ClockConfig+0x1d0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fa42 	bl	8001474 <HAL_InitTick>

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40022000 	.word	0x40022000
 8003000:	40021000 	.word	0x40021000
 8003004:	080052d0 	.word	0x080052d0
 8003008:	20000008 	.word	0x20000008
 800300c:	2000000c 	.word	0x2000000c

08003010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800302a:	4b1e      	ldr	r3, [pc, #120]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b04      	cmp	r3, #4
 8003038:	d002      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x30>
 800303a:	2b08      	cmp	r3, #8
 800303c:	d003      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0x36>
 800303e:	e027      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003040:	4b19      	ldr	r3, [pc, #100]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003042:	613b      	str	r3, [r7, #16]
      break;
 8003044:	e027      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	0c9b      	lsrs	r3, r3, #18
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	4a17      	ldr	r2, [pc, #92]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003050:	5cd3      	ldrb	r3, [r2, r3]
 8003052:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d010      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800305e:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	0c5b      	lsrs	r3, r3, #17
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	4a11      	ldr	r2, [pc, #68]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800306a:	5cd3      	ldrb	r3, [r2, r3]
 800306c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a0d      	ldr	r2, [pc, #52]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003072:	fb03 f202 	mul.w	r2, r3, r2
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	e004      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a0c      	ldr	r2, [pc, #48]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003084:	fb02 f303 	mul.w	r3, r2, r3
 8003088:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	613b      	str	r3, [r7, #16]
      break;
 800308e:	e002      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003092:	613b      	str	r3, [r7, #16]
      break;
 8003094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003096:	693b      	ldr	r3, [r7, #16]
}
 8003098:	4618      	mov	r0, r3
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	007a1200 	.word	0x007a1200
 80030ac:	080052e8 	.word	0x080052e8
 80030b0:	080052f8 	.word	0x080052f8
 80030b4:	003d0900 	.word	0x003d0900

080030b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030bc:	4b02      	ldr	r3, [pc, #8]	@ (80030c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	20000008 	.word	0x20000008

080030cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d0:	f7ff fff2 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4903      	ldr	r1, [pc, #12]	@ (80030f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	080052e0 	.word	0x080052e0

080030f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030f8:	f7ff ffde 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0adb      	lsrs	r3, r3, #11
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4903      	ldr	r1, [pc, #12]	@ (8003118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	080052e0 	.word	0x080052e0

0800311c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003124:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <RCC_Delay+0x34>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0a      	ldr	r2, [pc, #40]	@ (8003154 <RCC_Delay+0x38>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0a5b      	lsrs	r3, r3, #9
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003138:	bf00      	nop
  }
  while (Delay --);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1e5a      	subs	r2, r3, #1
 800313e:	60fa      	str	r2, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f9      	bne.n	8003138 <RCC_Delay+0x1c>
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	20000008 	.word	0x20000008
 8003154:	10624dd3 	.word	0x10624dd3

08003158 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d07d      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003174:	2300      	movs	r3, #0
 8003176:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003178:	4b4f      	ldr	r3, [pc, #316]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10d      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003184:	4b4c      	ldr	r3, [pc, #304]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	4a4b      	ldr	r2, [pc, #300]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800318e:	61d3      	str	r3, [r2, #28]
 8003190:	4b49      	ldr	r3, [pc, #292]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319c:	2301      	movs	r3, #1
 800319e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b46      	ldr	r3, [pc, #280]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d118      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ac:	4b43      	ldr	r3, [pc, #268]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a42      	ldr	r2, [pc, #264]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b8:	f7fe f99e 	bl	80014f8 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	e008      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c0:	f7fe f99a 	bl	80014f8 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	@ 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e06d      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b3a      	ldr	r3, [pc, #232]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031de:	4b36      	ldr	r3, [pc, #216]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d02e      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d027      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031fc:	4b2e      	ldr	r3, [pc, #184]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003204:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003206:	4b2e      	ldr	r3, [pc, #184]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800320c:	4b2c      	ldr	r3, [pc, #176]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003212:	4a29      	ldr	r2, [pc, #164]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d014      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003222:	f7fe f969 	bl	80014f8 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fe f965 	bl	80014f8 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e036      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	4b1d      	ldr	r3, [pc, #116]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ee      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324c:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4917      	ldr	r1, [pc, #92]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	4313      	orrs	r3, r2
 800325c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003264:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	4a13      	ldr	r2, [pc, #76]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800327c:	4b0e      	ldr	r3, [pc, #56]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	490b      	ldr	r1, [pc, #44]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800329a:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4904      	ldr	r1, [pc, #16]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40007000 	.word	0x40007000
 80032c0:	42420440 	.word	0x42420440

080032c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	f200 808a 	bhi.w	8003402 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d045      	beq.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d075      	beq.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80032fa:	e082      	b.n	8003402 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80032fc:	4b46      	ldr	r3, [pc, #280]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003302:	4b45      	ldr	r3, [pc, #276]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d07b      	beq.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	0c9b      	lsrs	r3, r3, #18
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	4a41      	ldr	r2, [pc, #260]	@ (800341c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003318:	5cd3      	ldrb	r3, [r2, r3]
 800331a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d015      	beq.n	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003326:	4b3c      	ldr	r3, [pc, #240]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	0c5b      	lsrs	r3, r3, #17
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	4a3b      	ldr	r2, [pc, #236]	@ (8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003340:	4a38      	ldr	r2, [pc, #224]	@ (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	fbb2 f2f3 	udiv	r2, r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	e004      	b.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4a34      	ldr	r2, [pc, #208]	@ (8003428 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800335c:	4b2e      	ldr	r3, [pc, #184]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003368:	d102      	bne.n	8003370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	61bb      	str	r3, [r7, #24]
      break;
 800336e:	e04a      	b.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4a2d      	ldr	r2, [pc, #180]	@ (800342c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	61bb      	str	r3, [r7, #24]
      break;
 800337e:	e042      	b.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003380:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003390:	d108      	bne.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800339c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	e01f      	b.n	80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ae:	d109      	bne.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80033b0:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80033bc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	e00f      	b.n	80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033ce:	d11c      	bne.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80033d0:	4b11      	ldr	r3, [pc, #68]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d016      	beq.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80033dc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80033e0:	61bb      	str	r3, [r7, #24]
      break;
 80033e2:	e012      	b.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80033e4:	e011      	b.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80033e6:	f7ff fe85 	bl	80030f4 <HAL_RCC_GetPCLK2Freq>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	0b9b      	lsrs	r3, r3, #14
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	3301      	adds	r3, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fe:	61bb      	str	r3, [r7, #24]
      break;
 8003400:	e004      	b.n	800340c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003402:	bf00      	nop
 8003404:	e002      	b.n	800340c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800340a:	bf00      	nop
    }
  }
  return (frequency);
 800340c:	69bb      	ldr	r3, [r7, #24]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	080052fc 	.word	0x080052fc
 8003420:	0800530c 	.word	0x0800530c
 8003424:	007a1200 	.word	0x007a1200
 8003428:	003d0900 	.word	0x003d0900
 800342c:	aaaaaaab 	.word	0xaaaaaaab

08003430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e076      	b.n	8003530 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d108      	bne.n	800345c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003452:	d009      	beq.n	8003468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
 800345a:	e005      	b.n	8003468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd fd5e 	bl	8000f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800349e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ec:	ea42 0103 	orr.w	r1, r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	0c1a      	lsrs	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f002 0204 	and.w	r2, r2, #4
 800350e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800351e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003548:	f7fd ffd6 	bl	80014f8 <HAL_GetTick>
 800354c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d001      	beq.n	8003562 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
 8003560:	e12a      	b.n	80037b8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_SPI_Transmit+0x36>
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e122      	b.n	80037b8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_SPI_Transmit+0x48>
 800357c:	2302      	movs	r3, #2
 800357e:	e11b      	b.n	80037b8 <HAL_SPI_Transmit+0x280>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2203      	movs	r2, #3
 800358c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	88fa      	ldrh	r2, [r7, #6]
 80035a6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ce:	d10f      	bne.n	80035f0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fa:	2b40      	cmp	r3, #64	@ 0x40
 80035fc:	d007      	beq.n	800360e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003616:	d152      	bne.n	80036be <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_SPI_Transmit+0xee>
 8003620:	8b7b      	ldrh	r3, [r7, #26]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d145      	bne.n	80036b2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	881a      	ldrh	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	1c9a      	adds	r2, r3, #2
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800364a:	e032      	b.n	80036b2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d112      	bne.n	8003680 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	881a      	ldrh	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	1c9a      	adds	r2, r3, #2
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800367e:	e018      	b.n	80036b2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003680:	f7fd ff3a 	bl	80014f8 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d803      	bhi.n	8003698 <HAL_SPI_Transmit+0x160>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003696:	d102      	bne.n	800369e <HAL_SPI_Transmit+0x166>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e082      	b.n	80037b8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1c7      	bne.n	800364c <HAL_SPI_Transmit+0x114>
 80036bc:	e053      	b.n	8003766 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HAL_SPI_Transmit+0x194>
 80036c6:	8b7b      	ldrh	r3, [r7, #26]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d147      	bne.n	800375c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	330c      	adds	r3, #12
 80036d6:	7812      	ldrb	r2, [r2, #0]
 80036d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036f2:	e033      	b.n	800375c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d113      	bne.n	800372a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003728:	e018      	b.n	800375c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800372a:	f7fd fee5 	bl	80014f8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d803      	bhi.n	8003742 <HAL_SPI_Transmit+0x20a>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d102      	bne.n	8003748 <HAL_SPI_Transmit+0x210>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e02d      	b.n	80037b8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1c6      	bne.n	80036f4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	6839      	ldr	r1, [r7, #0]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fbc4 	bl	8003ef8 <SPI_EndRxTxTransaction>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d001      	beq.n	80037e0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
 80037de:	e104      	b.n	80039ea <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037e8:	d112      	bne.n	8003810 <HAL_SPI_Receive+0x50>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10e      	bne.n	8003810 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2204      	movs	r2, #4
 80037f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f8f3 	bl	80039f2 <HAL_SPI_TransmitReceive>
 800380c:	4603      	mov	r3, r0
 800380e:	e0ec      	b.n	80039ea <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003810:	f7fd fe72 	bl	80014f8 <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_SPI_Receive+0x62>
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0e1      	b.n	80039ea <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_SPI_Receive+0x74>
 8003830:	2302      	movs	r3, #2
 8003832:	e0da      	b.n	80039ea <HAL_SPI_Receive+0x22a>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2204      	movs	r2, #4
 8003840:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	88fa      	ldrh	r2, [r7, #6]
 800385a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003882:	d10f      	bne.n	80038a4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003892:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ae:	2b40      	cmp	r3, #64	@ 0x40
 80038b0:	d007      	beq.n	80038c2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d170      	bne.n	80039ac <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038ca:	e035      	b.n	8003938 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d115      	bne.n	8003906 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f103 020c 	add.w	r2, r3, #12
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e6:	7812      	ldrb	r2, [r2, #0]
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003904:	e018      	b.n	8003938 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003906:	f7fd fdf7 	bl	80014f8 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d803      	bhi.n	800391e <HAL_SPI_Receive+0x15e>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d102      	bne.n	8003924 <HAL_SPI_Receive+0x164>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e058      	b.n	80039ea <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1c4      	bne.n	80038cc <HAL_SPI_Receive+0x10c>
 8003942:	e038      	b.n	80039b6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b01      	cmp	r3, #1
 8003950:	d113      	bne.n	800397a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395c:	b292      	uxth	r2, r2
 800395e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003964:	1c9a      	adds	r2, r3, #2
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003978:	e018      	b.n	80039ac <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800397a:	f7fd fdbd 	bl	80014f8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d803      	bhi.n	8003992 <HAL_SPI_Receive+0x1d2>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d102      	bne.n	8003998 <HAL_SPI_Receive+0x1d8>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e01e      	b.n	80039ea <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1c6      	bne.n	8003944 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	6839      	ldr	r1, [r7, #0]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fa4a 	bl	8003e54 <SPI_EndRxTransaction>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
  }
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b08a      	sub	sp, #40	@ 0x28
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a00:	2301      	movs	r3, #1
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a04:	f7fd fd78 	bl	80014f8 <HAL_GetTick>
 8003a08:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a10:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a18:	887b      	ldrh	r3, [r7, #2]
 8003a1a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a1c:	7ffb      	ldrb	r3, [r7, #31]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d00c      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x4a>
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a28:	d106      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x46>
 8003a32:	7ffb      	ldrb	r3, [r7, #31]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d001      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e17f      	b.n	8003d3c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x5c>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x5c>
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e174      	b.n	8003d3c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x6e>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e16d      	b.n	8003d3c <HAL_SPI_TransmitReceive+0x34a>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d003      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2205      	movs	r2, #5
 8003a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	887a      	ldrh	r2, [r7, #2]
 8003a92:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	887a      	ldrh	r2, [r7, #2]
 8003a9e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	d007      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ad8:	d17e      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_SPI_TransmitReceive+0xf6>
 8003ae2:	8afb      	ldrh	r3, [r7, #22]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d16c      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aec:	881a      	ldrh	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b0c:	e059      	b.n	8003bc2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d11b      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x162>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d016      	beq.n	8003b54 <HAL_SPI_TransmitReceive+0x162>
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d113      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d119      	bne.n	8003b96 <HAL_SPI_TransmitReceive+0x1a4>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d014      	beq.n	8003b96 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	b292      	uxth	r2, r2
 8003b78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7e:	1c9a      	adds	r2, r3, #2
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b92:	2301      	movs	r3, #1
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b96:	f7fd fcaf 	bl	80014f8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d80d      	bhi.n	8003bc2 <HAL_SPI_TransmitReceive+0x1d0>
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d009      	beq.n	8003bc2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0bc      	b.n	8003d3c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1a0      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x11c>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d19b      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x11c>
 8003bd6:	e082      	b.n	8003cde <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_TransmitReceive+0x1f4>
 8003be0:	8afb      	ldrh	r3, [r7, #22]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d171      	bne.n	8003cca <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	7812      	ldrb	r2, [r2, #0]
 8003bf2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c0c:	e05d      	b.n	8003cca <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d11c      	bne.n	8003c56 <HAL_SPI_TransmitReceive+0x264>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d017      	beq.n	8003c56 <HAL_SPI_TransmitReceive+0x264>
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d114      	bne.n	8003c56 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	7812      	ldrb	r2, [r2, #0]
 8003c38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d119      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x2a6>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d014      	beq.n	8003c98 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c94:	2301      	movs	r3, #1
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c98:	f7fd fc2e 	bl	80014f8 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d803      	bhi.n	8003cb0 <HAL_SPI_TransmitReceive+0x2be>
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d102      	bne.n	8003cb6 <HAL_SPI_TransmitReceive+0x2c4>
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e038      	b.n	8003d3c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d19c      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x21c>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d197      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cde:	6a3a      	ldr	r2, [r7, #32]
 8003ce0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f908 	bl	8003ef8 <SPI_EndRxTxTransaction>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e01d      	b.n	8003d3c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3728      	adds	r7, #40	@ 0x28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d54:	f7fd fbd0 	bl	80014f8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	4413      	add	r3, r2
 8003d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d64:	f7fd fbc8 	bl	80014f8 <HAL_GetTick>
 8003d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d6a:	4b39      	ldr	r3, [pc, #228]	@ (8003e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	015b      	lsls	r3, r3, #5
 8003d70:	0d1b      	lsrs	r3, r3, #20
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7a:	e054      	b.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d050      	beq.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d84:	f7fd fbb8 	bl	80014f8 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d902      	bls.n	8003d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d13d      	bne.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003db2:	d111      	bne.n	8003dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dbc:	d004      	beq.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc6:	d107      	bne.n	8003dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de0:	d10f      	bne.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e017      	b.n	8003e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d19b      	bne.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000008 	.word	0x20000008

08003e54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e68:	d111      	bne.n	8003e8e <SPI_EndRxTransaction+0x3a>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e72:	d004      	beq.n	8003e7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e7c:	d107      	bne.n	8003e8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e8c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e96:	d117      	bne.n	8003ec8 <SPI_EndRxTransaction+0x74>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea0:	d112      	bne.n	8003ec8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2101      	movs	r1, #1
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff ff49 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01a      	beq.n	8003eee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e013      	b.n	8003ef0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2180      	movs	r1, #128	@ 0x80
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff ff36 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee2:	f043 0220 	orr.w	r2, r3, #32
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e000      	b.n	8003ef0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff ff18 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	f043 0220 	orr.w	r2, r3, #32
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e013      	b.n	8003f52 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2200      	movs	r2, #0
 8003f32:	2180      	movs	r1, #128	@ 0x80
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff ff05 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f44:	f043 0220 	orr.w	r2, r3, #32
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e000      	b.n	8003f52 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e042      	b.n	8003ff2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fd f9f1 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2224      	movs	r2, #36	@ 0x24
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f9c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f972 	bl	8004288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fb2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fc2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b08a      	sub	sp, #40	@ 0x28
 8003ffe:	af02      	add	r7, sp, #8
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b20      	cmp	r3, #32
 8004018:	d175      	bne.n	8004106 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_UART_Transmit+0x2c>
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e06e      	b.n	8004108 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2221      	movs	r2, #33	@ 0x21
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004038:	f7fd fa5e 	bl	80014f8 <HAL_GetTick>
 800403c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	88fa      	ldrh	r2, [r7, #6]
 8004048:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004052:	d108      	bne.n	8004066 <HAL_UART_Transmit+0x6c>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	e003      	b.n	800406e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800406e:	e02e      	b.n	80040ce <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2200      	movs	r2, #0
 8004078:	2180      	movs	r1, #128	@ 0x80
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f848 	bl	8004110 <UART_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e03a      	b.n	8004108 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	3302      	adds	r3, #2
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	e007      	b.n	80040c0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	781a      	ldrb	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3301      	adds	r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1cb      	bne.n	8004070 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2200      	movs	r2, #0
 80040e0:	2140      	movs	r1, #64	@ 0x40
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f814 	bl	8004110 <UART_WaitOnFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e006      	b.n	8004108 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004120:	e03b      	b.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d037      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412a:	f7fd f9e5 	bl	80014f8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	6a3a      	ldr	r2, [r7, #32]
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <UART_WaitOnFlagUntilTimeout+0x30>
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e03a      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d023      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b80      	cmp	r3, #128	@ 0x80
 8004156:	d020      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b40      	cmp	r3, #64	@ 0x40
 800415c:	d01d      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b08      	cmp	r3, #8
 800416a:	d116      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f81d 	bl	80041c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2208      	movs	r2, #8
 800418c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e00f      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d0b4      	beq.n	8004122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b095      	sub	sp, #84	@ 0x54
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	330c      	adds	r3, #12
 80041d0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80041ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e5      	bne.n	80041ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3314      	adds	r3, #20
 8004204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	61fb      	str	r3, [r7, #28]
   return(result);
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f023 0301 	bic.w	r3, r3, #1
 8004214:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3314      	adds	r3, #20
 800421c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800421e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004220:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004224:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e5      	bne.n	80041fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	2b01      	cmp	r3, #1
 8004238:	d119      	bne.n	800426e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	330c      	adds	r3, #12
 8004240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	60bb      	str	r3, [r7, #8]
   return(result);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f023 0310 	bic.w	r3, r3, #16
 8004250:	647b      	str	r3, [r7, #68]	@ 0x44
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	330c      	adds	r3, #12
 8004258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800425a:	61ba      	str	r2, [r7, #24]
 800425c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	6979      	ldr	r1, [r7, #20]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	613b      	str	r3, [r7, #16]
   return(result);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e5      	bne.n	800423a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800427c:	bf00      	nop
 800427e:	3754      	adds	r7, #84	@ 0x54
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
	...

08004288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80042c2:	f023 030c 	bic.w	r3, r3, #12
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	430b      	orrs	r3, r1
 80042ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2c      	ldr	r2, [pc, #176]	@ (800439c <UART_SetConfig+0x114>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042f0:	f7fe ff00 	bl	80030f4 <HAL_RCC_GetPCLK2Freq>
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	e002      	b.n	80042fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7fe fee8 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 80042fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009a      	lsls	r2, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <UART_SetConfig+0x118>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	0119      	lsls	r1, r3, #4
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009a      	lsls	r2, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	fbb2 f2f3 	udiv	r2, r2, r3
 8004334:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <UART_SetConfig+0x118>)
 8004336:	fba3 0302 	umull	r0, r3, r3, r2
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2064      	movs	r0, #100	@ 0x64
 800433e:	fb00 f303 	mul.w	r3, r0, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	3332      	adds	r3, #50	@ 0x32
 8004348:	4a15      	ldr	r2, [pc, #84]	@ (80043a0 <UART_SetConfig+0x118>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004354:	4419      	add	r1, r3
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009a      	lsls	r2, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	fbb2 f2f3 	udiv	r2, r2, r3
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <UART_SetConfig+0x118>)
 800436e:	fba3 0302 	umull	r0, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2064      	movs	r0, #100	@ 0x64
 8004376:	fb00 f303 	mul.w	r3, r0, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	3332      	adds	r3, #50	@ 0x32
 8004380:	4a07      	ldr	r2, [pc, #28]	@ (80043a0 <UART_SetConfig+0x118>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	440a      	add	r2, r1
 8004392:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40013800 	.word	0x40013800
 80043a0:	51eb851f 	.word	0x51eb851f

080043a4 <std>:
 80043a4:	2300      	movs	r3, #0
 80043a6:	b510      	push	{r4, lr}
 80043a8:	4604      	mov	r4, r0
 80043aa:	e9c0 3300 	strd	r3, r3, [r0]
 80043ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043b2:	6083      	str	r3, [r0, #8]
 80043b4:	8181      	strh	r1, [r0, #12]
 80043b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80043b8:	81c2      	strh	r2, [r0, #14]
 80043ba:	6183      	str	r3, [r0, #24]
 80043bc:	4619      	mov	r1, r3
 80043be:	2208      	movs	r2, #8
 80043c0:	305c      	adds	r0, #92	@ 0x5c
 80043c2:	f000 f99b 	bl	80046fc <memset>
 80043c6:	4b0d      	ldr	r3, [pc, #52]	@ (80043fc <std+0x58>)
 80043c8:	6224      	str	r4, [r4, #32]
 80043ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80043cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004400 <std+0x5c>)
 80043ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <std+0x60>)
 80043d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <std+0x64>)
 80043d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80043d8:	4b0c      	ldr	r3, [pc, #48]	@ (800440c <std+0x68>)
 80043da:	429c      	cmp	r4, r3
 80043dc:	d006      	beq.n	80043ec <std+0x48>
 80043de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043e2:	4294      	cmp	r4, r2
 80043e4:	d002      	beq.n	80043ec <std+0x48>
 80043e6:	33d0      	adds	r3, #208	@ 0xd0
 80043e8:	429c      	cmp	r4, r3
 80043ea:	d105      	bne.n	80043f8 <std+0x54>
 80043ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f4:	f000 b9fa 	b.w	80047ec <__retarget_lock_init_recursive>
 80043f8:	bd10      	pop	{r4, pc}
 80043fa:	bf00      	nop
 80043fc:	0800454d 	.word	0x0800454d
 8004400:	0800456f 	.word	0x0800456f
 8004404:	080045a7 	.word	0x080045a7
 8004408:	080045cb 	.word	0x080045cb
 800440c:	200001c4 	.word	0x200001c4

08004410 <stdio_exit_handler>:
 8004410:	4a02      	ldr	r2, [pc, #8]	@ (800441c <stdio_exit_handler+0xc>)
 8004412:	4903      	ldr	r1, [pc, #12]	@ (8004420 <stdio_exit_handler+0x10>)
 8004414:	4803      	ldr	r0, [pc, #12]	@ (8004424 <stdio_exit_handler+0x14>)
 8004416:	f000 b869 	b.w	80044ec <_fwalk_sglue>
 800441a:	bf00      	nop
 800441c:	20000014 	.word	0x20000014
 8004420:	08005081 	.word	0x08005081
 8004424:	20000024 	.word	0x20000024

08004428 <cleanup_stdio>:
 8004428:	6841      	ldr	r1, [r0, #4]
 800442a:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <cleanup_stdio+0x34>)
 800442c:	b510      	push	{r4, lr}
 800442e:	4299      	cmp	r1, r3
 8004430:	4604      	mov	r4, r0
 8004432:	d001      	beq.n	8004438 <cleanup_stdio+0x10>
 8004434:	f000 fe24 	bl	8005080 <_fflush_r>
 8004438:	68a1      	ldr	r1, [r4, #8]
 800443a:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <cleanup_stdio+0x38>)
 800443c:	4299      	cmp	r1, r3
 800443e:	d002      	beq.n	8004446 <cleanup_stdio+0x1e>
 8004440:	4620      	mov	r0, r4
 8004442:	f000 fe1d 	bl	8005080 <_fflush_r>
 8004446:	68e1      	ldr	r1, [r4, #12]
 8004448:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <cleanup_stdio+0x3c>)
 800444a:	4299      	cmp	r1, r3
 800444c:	d004      	beq.n	8004458 <cleanup_stdio+0x30>
 800444e:	4620      	mov	r0, r4
 8004450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004454:	f000 be14 	b.w	8005080 <_fflush_r>
 8004458:	bd10      	pop	{r4, pc}
 800445a:	bf00      	nop
 800445c:	200001c4 	.word	0x200001c4
 8004460:	2000022c 	.word	0x2000022c
 8004464:	20000294 	.word	0x20000294

08004468 <global_stdio_init.part.0>:
 8004468:	b510      	push	{r4, lr}
 800446a:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <global_stdio_init.part.0+0x30>)
 800446c:	4c0b      	ldr	r4, [pc, #44]	@ (800449c <global_stdio_init.part.0+0x34>)
 800446e:	4a0c      	ldr	r2, [pc, #48]	@ (80044a0 <global_stdio_init.part.0+0x38>)
 8004470:	4620      	mov	r0, r4
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	2104      	movs	r1, #4
 8004476:	2200      	movs	r2, #0
 8004478:	f7ff ff94 	bl	80043a4 <std>
 800447c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004480:	2201      	movs	r2, #1
 8004482:	2109      	movs	r1, #9
 8004484:	f7ff ff8e 	bl	80043a4 <std>
 8004488:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800448c:	2202      	movs	r2, #2
 800448e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004492:	2112      	movs	r1, #18
 8004494:	f7ff bf86 	b.w	80043a4 <std>
 8004498:	200002fc 	.word	0x200002fc
 800449c:	200001c4 	.word	0x200001c4
 80044a0:	08004411 	.word	0x08004411

080044a4 <__sfp_lock_acquire>:
 80044a4:	4801      	ldr	r0, [pc, #4]	@ (80044ac <__sfp_lock_acquire+0x8>)
 80044a6:	f000 b9a2 	b.w	80047ee <__retarget_lock_acquire_recursive>
 80044aa:	bf00      	nop
 80044ac:	20000305 	.word	0x20000305

080044b0 <__sfp_lock_release>:
 80044b0:	4801      	ldr	r0, [pc, #4]	@ (80044b8 <__sfp_lock_release+0x8>)
 80044b2:	f000 b99d 	b.w	80047f0 <__retarget_lock_release_recursive>
 80044b6:	bf00      	nop
 80044b8:	20000305 	.word	0x20000305

080044bc <__sinit>:
 80044bc:	b510      	push	{r4, lr}
 80044be:	4604      	mov	r4, r0
 80044c0:	f7ff fff0 	bl	80044a4 <__sfp_lock_acquire>
 80044c4:	6a23      	ldr	r3, [r4, #32]
 80044c6:	b11b      	cbz	r3, 80044d0 <__sinit+0x14>
 80044c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044cc:	f7ff bff0 	b.w	80044b0 <__sfp_lock_release>
 80044d0:	4b04      	ldr	r3, [pc, #16]	@ (80044e4 <__sinit+0x28>)
 80044d2:	6223      	str	r3, [r4, #32]
 80044d4:	4b04      	ldr	r3, [pc, #16]	@ (80044e8 <__sinit+0x2c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f5      	bne.n	80044c8 <__sinit+0xc>
 80044dc:	f7ff ffc4 	bl	8004468 <global_stdio_init.part.0>
 80044e0:	e7f2      	b.n	80044c8 <__sinit+0xc>
 80044e2:	bf00      	nop
 80044e4:	08004429 	.word	0x08004429
 80044e8:	200002fc 	.word	0x200002fc

080044ec <_fwalk_sglue>:
 80044ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f0:	4607      	mov	r7, r0
 80044f2:	4688      	mov	r8, r1
 80044f4:	4614      	mov	r4, r2
 80044f6:	2600      	movs	r6, #0
 80044f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004500:	d505      	bpl.n	800450e <_fwalk_sglue+0x22>
 8004502:	6824      	ldr	r4, [r4, #0]
 8004504:	2c00      	cmp	r4, #0
 8004506:	d1f7      	bne.n	80044f8 <_fwalk_sglue+0xc>
 8004508:	4630      	mov	r0, r6
 800450a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800450e:	89ab      	ldrh	r3, [r5, #12]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d907      	bls.n	8004524 <_fwalk_sglue+0x38>
 8004514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004518:	3301      	adds	r3, #1
 800451a:	d003      	beq.n	8004524 <_fwalk_sglue+0x38>
 800451c:	4629      	mov	r1, r5
 800451e:	4638      	mov	r0, r7
 8004520:	47c0      	blx	r8
 8004522:	4306      	orrs	r6, r0
 8004524:	3568      	adds	r5, #104	@ 0x68
 8004526:	e7e9      	b.n	80044fc <_fwalk_sglue+0x10>

08004528 <iprintf>:
 8004528:	b40f      	push	{r0, r1, r2, r3}
 800452a:	b507      	push	{r0, r1, r2, lr}
 800452c:	4906      	ldr	r1, [pc, #24]	@ (8004548 <iprintf+0x20>)
 800452e:	ab04      	add	r3, sp, #16
 8004530:	6808      	ldr	r0, [r1, #0]
 8004532:	f853 2b04 	ldr.w	r2, [r3], #4
 8004536:	6881      	ldr	r1, [r0, #8]
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	f000 fa79 	bl	8004a30 <_vfiprintf_r>
 800453e:	b003      	add	sp, #12
 8004540:	f85d eb04 	ldr.w	lr, [sp], #4
 8004544:	b004      	add	sp, #16
 8004546:	4770      	bx	lr
 8004548:	20000020 	.word	0x20000020

0800454c <__sread>:
 800454c:	b510      	push	{r4, lr}
 800454e:	460c      	mov	r4, r1
 8004550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004554:	f000 f8fc 	bl	8004750 <_read_r>
 8004558:	2800      	cmp	r0, #0
 800455a:	bfab      	itete	ge
 800455c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800455e:	89a3      	ldrhlt	r3, [r4, #12]
 8004560:	181b      	addge	r3, r3, r0
 8004562:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004566:	bfac      	ite	ge
 8004568:	6563      	strge	r3, [r4, #84]	@ 0x54
 800456a:	81a3      	strhlt	r3, [r4, #12]
 800456c:	bd10      	pop	{r4, pc}

0800456e <__swrite>:
 800456e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004572:	461f      	mov	r7, r3
 8004574:	898b      	ldrh	r3, [r1, #12]
 8004576:	4605      	mov	r5, r0
 8004578:	05db      	lsls	r3, r3, #23
 800457a:	460c      	mov	r4, r1
 800457c:	4616      	mov	r6, r2
 800457e:	d505      	bpl.n	800458c <__swrite+0x1e>
 8004580:	2302      	movs	r3, #2
 8004582:	2200      	movs	r2, #0
 8004584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004588:	f000 f8d0 	bl	800472c <_lseek_r>
 800458c:	89a3      	ldrh	r3, [r4, #12]
 800458e:	4632      	mov	r2, r6
 8004590:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	4628      	mov	r0, r5
 8004598:	463b      	mov	r3, r7
 800459a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800459e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045a2:	f000 b8e7 	b.w	8004774 <_write_r>

080045a6 <__sseek>:
 80045a6:	b510      	push	{r4, lr}
 80045a8:	460c      	mov	r4, r1
 80045aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ae:	f000 f8bd 	bl	800472c <_lseek_r>
 80045b2:	1c43      	adds	r3, r0, #1
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	bf15      	itete	ne
 80045b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045c2:	81a3      	strheq	r3, [r4, #12]
 80045c4:	bf18      	it	ne
 80045c6:	81a3      	strhne	r3, [r4, #12]
 80045c8:	bd10      	pop	{r4, pc}

080045ca <__sclose>:
 80045ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ce:	f000 b89d 	b.w	800470c <_close_r>

080045d2 <__swbuf_r>:
 80045d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d4:	460e      	mov	r6, r1
 80045d6:	4614      	mov	r4, r2
 80045d8:	4605      	mov	r5, r0
 80045da:	b118      	cbz	r0, 80045e4 <__swbuf_r+0x12>
 80045dc:	6a03      	ldr	r3, [r0, #32]
 80045de:	b90b      	cbnz	r3, 80045e4 <__swbuf_r+0x12>
 80045e0:	f7ff ff6c 	bl	80044bc <__sinit>
 80045e4:	69a3      	ldr	r3, [r4, #24]
 80045e6:	60a3      	str	r3, [r4, #8]
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	071a      	lsls	r2, r3, #28
 80045ec:	d501      	bpl.n	80045f2 <__swbuf_r+0x20>
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	b943      	cbnz	r3, 8004604 <__swbuf_r+0x32>
 80045f2:	4621      	mov	r1, r4
 80045f4:	4628      	mov	r0, r5
 80045f6:	f000 f82b 	bl	8004650 <__swsetup_r>
 80045fa:	b118      	cbz	r0, 8004604 <__swbuf_r+0x32>
 80045fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004600:	4638      	mov	r0, r7
 8004602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	6922      	ldr	r2, [r4, #16]
 8004608:	b2f6      	uxtb	r6, r6
 800460a:	1a98      	subs	r0, r3, r2
 800460c:	6963      	ldr	r3, [r4, #20]
 800460e:	4637      	mov	r7, r6
 8004610:	4283      	cmp	r3, r0
 8004612:	dc05      	bgt.n	8004620 <__swbuf_r+0x4e>
 8004614:	4621      	mov	r1, r4
 8004616:	4628      	mov	r0, r5
 8004618:	f000 fd32 	bl	8005080 <_fflush_r>
 800461c:	2800      	cmp	r0, #0
 800461e:	d1ed      	bne.n	80045fc <__swbuf_r+0x2a>
 8004620:	68a3      	ldr	r3, [r4, #8]
 8004622:	3b01      	subs	r3, #1
 8004624:	60a3      	str	r3, [r4, #8]
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	6022      	str	r2, [r4, #0]
 800462c:	701e      	strb	r6, [r3, #0]
 800462e:	6962      	ldr	r2, [r4, #20]
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	429a      	cmp	r2, r3
 8004634:	d004      	beq.n	8004640 <__swbuf_r+0x6e>
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	07db      	lsls	r3, r3, #31
 800463a:	d5e1      	bpl.n	8004600 <__swbuf_r+0x2e>
 800463c:	2e0a      	cmp	r6, #10
 800463e:	d1df      	bne.n	8004600 <__swbuf_r+0x2e>
 8004640:	4621      	mov	r1, r4
 8004642:	4628      	mov	r0, r5
 8004644:	f000 fd1c 	bl	8005080 <_fflush_r>
 8004648:	2800      	cmp	r0, #0
 800464a:	d0d9      	beq.n	8004600 <__swbuf_r+0x2e>
 800464c:	e7d6      	b.n	80045fc <__swbuf_r+0x2a>
	...

08004650 <__swsetup_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4b29      	ldr	r3, [pc, #164]	@ (80046f8 <__swsetup_r+0xa8>)
 8004654:	4605      	mov	r5, r0
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	460c      	mov	r4, r1
 800465a:	b118      	cbz	r0, 8004664 <__swsetup_r+0x14>
 800465c:	6a03      	ldr	r3, [r0, #32]
 800465e:	b90b      	cbnz	r3, 8004664 <__swsetup_r+0x14>
 8004660:	f7ff ff2c 	bl	80044bc <__sinit>
 8004664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004668:	0719      	lsls	r1, r3, #28
 800466a:	d422      	bmi.n	80046b2 <__swsetup_r+0x62>
 800466c:	06da      	lsls	r2, r3, #27
 800466e:	d407      	bmi.n	8004680 <__swsetup_r+0x30>
 8004670:	2209      	movs	r2, #9
 8004672:	602a      	str	r2, [r5, #0]
 8004674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	e033      	b.n	80046e8 <__swsetup_r+0x98>
 8004680:	0758      	lsls	r0, r3, #29
 8004682:	d512      	bpl.n	80046aa <__swsetup_r+0x5a>
 8004684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004686:	b141      	cbz	r1, 800469a <__swsetup_r+0x4a>
 8004688:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800468c:	4299      	cmp	r1, r3
 800468e:	d002      	beq.n	8004696 <__swsetup_r+0x46>
 8004690:	4628      	mov	r0, r5
 8004692:	f000 f8af 	bl	80047f4 <_free_r>
 8004696:	2300      	movs	r3, #0
 8004698:	6363      	str	r3, [r4, #52]	@ 0x34
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046a0:	81a3      	strh	r3, [r4, #12]
 80046a2:	2300      	movs	r3, #0
 80046a4:	6063      	str	r3, [r4, #4]
 80046a6:	6923      	ldr	r3, [r4, #16]
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	f043 0308 	orr.w	r3, r3, #8
 80046b0:	81a3      	strh	r3, [r4, #12]
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	b94b      	cbnz	r3, 80046ca <__swsetup_r+0x7a>
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c0:	d003      	beq.n	80046ca <__swsetup_r+0x7a>
 80046c2:	4621      	mov	r1, r4
 80046c4:	4628      	mov	r0, r5
 80046c6:	f000 fd28 	bl	800511a <__smakebuf_r>
 80046ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ce:	f013 0201 	ands.w	r2, r3, #1
 80046d2:	d00a      	beq.n	80046ea <__swsetup_r+0x9a>
 80046d4:	2200      	movs	r2, #0
 80046d6:	60a2      	str	r2, [r4, #8]
 80046d8:	6962      	ldr	r2, [r4, #20]
 80046da:	4252      	negs	r2, r2
 80046dc:	61a2      	str	r2, [r4, #24]
 80046de:	6922      	ldr	r2, [r4, #16]
 80046e0:	b942      	cbnz	r2, 80046f4 <__swsetup_r+0xa4>
 80046e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80046e6:	d1c5      	bne.n	8004674 <__swsetup_r+0x24>
 80046e8:	bd38      	pop	{r3, r4, r5, pc}
 80046ea:	0799      	lsls	r1, r3, #30
 80046ec:	bf58      	it	pl
 80046ee:	6962      	ldrpl	r2, [r4, #20]
 80046f0:	60a2      	str	r2, [r4, #8]
 80046f2:	e7f4      	b.n	80046de <__swsetup_r+0x8e>
 80046f4:	2000      	movs	r0, #0
 80046f6:	e7f7      	b.n	80046e8 <__swsetup_r+0x98>
 80046f8:	20000020 	.word	0x20000020

080046fc <memset>:
 80046fc:	4603      	mov	r3, r0
 80046fe:	4402      	add	r2, r0
 8004700:	4293      	cmp	r3, r2
 8004702:	d100      	bne.n	8004706 <memset+0xa>
 8004704:	4770      	bx	lr
 8004706:	f803 1b01 	strb.w	r1, [r3], #1
 800470a:	e7f9      	b.n	8004700 <memset+0x4>

0800470c <_close_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	2300      	movs	r3, #0
 8004710:	4d05      	ldr	r5, [pc, #20]	@ (8004728 <_close_r+0x1c>)
 8004712:	4604      	mov	r4, r0
 8004714:	4608      	mov	r0, r1
 8004716:	602b      	str	r3, [r5, #0]
 8004718:	f7fc fd8f 	bl	800123a <_close>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d102      	bne.n	8004726 <_close_r+0x1a>
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	b103      	cbz	r3, 8004726 <_close_r+0x1a>
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	bd38      	pop	{r3, r4, r5, pc}
 8004728:	20000300 	.word	0x20000300

0800472c <_lseek_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4604      	mov	r4, r0
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	2200      	movs	r2, #0
 8004736:	4d05      	ldr	r5, [pc, #20]	@ (800474c <_lseek_r+0x20>)
 8004738:	602a      	str	r2, [r5, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	f7fc fda1 	bl	8001282 <_lseek>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_lseek_r+0x1e>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	b103      	cbz	r3, 800474a <_lseek_r+0x1e>
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	20000300 	.word	0x20000300

08004750 <_read_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	4611      	mov	r1, r2
 8004758:	2200      	movs	r2, #0
 800475a:	4d05      	ldr	r5, [pc, #20]	@ (8004770 <_read_r+0x20>)
 800475c:	602a      	str	r2, [r5, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	f7fc fd32 	bl	80011c8 <_read>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	d102      	bne.n	800476e <_read_r+0x1e>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	b103      	cbz	r3, 800476e <_read_r+0x1e>
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	20000300 	.word	0x20000300

08004774 <_write_r>:
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4604      	mov	r4, r0
 8004778:	4608      	mov	r0, r1
 800477a:	4611      	mov	r1, r2
 800477c:	2200      	movs	r2, #0
 800477e:	4d05      	ldr	r5, [pc, #20]	@ (8004794 <_write_r+0x20>)
 8004780:	602a      	str	r2, [r5, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	f7fc fd3d 	bl	8001202 <_write>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d102      	bne.n	8004792 <_write_r+0x1e>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	b103      	cbz	r3, 8004792 <_write_r+0x1e>
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	20000300 	.word	0x20000300

08004798 <__errno>:
 8004798:	4b01      	ldr	r3, [pc, #4]	@ (80047a0 <__errno+0x8>)
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000020 	.word	0x20000020

080047a4 <__libc_init_array>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	2600      	movs	r6, #0
 80047a8:	4d0c      	ldr	r5, [pc, #48]	@ (80047dc <__libc_init_array+0x38>)
 80047aa:	4c0d      	ldr	r4, [pc, #52]	@ (80047e0 <__libc_init_array+0x3c>)
 80047ac:	1b64      	subs	r4, r4, r5
 80047ae:	10a4      	asrs	r4, r4, #2
 80047b0:	42a6      	cmp	r6, r4
 80047b2:	d109      	bne.n	80047c8 <__libc_init_array+0x24>
 80047b4:	f000 fd2e 	bl	8005214 <_init>
 80047b8:	2600      	movs	r6, #0
 80047ba:	4d0a      	ldr	r5, [pc, #40]	@ (80047e4 <__libc_init_array+0x40>)
 80047bc:	4c0a      	ldr	r4, [pc, #40]	@ (80047e8 <__libc_init_array+0x44>)
 80047be:	1b64      	subs	r4, r4, r5
 80047c0:	10a4      	asrs	r4, r4, #2
 80047c2:	42a6      	cmp	r6, r4
 80047c4:	d105      	bne.n	80047d2 <__libc_init_array+0x2e>
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
 80047c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047cc:	4798      	blx	r3
 80047ce:	3601      	adds	r6, #1
 80047d0:	e7ee      	b.n	80047b0 <__libc_init_array+0xc>
 80047d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d6:	4798      	blx	r3
 80047d8:	3601      	adds	r6, #1
 80047da:	e7f2      	b.n	80047c2 <__libc_init_array+0x1e>
 80047dc:	08005344 	.word	0x08005344
 80047e0:	08005344 	.word	0x08005344
 80047e4:	08005344 	.word	0x08005344
 80047e8:	08005348 	.word	0x08005348

080047ec <__retarget_lock_init_recursive>:
 80047ec:	4770      	bx	lr

080047ee <__retarget_lock_acquire_recursive>:
 80047ee:	4770      	bx	lr

080047f0 <__retarget_lock_release_recursive>:
 80047f0:	4770      	bx	lr
	...

080047f4 <_free_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	4605      	mov	r5, r0
 80047f8:	2900      	cmp	r1, #0
 80047fa:	d040      	beq.n	800487e <_free_r+0x8a>
 80047fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004800:	1f0c      	subs	r4, r1, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	bfb8      	it	lt
 8004806:	18e4      	addlt	r4, r4, r3
 8004808:	f000 f8de 	bl	80049c8 <__malloc_lock>
 800480c:	4a1c      	ldr	r2, [pc, #112]	@ (8004880 <_free_r+0x8c>)
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	b933      	cbnz	r3, 8004820 <_free_r+0x2c>
 8004812:	6063      	str	r3, [r4, #4]
 8004814:	6014      	str	r4, [r2, #0]
 8004816:	4628      	mov	r0, r5
 8004818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800481c:	f000 b8da 	b.w	80049d4 <__malloc_unlock>
 8004820:	42a3      	cmp	r3, r4
 8004822:	d908      	bls.n	8004836 <_free_r+0x42>
 8004824:	6820      	ldr	r0, [r4, #0]
 8004826:	1821      	adds	r1, r4, r0
 8004828:	428b      	cmp	r3, r1
 800482a:	bf01      	itttt	eq
 800482c:	6819      	ldreq	r1, [r3, #0]
 800482e:	685b      	ldreq	r3, [r3, #4]
 8004830:	1809      	addeq	r1, r1, r0
 8004832:	6021      	streq	r1, [r4, #0]
 8004834:	e7ed      	b.n	8004812 <_free_r+0x1e>
 8004836:	461a      	mov	r2, r3
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	b10b      	cbz	r3, 8004840 <_free_r+0x4c>
 800483c:	42a3      	cmp	r3, r4
 800483e:	d9fa      	bls.n	8004836 <_free_r+0x42>
 8004840:	6811      	ldr	r1, [r2, #0]
 8004842:	1850      	adds	r0, r2, r1
 8004844:	42a0      	cmp	r0, r4
 8004846:	d10b      	bne.n	8004860 <_free_r+0x6c>
 8004848:	6820      	ldr	r0, [r4, #0]
 800484a:	4401      	add	r1, r0
 800484c:	1850      	adds	r0, r2, r1
 800484e:	4283      	cmp	r3, r0
 8004850:	6011      	str	r1, [r2, #0]
 8004852:	d1e0      	bne.n	8004816 <_free_r+0x22>
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4408      	add	r0, r1
 800485a:	6010      	str	r0, [r2, #0]
 800485c:	6053      	str	r3, [r2, #4]
 800485e:	e7da      	b.n	8004816 <_free_r+0x22>
 8004860:	d902      	bls.n	8004868 <_free_r+0x74>
 8004862:	230c      	movs	r3, #12
 8004864:	602b      	str	r3, [r5, #0]
 8004866:	e7d6      	b.n	8004816 <_free_r+0x22>
 8004868:	6820      	ldr	r0, [r4, #0]
 800486a:	1821      	adds	r1, r4, r0
 800486c:	428b      	cmp	r3, r1
 800486e:	bf01      	itttt	eq
 8004870:	6819      	ldreq	r1, [r3, #0]
 8004872:	685b      	ldreq	r3, [r3, #4]
 8004874:	1809      	addeq	r1, r1, r0
 8004876:	6021      	streq	r1, [r4, #0]
 8004878:	6063      	str	r3, [r4, #4]
 800487a:	6054      	str	r4, [r2, #4]
 800487c:	e7cb      	b.n	8004816 <_free_r+0x22>
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	2000030c 	.word	0x2000030c

08004884 <sbrk_aligned>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	4e0f      	ldr	r6, [pc, #60]	@ (80048c4 <sbrk_aligned+0x40>)
 8004888:	460c      	mov	r4, r1
 800488a:	6831      	ldr	r1, [r6, #0]
 800488c:	4605      	mov	r5, r0
 800488e:	b911      	cbnz	r1, 8004896 <sbrk_aligned+0x12>
 8004890:	f000 fca2 	bl	80051d8 <_sbrk_r>
 8004894:	6030      	str	r0, [r6, #0]
 8004896:	4621      	mov	r1, r4
 8004898:	4628      	mov	r0, r5
 800489a:	f000 fc9d 	bl	80051d8 <_sbrk_r>
 800489e:	1c43      	adds	r3, r0, #1
 80048a0:	d103      	bne.n	80048aa <sbrk_aligned+0x26>
 80048a2:	f04f 34ff 	mov.w	r4, #4294967295
 80048a6:	4620      	mov	r0, r4
 80048a8:	bd70      	pop	{r4, r5, r6, pc}
 80048aa:	1cc4      	adds	r4, r0, #3
 80048ac:	f024 0403 	bic.w	r4, r4, #3
 80048b0:	42a0      	cmp	r0, r4
 80048b2:	d0f8      	beq.n	80048a6 <sbrk_aligned+0x22>
 80048b4:	1a21      	subs	r1, r4, r0
 80048b6:	4628      	mov	r0, r5
 80048b8:	f000 fc8e 	bl	80051d8 <_sbrk_r>
 80048bc:	3001      	adds	r0, #1
 80048be:	d1f2      	bne.n	80048a6 <sbrk_aligned+0x22>
 80048c0:	e7ef      	b.n	80048a2 <sbrk_aligned+0x1e>
 80048c2:	bf00      	nop
 80048c4:	20000308 	.word	0x20000308

080048c8 <_malloc_r>:
 80048c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048cc:	1ccd      	adds	r5, r1, #3
 80048ce:	f025 0503 	bic.w	r5, r5, #3
 80048d2:	3508      	adds	r5, #8
 80048d4:	2d0c      	cmp	r5, #12
 80048d6:	bf38      	it	cc
 80048d8:	250c      	movcc	r5, #12
 80048da:	2d00      	cmp	r5, #0
 80048dc:	4606      	mov	r6, r0
 80048de:	db01      	blt.n	80048e4 <_malloc_r+0x1c>
 80048e0:	42a9      	cmp	r1, r5
 80048e2:	d904      	bls.n	80048ee <_malloc_r+0x26>
 80048e4:	230c      	movs	r3, #12
 80048e6:	6033      	str	r3, [r6, #0]
 80048e8:	2000      	movs	r0, #0
 80048ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049c4 <_malloc_r+0xfc>
 80048f2:	f000 f869 	bl	80049c8 <__malloc_lock>
 80048f6:	f8d8 3000 	ldr.w	r3, [r8]
 80048fa:	461c      	mov	r4, r3
 80048fc:	bb44      	cbnz	r4, 8004950 <_malloc_r+0x88>
 80048fe:	4629      	mov	r1, r5
 8004900:	4630      	mov	r0, r6
 8004902:	f7ff ffbf 	bl	8004884 <sbrk_aligned>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	4604      	mov	r4, r0
 800490a:	d158      	bne.n	80049be <_malloc_r+0xf6>
 800490c:	f8d8 4000 	ldr.w	r4, [r8]
 8004910:	4627      	mov	r7, r4
 8004912:	2f00      	cmp	r7, #0
 8004914:	d143      	bne.n	800499e <_malloc_r+0xd6>
 8004916:	2c00      	cmp	r4, #0
 8004918:	d04b      	beq.n	80049b2 <_malloc_r+0xea>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	4639      	mov	r1, r7
 800491e:	4630      	mov	r0, r6
 8004920:	eb04 0903 	add.w	r9, r4, r3
 8004924:	f000 fc58 	bl	80051d8 <_sbrk_r>
 8004928:	4581      	cmp	r9, r0
 800492a:	d142      	bne.n	80049b2 <_malloc_r+0xea>
 800492c:	6821      	ldr	r1, [r4, #0]
 800492e:	4630      	mov	r0, r6
 8004930:	1a6d      	subs	r5, r5, r1
 8004932:	4629      	mov	r1, r5
 8004934:	f7ff ffa6 	bl	8004884 <sbrk_aligned>
 8004938:	3001      	adds	r0, #1
 800493a:	d03a      	beq.n	80049b2 <_malloc_r+0xea>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	442b      	add	r3, r5
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	f8d8 3000 	ldr.w	r3, [r8]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	bb62      	cbnz	r2, 80049a4 <_malloc_r+0xdc>
 800494a:	f8c8 7000 	str.w	r7, [r8]
 800494e:	e00f      	b.n	8004970 <_malloc_r+0xa8>
 8004950:	6822      	ldr	r2, [r4, #0]
 8004952:	1b52      	subs	r2, r2, r5
 8004954:	d420      	bmi.n	8004998 <_malloc_r+0xd0>
 8004956:	2a0b      	cmp	r2, #11
 8004958:	d917      	bls.n	800498a <_malloc_r+0xc2>
 800495a:	1961      	adds	r1, r4, r5
 800495c:	42a3      	cmp	r3, r4
 800495e:	6025      	str	r5, [r4, #0]
 8004960:	bf18      	it	ne
 8004962:	6059      	strne	r1, [r3, #4]
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	bf08      	it	eq
 8004968:	f8c8 1000 	streq.w	r1, [r8]
 800496c:	5162      	str	r2, [r4, r5]
 800496e:	604b      	str	r3, [r1, #4]
 8004970:	4630      	mov	r0, r6
 8004972:	f000 f82f 	bl	80049d4 <__malloc_unlock>
 8004976:	f104 000b 	add.w	r0, r4, #11
 800497a:	1d23      	adds	r3, r4, #4
 800497c:	f020 0007 	bic.w	r0, r0, #7
 8004980:	1ac2      	subs	r2, r0, r3
 8004982:	bf1c      	itt	ne
 8004984:	1a1b      	subne	r3, r3, r0
 8004986:	50a3      	strne	r3, [r4, r2]
 8004988:	e7af      	b.n	80048ea <_malloc_r+0x22>
 800498a:	6862      	ldr	r2, [r4, #4]
 800498c:	42a3      	cmp	r3, r4
 800498e:	bf0c      	ite	eq
 8004990:	f8c8 2000 	streq.w	r2, [r8]
 8004994:	605a      	strne	r2, [r3, #4]
 8004996:	e7eb      	b.n	8004970 <_malloc_r+0xa8>
 8004998:	4623      	mov	r3, r4
 800499a:	6864      	ldr	r4, [r4, #4]
 800499c:	e7ae      	b.n	80048fc <_malloc_r+0x34>
 800499e:	463c      	mov	r4, r7
 80049a0:	687f      	ldr	r7, [r7, #4]
 80049a2:	e7b6      	b.n	8004912 <_malloc_r+0x4a>
 80049a4:	461a      	mov	r2, r3
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	42a3      	cmp	r3, r4
 80049aa:	d1fb      	bne.n	80049a4 <_malloc_r+0xdc>
 80049ac:	2300      	movs	r3, #0
 80049ae:	6053      	str	r3, [r2, #4]
 80049b0:	e7de      	b.n	8004970 <_malloc_r+0xa8>
 80049b2:	230c      	movs	r3, #12
 80049b4:	4630      	mov	r0, r6
 80049b6:	6033      	str	r3, [r6, #0]
 80049b8:	f000 f80c 	bl	80049d4 <__malloc_unlock>
 80049bc:	e794      	b.n	80048e8 <_malloc_r+0x20>
 80049be:	6005      	str	r5, [r0, #0]
 80049c0:	e7d6      	b.n	8004970 <_malloc_r+0xa8>
 80049c2:	bf00      	nop
 80049c4:	2000030c 	.word	0x2000030c

080049c8 <__malloc_lock>:
 80049c8:	4801      	ldr	r0, [pc, #4]	@ (80049d0 <__malloc_lock+0x8>)
 80049ca:	f7ff bf10 	b.w	80047ee <__retarget_lock_acquire_recursive>
 80049ce:	bf00      	nop
 80049d0:	20000304 	.word	0x20000304

080049d4 <__malloc_unlock>:
 80049d4:	4801      	ldr	r0, [pc, #4]	@ (80049dc <__malloc_unlock+0x8>)
 80049d6:	f7ff bf0b 	b.w	80047f0 <__retarget_lock_release_recursive>
 80049da:	bf00      	nop
 80049dc:	20000304 	.word	0x20000304

080049e0 <__sfputc_r>:
 80049e0:	6893      	ldr	r3, [r2, #8]
 80049e2:	b410      	push	{r4}
 80049e4:	3b01      	subs	r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	6093      	str	r3, [r2, #8]
 80049ea:	da07      	bge.n	80049fc <__sfputc_r+0x1c>
 80049ec:	6994      	ldr	r4, [r2, #24]
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	db01      	blt.n	80049f6 <__sfputc_r+0x16>
 80049f2:	290a      	cmp	r1, #10
 80049f4:	d102      	bne.n	80049fc <__sfputc_r+0x1c>
 80049f6:	bc10      	pop	{r4}
 80049f8:	f7ff bdeb 	b.w	80045d2 <__swbuf_r>
 80049fc:	6813      	ldr	r3, [r2, #0]
 80049fe:	1c58      	adds	r0, r3, #1
 8004a00:	6010      	str	r0, [r2, #0]
 8004a02:	7019      	strb	r1, [r3, #0]
 8004a04:	4608      	mov	r0, r1
 8004a06:	bc10      	pop	{r4}
 8004a08:	4770      	bx	lr

08004a0a <__sfputs_r>:
 8004a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	460f      	mov	r7, r1
 8004a10:	4614      	mov	r4, r2
 8004a12:	18d5      	adds	r5, r2, r3
 8004a14:	42ac      	cmp	r4, r5
 8004a16:	d101      	bne.n	8004a1c <__sfputs_r+0x12>
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e007      	b.n	8004a2c <__sfputs_r+0x22>
 8004a1c:	463a      	mov	r2, r7
 8004a1e:	4630      	mov	r0, r6
 8004a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a24:	f7ff ffdc 	bl	80049e0 <__sfputc_r>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d1f3      	bne.n	8004a14 <__sfputs_r+0xa>
 8004a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a30 <_vfiprintf_r>:
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	460d      	mov	r5, r1
 8004a36:	4614      	mov	r4, r2
 8004a38:	4698      	mov	r8, r3
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	b09d      	sub	sp, #116	@ 0x74
 8004a3e:	b118      	cbz	r0, 8004a48 <_vfiprintf_r+0x18>
 8004a40:	6a03      	ldr	r3, [r0, #32]
 8004a42:	b90b      	cbnz	r3, 8004a48 <_vfiprintf_r+0x18>
 8004a44:	f7ff fd3a 	bl	80044bc <__sinit>
 8004a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a4a:	07d9      	lsls	r1, r3, #31
 8004a4c:	d405      	bmi.n	8004a5a <_vfiprintf_r+0x2a>
 8004a4e:	89ab      	ldrh	r3, [r5, #12]
 8004a50:	059a      	lsls	r2, r3, #22
 8004a52:	d402      	bmi.n	8004a5a <_vfiprintf_r+0x2a>
 8004a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a56:	f7ff feca 	bl	80047ee <__retarget_lock_acquire_recursive>
 8004a5a:	89ab      	ldrh	r3, [r5, #12]
 8004a5c:	071b      	lsls	r3, r3, #28
 8004a5e:	d501      	bpl.n	8004a64 <_vfiprintf_r+0x34>
 8004a60:	692b      	ldr	r3, [r5, #16]
 8004a62:	b99b      	cbnz	r3, 8004a8c <_vfiprintf_r+0x5c>
 8004a64:	4629      	mov	r1, r5
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff fdf2 	bl	8004650 <__swsetup_r>
 8004a6c:	b170      	cbz	r0, 8004a8c <_vfiprintf_r+0x5c>
 8004a6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a70:	07dc      	lsls	r4, r3, #31
 8004a72:	d504      	bpl.n	8004a7e <_vfiprintf_r+0x4e>
 8004a74:	f04f 30ff 	mov.w	r0, #4294967295
 8004a78:	b01d      	add	sp, #116	@ 0x74
 8004a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7e:	89ab      	ldrh	r3, [r5, #12]
 8004a80:	0598      	lsls	r0, r3, #22
 8004a82:	d4f7      	bmi.n	8004a74 <_vfiprintf_r+0x44>
 8004a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a86:	f7ff feb3 	bl	80047f0 <__retarget_lock_release_recursive>
 8004a8a:	e7f3      	b.n	8004a74 <_vfiprintf_r+0x44>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a90:	2320      	movs	r3, #32
 8004a92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a96:	2330      	movs	r3, #48	@ 0x30
 8004a98:	f04f 0901 	mov.w	r9, #1
 8004a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aa0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004c4c <_vfiprintf_r+0x21c>
 8004aa4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	469a      	mov	sl, r3
 8004aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ab0:	b10a      	cbz	r2, 8004ab6 <_vfiprintf_r+0x86>
 8004ab2:	2a25      	cmp	r2, #37	@ 0x25
 8004ab4:	d1f9      	bne.n	8004aaa <_vfiprintf_r+0x7a>
 8004ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8004aba:	d00b      	beq.n	8004ad4 <_vfiprintf_r+0xa4>
 8004abc:	465b      	mov	r3, fp
 8004abe:	4622      	mov	r2, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f7ff ffa1 	bl	8004a0a <__sfputs_r>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	f000 80a7 	beq.w	8004c1c <_vfiprintf_r+0x1ec>
 8004ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ad0:	445a      	add	r2, fp
 8004ad2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 809f 	beq.w	8004c1c <_vfiprintf_r+0x1ec>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ae8:	f10a 0a01 	add.w	sl, sl, #1
 8004aec:	9304      	str	r3, [sp, #16]
 8004aee:	9307      	str	r3, [sp, #28]
 8004af0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004af4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004af6:	4654      	mov	r4, sl
 8004af8:	2205      	movs	r2, #5
 8004afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afe:	4853      	ldr	r0, [pc, #332]	@ (8004c4c <_vfiprintf_r+0x21c>)
 8004b00:	f000 fb7a 	bl	80051f8 <memchr>
 8004b04:	9a04      	ldr	r2, [sp, #16]
 8004b06:	b9d8      	cbnz	r0, 8004b40 <_vfiprintf_r+0x110>
 8004b08:	06d1      	lsls	r1, r2, #27
 8004b0a:	bf44      	itt	mi
 8004b0c:	2320      	movmi	r3, #32
 8004b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b12:	0713      	lsls	r3, r2, #28
 8004b14:	bf44      	itt	mi
 8004b16:	232b      	movmi	r3, #43	@ 0x2b
 8004b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b22:	d015      	beq.n	8004b50 <_vfiprintf_r+0x120>
 8004b24:	4654      	mov	r4, sl
 8004b26:	2000      	movs	r0, #0
 8004b28:	f04f 0c0a 	mov.w	ip, #10
 8004b2c:	9a07      	ldr	r2, [sp, #28]
 8004b2e:	4621      	mov	r1, r4
 8004b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b34:	3b30      	subs	r3, #48	@ 0x30
 8004b36:	2b09      	cmp	r3, #9
 8004b38:	d94b      	bls.n	8004bd2 <_vfiprintf_r+0x1a2>
 8004b3a:	b1b0      	cbz	r0, 8004b6a <_vfiprintf_r+0x13a>
 8004b3c:	9207      	str	r2, [sp, #28]
 8004b3e:	e014      	b.n	8004b6a <_vfiprintf_r+0x13a>
 8004b40:	eba0 0308 	sub.w	r3, r0, r8
 8004b44:	fa09 f303 	lsl.w	r3, r9, r3
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	46a2      	mov	sl, r4
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	e7d2      	b.n	8004af6 <_vfiprintf_r+0xc6>
 8004b50:	9b03      	ldr	r3, [sp, #12]
 8004b52:	1d19      	adds	r1, r3, #4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	9103      	str	r1, [sp, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bfbb      	ittet	lt
 8004b5c:	425b      	neglt	r3, r3
 8004b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b62:	9307      	strge	r3, [sp, #28]
 8004b64:	9307      	strlt	r3, [sp, #28]
 8004b66:	bfb8      	it	lt
 8004b68:	9204      	strlt	r2, [sp, #16]
 8004b6a:	7823      	ldrb	r3, [r4, #0]
 8004b6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b6e:	d10a      	bne.n	8004b86 <_vfiprintf_r+0x156>
 8004b70:	7863      	ldrb	r3, [r4, #1]
 8004b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b74:	d132      	bne.n	8004bdc <_vfiprintf_r+0x1ac>
 8004b76:	9b03      	ldr	r3, [sp, #12]
 8004b78:	3402      	adds	r4, #2
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	9203      	str	r2, [sp, #12]
 8004b80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b84:	9305      	str	r3, [sp, #20]
 8004b86:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004c50 <_vfiprintf_r+0x220>
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	4650      	mov	r0, sl
 8004b8e:	7821      	ldrb	r1, [r4, #0]
 8004b90:	f000 fb32 	bl	80051f8 <memchr>
 8004b94:	b138      	cbz	r0, 8004ba6 <_vfiprintf_r+0x176>
 8004b96:	2240      	movs	r2, #64	@ 0x40
 8004b98:	9b04      	ldr	r3, [sp, #16]
 8004b9a:	eba0 000a 	sub.w	r0, r0, sl
 8004b9e:	4082      	lsls	r2, r0
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	3401      	adds	r4, #1
 8004ba4:	9304      	str	r3, [sp, #16]
 8004ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004baa:	2206      	movs	r2, #6
 8004bac:	4829      	ldr	r0, [pc, #164]	@ (8004c54 <_vfiprintf_r+0x224>)
 8004bae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bb2:	f000 fb21 	bl	80051f8 <memchr>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d03f      	beq.n	8004c3a <_vfiprintf_r+0x20a>
 8004bba:	4b27      	ldr	r3, [pc, #156]	@ (8004c58 <_vfiprintf_r+0x228>)
 8004bbc:	bb1b      	cbnz	r3, 8004c06 <_vfiprintf_r+0x1d6>
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	3307      	adds	r3, #7
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bcc:	443b      	add	r3, r7
 8004bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bd0:	e76a      	b.n	8004aa8 <_vfiprintf_r+0x78>
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bda:	e7a8      	b.n	8004b2e <_vfiprintf_r+0xfe>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f04f 0c0a 	mov.w	ip, #10
 8004be2:	4619      	mov	r1, r3
 8004be4:	3401      	adds	r4, #1
 8004be6:	9305      	str	r3, [sp, #20]
 8004be8:	4620      	mov	r0, r4
 8004bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bee:	3a30      	subs	r2, #48	@ 0x30
 8004bf0:	2a09      	cmp	r2, #9
 8004bf2:	d903      	bls.n	8004bfc <_vfiprintf_r+0x1cc>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0c6      	beq.n	8004b86 <_vfiprintf_r+0x156>
 8004bf8:	9105      	str	r1, [sp, #20]
 8004bfa:	e7c4      	b.n	8004b86 <_vfiprintf_r+0x156>
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	2301      	movs	r3, #1
 8004c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c04:	e7f0      	b.n	8004be8 <_vfiprintf_r+0x1b8>
 8004c06:	ab03      	add	r3, sp, #12
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	462a      	mov	r2, r5
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <_vfiprintf_r+0x22c>)
 8004c10:	a904      	add	r1, sp, #16
 8004c12:	f3af 8000 	nop.w
 8004c16:	4607      	mov	r7, r0
 8004c18:	1c78      	adds	r0, r7, #1
 8004c1a:	d1d6      	bne.n	8004bca <_vfiprintf_r+0x19a>
 8004c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c1e:	07d9      	lsls	r1, r3, #31
 8004c20:	d405      	bmi.n	8004c2e <_vfiprintf_r+0x1fe>
 8004c22:	89ab      	ldrh	r3, [r5, #12]
 8004c24:	059a      	lsls	r2, r3, #22
 8004c26:	d402      	bmi.n	8004c2e <_vfiprintf_r+0x1fe>
 8004c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c2a:	f7ff fde1 	bl	80047f0 <__retarget_lock_release_recursive>
 8004c2e:	89ab      	ldrh	r3, [r5, #12]
 8004c30:	065b      	lsls	r3, r3, #25
 8004c32:	f53f af1f 	bmi.w	8004a74 <_vfiprintf_r+0x44>
 8004c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c38:	e71e      	b.n	8004a78 <_vfiprintf_r+0x48>
 8004c3a:	ab03      	add	r3, sp, #12
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	462a      	mov	r2, r5
 8004c40:	4630      	mov	r0, r6
 8004c42:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <_vfiprintf_r+0x22c>)
 8004c44:	a904      	add	r1, sp, #16
 8004c46:	f000 f87d 	bl	8004d44 <_printf_i>
 8004c4a:	e7e4      	b.n	8004c16 <_vfiprintf_r+0x1e6>
 8004c4c:	0800530e 	.word	0x0800530e
 8004c50:	08005314 	.word	0x08005314
 8004c54:	08005318 	.word	0x08005318
 8004c58:	00000000 	.word	0x00000000
 8004c5c:	08004a0b 	.word	0x08004a0b

08004c60 <_printf_common>:
 8004c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	4616      	mov	r6, r2
 8004c66:	4698      	mov	r8, r3
 8004c68:	688a      	ldr	r2, [r1, #8]
 8004c6a:	690b      	ldr	r3, [r1, #16]
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	bfb8      	it	lt
 8004c72:	4613      	movlt	r3, r2
 8004c74:	6033      	str	r3, [r6, #0]
 8004c76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c80:	b10a      	cbz	r2, 8004c86 <_printf_common+0x26>
 8004c82:	3301      	adds	r3, #1
 8004c84:	6033      	str	r3, [r6, #0]
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	0699      	lsls	r1, r3, #26
 8004c8a:	bf42      	ittt	mi
 8004c8c:	6833      	ldrmi	r3, [r6, #0]
 8004c8e:	3302      	addmi	r3, #2
 8004c90:	6033      	strmi	r3, [r6, #0]
 8004c92:	6825      	ldr	r5, [r4, #0]
 8004c94:	f015 0506 	ands.w	r5, r5, #6
 8004c98:	d106      	bne.n	8004ca8 <_printf_common+0x48>
 8004c9a:	f104 0a19 	add.w	sl, r4, #25
 8004c9e:	68e3      	ldr	r3, [r4, #12]
 8004ca0:	6832      	ldr	r2, [r6, #0]
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	42ab      	cmp	r3, r5
 8004ca6:	dc2b      	bgt.n	8004d00 <_printf_common+0xa0>
 8004ca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cac:	6822      	ldr	r2, [r4, #0]
 8004cae:	3b00      	subs	r3, #0
 8004cb0:	bf18      	it	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	0692      	lsls	r2, r2, #26
 8004cb6:	d430      	bmi.n	8004d1a <_printf_common+0xba>
 8004cb8:	4641      	mov	r1, r8
 8004cba:	4638      	mov	r0, r7
 8004cbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cc0:	47c8      	blx	r9
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d023      	beq.n	8004d0e <_printf_common+0xae>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	6922      	ldr	r2, [r4, #16]
 8004cca:	f003 0306 	and.w	r3, r3, #6
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	bf14      	ite	ne
 8004cd2:	2500      	movne	r5, #0
 8004cd4:	6833      	ldreq	r3, [r6, #0]
 8004cd6:	f04f 0600 	mov.w	r6, #0
 8004cda:	bf08      	it	eq
 8004cdc:	68e5      	ldreq	r5, [r4, #12]
 8004cde:	f104 041a 	add.w	r4, r4, #26
 8004ce2:	bf08      	it	eq
 8004ce4:	1aed      	subeq	r5, r5, r3
 8004ce6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004cea:	bf08      	it	eq
 8004cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bfc4      	itt	gt
 8004cf4:	1a9b      	subgt	r3, r3, r2
 8004cf6:	18ed      	addgt	r5, r5, r3
 8004cf8:	42b5      	cmp	r5, r6
 8004cfa:	d11a      	bne.n	8004d32 <_printf_common+0xd2>
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	e008      	b.n	8004d12 <_printf_common+0xb2>
 8004d00:	2301      	movs	r3, #1
 8004d02:	4652      	mov	r2, sl
 8004d04:	4641      	mov	r1, r8
 8004d06:	4638      	mov	r0, r7
 8004d08:	47c8      	blx	r9
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d103      	bne.n	8004d16 <_printf_common+0xb6>
 8004d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d16:	3501      	adds	r5, #1
 8004d18:	e7c1      	b.n	8004c9e <_printf_common+0x3e>
 8004d1a:	2030      	movs	r0, #48	@ 0x30
 8004d1c:	18e1      	adds	r1, r4, r3
 8004d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d28:	4422      	add	r2, r4
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d30:	e7c2      	b.n	8004cb8 <_printf_common+0x58>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4622      	mov	r2, r4
 8004d36:	4641      	mov	r1, r8
 8004d38:	4638      	mov	r0, r7
 8004d3a:	47c8      	blx	r9
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d0e6      	beq.n	8004d0e <_printf_common+0xae>
 8004d40:	3601      	adds	r6, #1
 8004d42:	e7d9      	b.n	8004cf8 <_printf_common+0x98>

08004d44 <_printf_i>:
 8004d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	7e0f      	ldrb	r7, [r1, #24]
 8004d4a:	4691      	mov	r9, r2
 8004d4c:	2f78      	cmp	r7, #120	@ 0x78
 8004d4e:	4680      	mov	r8, r0
 8004d50:	460c      	mov	r4, r1
 8004d52:	469a      	mov	sl, r3
 8004d54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d5a:	d807      	bhi.n	8004d6c <_printf_i+0x28>
 8004d5c:	2f62      	cmp	r7, #98	@ 0x62
 8004d5e:	d80a      	bhi.n	8004d76 <_printf_i+0x32>
 8004d60:	2f00      	cmp	r7, #0
 8004d62:	f000 80d1 	beq.w	8004f08 <_printf_i+0x1c4>
 8004d66:	2f58      	cmp	r7, #88	@ 0x58
 8004d68:	f000 80b8 	beq.w	8004edc <_printf_i+0x198>
 8004d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d74:	e03a      	b.n	8004dec <_printf_i+0xa8>
 8004d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d7a:	2b15      	cmp	r3, #21
 8004d7c:	d8f6      	bhi.n	8004d6c <_printf_i+0x28>
 8004d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8004d84 <_printf_i+0x40>)
 8004d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d84:	08004ddd 	.word	0x08004ddd
 8004d88:	08004df1 	.word	0x08004df1
 8004d8c:	08004d6d 	.word	0x08004d6d
 8004d90:	08004d6d 	.word	0x08004d6d
 8004d94:	08004d6d 	.word	0x08004d6d
 8004d98:	08004d6d 	.word	0x08004d6d
 8004d9c:	08004df1 	.word	0x08004df1
 8004da0:	08004d6d 	.word	0x08004d6d
 8004da4:	08004d6d 	.word	0x08004d6d
 8004da8:	08004d6d 	.word	0x08004d6d
 8004dac:	08004d6d 	.word	0x08004d6d
 8004db0:	08004eef 	.word	0x08004eef
 8004db4:	08004e1b 	.word	0x08004e1b
 8004db8:	08004ea9 	.word	0x08004ea9
 8004dbc:	08004d6d 	.word	0x08004d6d
 8004dc0:	08004d6d 	.word	0x08004d6d
 8004dc4:	08004f11 	.word	0x08004f11
 8004dc8:	08004d6d 	.word	0x08004d6d
 8004dcc:	08004e1b 	.word	0x08004e1b
 8004dd0:	08004d6d 	.word	0x08004d6d
 8004dd4:	08004d6d 	.word	0x08004d6d
 8004dd8:	08004eb1 	.word	0x08004eb1
 8004ddc:	6833      	ldr	r3, [r6, #0]
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6032      	str	r2, [r6, #0]
 8004de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004dec:	2301      	movs	r3, #1
 8004dee:	e09c      	b.n	8004f2a <_printf_i+0x1e6>
 8004df0:	6833      	ldr	r3, [r6, #0]
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	1d19      	adds	r1, r3, #4
 8004df6:	6031      	str	r1, [r6, #0]
 8004df8:	0606      	lsls	r6, r0, #24
 8004dfa:	d501      	bpl.n	8004e00 <_printf_i+0xbc>
 8004dfc:	681d      	ldr	r5, [r3, #0]
 8004dfe:	e003      	b.n	8004e08 <_printf_i+0xc4>
 8004e00:	0645      	lsls	r5, r0, #25
 8004e02:	d5fb      	bpl.n	8004dfc <_printf_i+0xb8>
 8004e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	da03      	bge.n	8004e14 <_printf_i+0xd0>
 8004e0c:	232d      	movs	r3, #45	@ 0x2d
 8004e0e:	426d      	negs	r5, r5
 8004e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e14:	230a      	movs	r3, #10
 8004e16:	4858      	ldr	r0, [pc, #352]	@ (8004f78 <_printf_i+0x234>)
 8004e18:	e011      	b.n	8004e3e <_printf_i+0xfa>
 8004e1a:	6821      	ldr	r1, [r4, #0]
 8004e1c:	6833      	ldr	r3, [r6, #0]
 8004e1e:	0608      	lsls	r0, r1, #24
 8004e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e24:	d402      	bmi.n	8004e2c <_printf_i+0xe8>
 8004e26:	0649      	lsls	r1, r1, #25
 8004e28:	bf48      	it	mi
 8004e2a:	b2ad      	uxthmi	r5, r5
 8004e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e2e:	6033      	str	r3, [r6, #0]
 8004e30:	bf14      	ite	ne
 8004e32:	230a      	movne	r3, #10
 8004e34:	2308      	moveq	r3, #8
 8004e36:	4850      	ldr	r0, [pc, #320]	@ (8004f78 <_printf_i+0x234>)
 8004e38:	2100      	movs	r1, #0
 8004e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e3e:	6866      	ldr	r6, [r4, #4]
 8004e40:	2e00      	cmp	r6, #0
 8004e42:	60a6      	str	r6, [r4, #8]
 8004e44:	db05      	blt.n	8004e52 <_printf_i+0x10e>
 8004e46:	6821      	ldr	r1, [r4, #0]
 8004e48:	432e      	orrs	r6, r5
 8004e4a:	f021 0104 	bic.w	r1, r1, #4
 8004e4e:	6021      	str	r1, [r4, #0]
 8004e50:	d04b      	beq.n	8004eea <_printf_i+0x1a6>
 8004e52:	4616      	mov	r6, r2
 8004e54:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e58:	fb03 5711 	mls	r7, r3, r1, r5
 8004e5c:	5dc7      	ldrb	r7, [r0, r7]
 8004e5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e62:	462f      	mov	r7, r5
 8004e64:	42bb      	cmp	r3, r7
 8004e66:	460d      	mov	r5, r1
 8004e68:	d9f4      	bls.n	8004e54 <_printf_i+0x110>
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d10b      	bne.n	8004e86 <_printf_i+0x142>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	07df      	lsls	r7, r3, #31
 8004e72:	d508      	bpl.n	8004e86 <_printf_i+0x142>
 8004e74:	6923      	ldr	r3, [r4, #16]
 8004e76:	6861      	ldr	r1, [r4, #4]
 8004e78:	4299      	cmp	r1, r3
 8004e7a:	bfde      	ittt	le
 8004e7c:	2330      	movle	r3, #48	@ 0x30
 8004e7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e86:	1b92      	subs	r2, r2, r6
 8004e88:	6122      	str	r2, [r4, #16]
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4640      	mov	r0, r8
 8004e90:	f8cd a000 	str.w	sl, [sp]
 8004e94:	aa03      	add	r2, sp, #12
 8004e96:	f7ff fee3 	bl	8004c60 <_printf_common>
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d14a      	bne.n	8004f34 <_printf_i+0x1f0>
 8004e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea2:	b004      	add	sp, #16
 8004ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	f043 0320 	orr.w	r3, r3, #32
 8004eae:	6023      	str	r3, [r4, #0]
 8004eb0:	2778      	movs	r7, #120	@ 0x78
 8004eb2:	4832      	ldr	r0, [pc, #200]	@ (8004f7c <_printf_i+0x238>)
 8004eb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	6831      	ldr	r1, [r6, #0]
 8004ebc:	061f      	lsls	r7, r3, #24
 8004ebe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ec2:	d402      	bmi.n	8004eca <_printf_i+0x186>
 8004ec4:	065f      	lsls	r7, r3, #25
 8004ec6:	bf48      	it	mi
 8004ec8:	b2ad      	uxthmi	r5, r5
 8004eca:	6031      	str	r1, [r6, #0]
 8004ecc:	07d9      	lsls	r1, r3, #31
 8004ece:	bf44      	itt	mi
 8004ed0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ed4:	6023      	strmi	r3, [r4, #0]
 8004ed6:	b11d      	cbz	r5, 8004ee0 <_printf_i+0x19c>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	e7ad      	b.n	8004e38 <_printf_i+0xf4>
 8004edc:	4826      	ldr	r0, [pc, #152]	@ (8004f78 <_printf_i+0x234>)
 8004ede:	e7e9      	b.n	8004eb4 <_printf_i+0x170>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	f023 0320 	bic.w	r3, r3, #32
 8004ee6:	6023      	str	r3, [r4, #0]
 8004ee8:	e7f6      	b.n	8004ed8 <_printf_i+0x194>
 8004eea:	4616      	mov	r6, r2
 8004eec:	e7bd      	b.n	8004e6a <_printf_i+0x126>
 8004eee:	6833      	ldr	r3, [r6, #0]
 8004ef0:	6825      	ldr	r5, [r4, #0]
 8004ef2:	1d18      	adds	r0, r3, #4
 8004ef4:	6961      	ldr	r1, [r4, #20]
 8004ef6:	6030      	str	r0, [r6, #0]
 8004ef8:	062e      	lsls	r6, r5, #24
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	d501      	bpl.n	8004f02 <_printf_i+0x1be>
 8004efe:	6019      	str	r1, [r3, #0]
 8004f00:	e002      	b.n	8004f08 <_printf_i+0x1c4>
 8004f02:	0668      	lsls	r0, r5, #25
 8004f04:	d5fb      	bpl.n	8004efe <_printf_i+0x1ba>
 8004f06:	8019      	strh	r1, [r3, #0]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4616      	mov	r6, r2
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	e7bc      	b.n	8004e8a <_printf_i+0x146>
 8004f10:	6833      	ldr	r3, [r6, #0]
 8004f12:	2100      	movs	r1, #0
 8004f14:	1d1a      	adds	r2, r3, #4
 8004f16:	6032      	str	r2, [r6, #0]
 8004f18:	681e      	ldr	r6, [r3, #0]
 8004f1a:	6862      	ldr	r2, [r4, #4]
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f000 f96b 	bl	80051f8 <memchr>
 8004f22:	b108      	cbz	r0, 8004f28 <_printf_i+0x1e4>
 8004f24:	1b80      	subs	r0, r0, r6
 8004f26:	6060      	str	r0, [r4, #4]
 8004f28:	6863      	ldr	r3, [r4, #4]
 8004f2a:	6123      	str	r3, [r4, #16]
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f32:	e7aa      	b.n	8004e8a <_printf_i+0x146>
 8004f34:	4632      	mov	r2, r6
 8004f36:	4649      	mov	r1, r9
 8004f38:	4640      	mov	r0, r8
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	47d0      	blx	sl
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d0ad      	beq.n	8004e9e <_printf_i+0x15a>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	079b      	lsls	r3, r3, #30
 8004f46:	d413      	bmi.n	8004f70 <_printf_i+0x22c>
 8004f48:	68e0      	ldr	r0, [r4, #12]
 8004f4a:	9b03      	ldr	r3, [sp, #12]
 8004f4c:	4298      	cmp	r0, r3
 8004f4e:	bfb8      	it	lt
 8004f50:	4618      	movlt	r0, r3
 8004f52:	e7a6      	b.n	8004ea2 <_printf_i+0x15e>
 8004f54:	2301      	movs	r3, #1
 8004f56:	4632      	mov	r2, r6
 8004f58:	4649      	mov	r1, r9
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	47d0      	blx	sl
 8004f5e:	3001      	adds	r0, #1
 8004f60:	d09d      	beq.n	8004e9e <_printf_i+0x15a>
 8004f62:	3501      	adds	r5, #1
 8004f64:	68e3      	ldr	r3, [r4, #12]
 8004f66:	9903      	ldr	r1, [sp, #12]
 8004f68:	1a5b      	subs	r3, r3, r1
 8004f6a:	42ab      	cmp	r3, r5
 8004f6c:	dcf2      	bgt.n	8004f54 <_printf_i+0x210>
 8004f6e:	e7eb      	b.n	8004f48 <_printf_i+0x204>
 8004f70:	2500      	movs	r5, #0
 8004f72:	f104 0619 	add.w	r6, r4, #25
 8004f76:	e7f5      	b.n	8004f64 <_printf_i+0x220>
 8004f78:	0800531f 	.word	0x0800531f
 8004f7c:	08005330 	.word	0x08005330

08004f80 <__sflush_r>:
 8004f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	0716      	lsls	r6, r2, #28
 8004f88:	4605      	mov	r5, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	d454      	bmi.n	8005038 <__sflush_r+0xb8>
 8004f8e:	684b      	ldr	r3, [r1, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	dc02      	bgt.n	8004f9a <__sflush_r+0x1a>
 8004f94:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dd48      	ble.n	800502c <__sflush_r+0xac>
 8004f9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f9c:	2e00      	cmp	r6, #0
 8004f9e:	d045      	beq.n	800502c <__sflush_r+0xac>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004fa6:	682f      	ldr	r7, [r5, #0]
 8004fa8:	6a21      	ldr	r1, [r4, #32]
 8004faa:	602b      	str	r3, [r5, #0]
 8004fac:	d030      	beq.n	8005010 <__sflush_r+0x90>
 8004fae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	0759      	lsls	r1, r3, #29
 8004fb4:	d505      	bpl.n	8004fc2 <__sflush_r+0x42>
 8004fb6:	6863      	ldr	r3, [r4, #4]
 8004fb8:	1ad2      	subs	r2, r2, r3
 8004fba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004fbc:	b10b      	cbz	r3, 8004fc2 <__sflush_r+0x42>
 8004fbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004fc0:	1ad2      	subs	r2, r2, r3
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fc8:	6a21      	ldr	r1, [r4, #32]
 8004fca:	47b0      	blx	r6
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	89a3      	ldrh	r3, [r4, #12]
 8004fd0:	d106      	bne.n	8004fe0 <__sflush_r+0x60>
 8004fd2:	6829      	ldr	r1, [r5, #0]
 8004fd4:	291d      	cmp	r1, #29
 8004fd6:	d82b      	bhi.n	8005030 <__sflush_r+0xb0>
 8004fd8:	4a28      	ldr	r2, [pc, #160]	@ (800507c <__sflush_r+0xfc>)
 8004fda:	40ca      	lsrs	r2, r1
 8004fdc:	07d6      	lsls	r6, r2, #31
 8004fde:	d527      	bpl.n	8005030 <__sflush_r+0xb0>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	6062      	str	r2, [r4, #4]
 8004fe4:	6922      	ldr	r2, [r4, #16]
 8004fe6:	04d9      	lsls	r1, r3, #19
 8004fe8:	6022      	str	r2, [r4, #0]
 8004fea:	d504      	bpl.n	8004ff6 <__sflush_r+0x76>
 8004fec:	1c42      	adds	r2, r0, #1
 8004fee:	d101      	bne.n	8004ff4 <__sflush_r+0x74>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b903      	cbnz	r3, 8004ff6 <__sflush_r+0x76>
 8004ff4:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ff6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ff8:	602f      	str	r7, [r5, #0]
 8004ffa:	b1b9      	cbz	r1, 800502c <__sflush_r+0xac>
 8004ffc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005000:	4299      	cmp	r1, r3
 8005002:	d002      	beq.n	800500a <__sflush_r+0x8a>
 8005004:	4628      	mov	r0, r5
 8005006:	f7ff fbf5 	bl	80047f4 <_free_r>
 800500a:	2300      	movs	r3, #0
 800500c:	6363      	str	r3, [r4, #52]	@ 0x34
 800500e:	e00d      	b.n	800502c <__sflush_r+0xac>
 8005010:	2301      	movs	r3, #1
 8005012:	4628      	mov	r0, r5
 8005014:	47b0      	blx	r6
 8005016:	4602      	mov	r2, r0
 8005018:	1c50      	adds	r0, r2, #1
 800501a:	d1c9      	bne.n	8004fb0 <__sflush_r+0x30>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0c6      	beq.n	8004fb0 <__sflush_r+0x30>
 8005022:	2b1d      	cmp	r3, #29
 8005024:	d001      	beq.n	800502a <__sflush_r+0xaa>
 8005026:	2b16      	cmp	r3, #22
 8005028:	d11d      	bne.n	8005066 <__sflush_r+0xe6>
 800502a:	602f      	str	r7, [r5, #0]
 800502c:	2000      	movs	r0, #0
 800502e:	e021      	b.n	8005074 <__sflush_r+0xf4>
 8005030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005034:	b21b      	sxth	r3, r3
 8005036:	e01a      	b.n	800506e <__sflush_r+0xee>
 8005038:	690f      	ldr	r7, [r1, #16]
 800503a:	2f00      	cmp	r7, #0
 800503c:	d0f6      	beq.n	800502c <__sflush_r+0xac>
 800503e:	0793      	lsls	r3, r2, #30
 8005040:	bf18      	it	ne
 8005042:	2300      	movne	r3, #0
 8005044:	680e      	ldr	r6, [r1, #0]
 8005046:	bf08      	it	eq
 8005048:	694b      	ldreq	r3, [r1, #20]
 800504a:	1bf6      	subs	r6, r6, r7
 800504c:	600f      	str	r7, [r1, #0]
 800504e:	608b      	str	r3, [r1, #8]
 8005050:	2e00      	cmp	r6, #0
 8005052:	ddeb      	ble.n	800502c <__sflush_r+0xac>
 8005054:	4633      	mov	r3, r6
 8005056:	463a      	mov	r2, r7
 8005058:	4628      	mov	r0, r5
 800505a:	6a21      	ldr	r1, [r4, #32]
 800505c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005060:	47e0      	blx	ip
 8005062:	2800      	cmp	r0, #0
 8005064:	dc07      	bgt.n	8005076 <__sflush_r+0xf6>
 8005066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800506e:	f04f 30ff 	mov.w	r0, #4294967295
 8005072:	81a3      	strh	r3, [r4, #12]
 8005074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005076:	4407      	add	r7, r0
 8005078:	1a36      	subs	r6, r6, r0
 800507a:	e7e9      	b.n	8005050 <__sflush_r+0xd0>
 800507c:	20400001 	.word	0x20400001

08005080 <_fflush_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	690b      	ldr	r3, [r1, #16]
 8005084:	4605      	mov	r5, r0
 8005086:	460c      	mov	r4, r1
 8005088:	b913      	cbnz	r3, 8005090 <_fflush_r+0x10>
 800508a:	2500      	movs	r5, #0
 800508c:	4628      	mov	r0, r5
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	b118      	cbz	r0, 800509a <_fflush_r+0x1a>
 8005092:	6a03      	ldr	r3, [r0, #32]
 8005094:	b90b      	cbnz	r3, 800509a <_fflush_r+0x1a>
 8005096:	f7ff fa11 	bl	80044bc <__sinit>
 800509a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f3      	beq.n	800508a <_fflush_r+0xa>
 80050a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050a4:	07d0      	lsls	r0, r2, #31
 80050a6:	d404      	bmi.n	80050b2 <_fflush_r+0x32>
 80050a8:	0599      	lsls	r1, r3, #22
 80050aa:	d402      	bmi.n	80050b2 <_fflush_r+0x32>
 80050ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ae:	f7ff fb9e 	bl	80047ee <__retarget_lock_acquire_recursive>
 80050b2:	4628      	mov	r0, r5
 80050b4:	4621      	mov	r1, r4
 80050b6:	f7ff ff63 	bl	8004f80 <__sflush_r>
 80050ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050bc:	4605      	mov	r5, r0
 80050be:	07da      	lsls	r2, r3, #31
 80050c0:	d4e4      	bmi.n	800508c <_fflush_r+0xc>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	059b      	lsls	r3, r3, #22
 80050c6:	d4e1      	bmi.n	800508c <_fflush_r+0xc>
 80050c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ca:	f7ff fb91 	bl	80047f0 <__retarget_lock_release_recursive>
 80050ce:	e7dd      	b.n	800508c <_fflush_r+0xc>

080050d0 <__swhatbuf_r>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	460c      	mov	r4, r1
 80050d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d8:	4615      	mov	r5, r2
 80050da:	2900      	cmp	r1, #0
 80050dc:	461e      	mov	r6, r3
 80050de:	b096      	sub	sp, #88	@ 0x58
 80050e0:	da0c      	bge.n	80050fc <__swhatbuf_r+0x2c>
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	2100      	movs	r1, #0
 80050e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80050ea:	bf14      	ite	ne
 80050ec:	2340      	movne	r3, #64	@ 0x40
 80050ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050f2:	2000      	movs	r0, #0
 80050f4:	6031      	str	r1, [r6, #0]
 80050f6:	602b      	str	r3, [r5, #0]
 80050f8:	b016      	add	sp, #88	@ 0x58
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
 80050fc:	466a      	mov	r2, sp
 80050fe:	f000 f849 	bl	8005194 <_fstat_r>
 8005102:	2800      	cmp	r0, #0
 8005104:	dbed      	blt.n	80050e2 <__swhatbuf_r+0x12>
 8005106:	9901      	ldr	r1, [sp, #4]
 8005108:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800510c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005110:	4259      	negs	r1, r3
 8005112:	4159      	adcs	r1, r3
 8005114:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005118:	e7eb      	b.n	80050f2 <__swhatbuf_r+0x22>

0800511a <__smakebuf_r>:
 800511a:	898b      	ldrh	r3, [r1, #12]
 800511c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800511e:	079d      	lsls	r5, r3, #30
 8005120:	4606      	mov	r6, r0
 8005122:	460c      	mov	r4, r1
 8005124:	d507      	bpl.n	8005136 <__smakebuf_r+0x1c>
 8005126:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800512a:	6023      	str	r3, [r4, #0]
 800512c:	6123      	str	r3, [r4, #16]
 800512e:	2301      	movs	r3, #1
 8005130:	6163      	str	r3, [r4, #20]
 8005132:	b003      	add	sp, #12
 8005134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005136:	466a      	mov	r2, sp
 8005138:	ab01      	add	r3, sp, #4
 800513a:	f7ff ffc9 	bl	80050d0 <__swhatbuf_r>
 800513e:	9f00      	ldr	r7, [sp, #0]
 8005140:	4605      	mov	r5, r0
 8005142:	4639      	mov	r1, r7
 8005144:	4630      	mov	r0, r6
 8005146:	f7ff fbbf 	bl	80048c8 <_malloc_r>
 800514a:	b948      	cbnz	r0, 8005160 <__smakebuf_r+0x46>
 800514c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005150:	059a      	lsls	r2, r3, #22
 8005152:	d4ee      	bmi.n	8005132 <__smakebuf_r+0x18>
 8005154:	f023 0303 	bic.w	r3, r3, #3
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	81a3      	strh	r3, [r4, #12]
 800515e:	e7e2      	b.n	8005126 <__smakebuf_r+0xc>
 8005160:	89a3      	ldrh	r3, [r4, #12]
 8005162:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800516a:	81a3      	strh	r3, [r4, #12]
 800516c:	9b01      	ldr	r3, [sp, #4]
 800516e:	6020      	str	r0, [r4, #0]
 8005170:	b15b      	cbz	r3, 800518a <__smakebuf_r+0x70>
 8005172:	4630      	mov	r0, r6
 8005174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005178:	f000 f81e 	bl	80051b8 <_isatty_r>
 800517c:	b128      	cbz	r0, 800518a <__smakebuf_r+0x70>
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	f023 0303 	bic.w	r3, r3, #3
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	81a3      	strh	r3, [r4, #12]
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	431d      	orrs	r5, r3
 800518e:	81a5      	strh	r5, [r4, #12]
 8005190:	e7cf      	b.n	8005132 <__smakebuf_r+0x18>
	...

08005194 <_fstat_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	2300      	movs	r3, #0
 8005198:	4d06      	ldr	r5, [pc, #24]	@ (80051b4 <_fstat_r+0x20>)
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	602b      	str	r3, [r5, #0]
 80051a2:	f7fc f855 	bl	8001250 <_fstat>
 80051a6:	1c43      	adds	r3, r0, #1
 80051a8:	d102      	bne.n	80051b0 <_fstat_r+0x1c>
 80051aa:	682b      	ldr	r3, [r5, #0]
 80051ac:	b103      	cbz	r3, 80051b0 <_fstat_r+0x1c>
 80051ae:	6023      	str	r3, [r4, #0]
 80051b0:	bd38      	pop	{r3, r4, r5, pc}
 80051b2:	bf00      	nop
 80051b4:	20000300 	.word	0x20000300

080051b8 <_isatty_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	2300      	movs	r3, #0
 80051bc:	4d05      	ldr	r5, [pc, #20]	@ (80051d4 <_isatty_r+0x1c>)
 80051be:	4604      	mov	r4, r0
 80051c0:	4608      	mov	r0, r1
 80051c2:	602b      	str	r3, [r5, #0]
 80051c4:	f7fc f853 	bl	800126e <_isatty>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d102      	bne.n	80051d2 <_isatty_r+0x1a>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	b103      	cbz	r3, 80051d2 <_isatty_r+0x1a>
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	20000300 	.word	0x20000300

080051d8 <_sbrk_r>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	2300      	movs	r3, #0
 80051dc:	4d05      	ldr	r5, [pc, #20]	@ (80051f4 <_sbrk_r+0x1c>)
 80051de:	4604      	mov	r4, r0
 80051e0:	4608      	mov	r0, r1
 80051e2:	602b      	str	r3, [r5, #0]
 80051e4:	f7fc f85a 	bl	800129c <_sbrk>
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	d102      	bne.n	80051f2 <_sbrk_r+0x1a>
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	b103      	cbz	r3, 80051f2 <_sbrk_r+0x1a>
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	bd38      	pop	{r3, r4, r5, pc}
 80051f4:	20000300 	.word	0x20000300

080051f8 <memchr>:
 80051f8:	4603      	mov	r3, r0
 80051fa:	b510      	push	{r4, lr}
 80051fc:	b2c9      	uxtb	r1, r1
 80051fe:	4402      	add	r2, r0
 8005200:	4293      	cmp	r3, r2
 8005202:	4618      	mov	r0, r3
 8005204:	d101      	bne.n	800520a <memchr+0x12>
 8005206:	2000      	movs	r0, #0
 8005208:	e003      	b.n	8005212 <memchr+0x1a>
 800520a:	7804      	ldrb	r4, [r0, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	428c      	cmp	r4, r1
 8005210:	d1f6      	bne.n	8005200 <memchr+0x8>
 8005212:	bd10      	pop	{r4, pc}

08005214 <_init>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	bf00      	nop
 8005218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521a:	bc08      	pop	{r3}
 800521c:	469e      	mov	lr, r3
 800521e:	4770      	bx	lr

08005220 <_fini>:
 8005220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005222:	bf00      	nop
 8005224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005226:	bc08      	pop	{r3}
 8005228:	469e      	mov	lr, r3
 800522a:	4770      	bx	lr
