
234.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d70  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003e7c  08003e7c  00004e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb0  08003fb0  0000506c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fb0  08003fb0  0000506c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fb0  08003fb0  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb0  08003fb0  00004fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fb4  08003fb4  00004fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003fb8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000006c  08004024  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004024  0000527c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f41  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0e  00000000  00000000  0000efd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00010ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000812  00000000  00000000  00011998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001889e  00000000  00000000  000121aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c58d  00000000  00000000  0002aa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085fcc  00000000  00000000  00036fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bcfa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031cc  00000000  00000000  000bcfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c01b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e64 	.word	0x08003e64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003e64 	.word	0x08003e64

0800014c <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	4802      	ldr	r0, [pc, #8]	@ (8000160 <csn_high+0x14>)
 8000156:	f001 fb0b 	bl	8001770 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 시작 표시
	   // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
	}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <csn_low>:



void csn_low(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	2101      	movs	r1, #1
 800016c:	4802      	ldr	r0, [pc, #8]	@ (8000178 <csn_low+0x14>)
 800016e:	f001 faff 	bl	8001770 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 종료 표시
	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ce_high>:

void ce_high(void){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000186:	4802      	ldr	r0, [pc, #8]	@ (8000190 <ce_high+0x14>)
 8000188:	f001 faf2 	bl	8001770 <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <ce_low>:

void ce_low(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800019e:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <ce_low+0x14>)
 80001a0:	f001 fae6 	bl	8001770 <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	6039      	str	r1, [r7, #0]
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80001c6:	f7ff ffcd 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80001ca:	f107 010f 	add.w	r1, r7, #15
 80001ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d2:	2201      	movs	r2, #1
 80001d4:	4808      	ldr	r0, [pc, #32]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001d6:	f001 ff77 	bl	80020c8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	b29a      	uxth	r2, r3
 80001de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e2:	6839      	ldr	r1, [r7, #0]
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001e6:	f001 ff6f 	bl	80020c8 <HAL_SPI_Transmit>

	csn_high();
 80001ea:	f7ff ffaf 	bl	800014c <csn_high>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000088 	.word	0x20000088

080001fc <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	460a      	mov	r2, r1
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	4613      	mov	r3, r2
 800020a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000214:	f7ff ffa6 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000218:	f107 010f 	add.w	r1, r7, #15
 800021c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000220:	2201      	movs	r2, #1
 8000222:	4809      	ldr	r0, [pc, #36]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000224:	f001 ff50 	bl	80020c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000228:	79bb      	ldrb	r3, [r7, #6]
 800022a:	b29a      	uxth	r2, r3
 800022c:	f107 010e 	add.w	r1, r7, #14
 8000230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000234:	4804      	ldr	r0, [pc, #16]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000236:	f002 f88b 	bl	8002350 <HAL_SPI_Receive>

	csn_high();
 800023a:	f7ff ff87 	bl	800014c <csn_high>

	return data;
 800023e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000088 	.word	0x20000088

0800024c <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000256:	1df9      	adds	r1, r7, #7
 8000258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800025c:	2201      	movs	r2, #1
 800025e:	4803      	ldr	r0, [pc, #12]	@ (800026c <nrf24_w_spec_cmd+0x20>)
 8000260:	f001 ff32 	bl	80020c8 <HAL_SPI_Transmit>
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000088 	.word	0x20000088

08000270 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800027a:	2101      	movs	r1, #1
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ffbd 	bl	80001fc <nrf24_r_reg>
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f043 0302 	orr.w	r3, r3, #2
 800028c:	b2db      	uxtb	r3, r3
 800028e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	2201      	movs	r2, #1
 8000294:	4619      	mov	r1, r3
 8000296:	2000      	movs	r0, #0
 8000298:	f7ff ff88 	bl	80001ac <nrf24_w_reg>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <nrf24_pwr_dwn>:

void nrf24_pwr_dwn(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80002ae:	2101      	movs	r1, #1
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ffa3 	bl	80001fc <nrf24_r_reg>
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PWR_UP);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f023 0302 	bic.w	r3, r3, #2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	2201      	movs	r2, #1
 80002c8:	4619      	mov	r1, r3
 80002ca:	2000      	movs	r0, #0
 80002cc:	f7ff ff6e 	bl	80001ac <nrf24_w_reg>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <nrf24_tx_pwr>:

void nrf24_tx_pwr(uint8_t pwr){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80002e6:	2101      	movs	r1, #1
 80002e8:	2006      	movs	r0, #6
 80002ea:	f7ff ff87 	bl	80001fc <nrf24_r_reg>
 80002ee:	4603      	mov	r3, r0
 80002f0:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	b25a      	sxtb	r2, r3
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	b25b      	sxtb	r3, r3
 8000306:	4313      	orrs	r3, r2
 8000308:	b25b      	sxtb	r3, r3
 800030a:	b2db      	uxtb	r3, r3
 800030c:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 800030e:	f107 030f 	add.w	r3, r7, #15
 8000312:	2201      	movs	r2, #1
 8000314:	4619      	mov	r1, r3
 8000316:	2006      	movs	r0, #6
 8000318:	f7ff ff48 	bl	80001ac <nrf24_w_reg>
}
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000332:	2101      	movs	r1, #1
 8000334:	2006      	movs	r0, #6
 8000336:	f7ff ff61 	bl	80001fc <nrf24_r_reg>
 800033a:	4603      	mov	r3, r0
 800033c:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000344:	b2db      	uxtb	r3, r3
 8000346:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d105      	bne.n	800035a <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	b2db      	uxtb	r3, r3
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e007      	b.n	800036a <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d104      	bne.n	800036a <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	f043 0320 	orr.w	r3, r3, #32
 8000366:	b2db      	uxtb	r3, r3
 8000368:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 800036a:	f107 030f 	add.w	r3, r7, #15
 800036e:	2201      	movs	r2, #1
 8000370:	4619      	mov	r1, r3
 8000372:	2006      	movs	r0, #6
 8000374:	f7ff ff1a 	bl	80001ac <nrf24_w_reg>
}
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 800038a:	1dfb      	adds	r3, r7, #7
 800038c:	2201      	movs	r2, #1
 800038e:	4619      	mov	r1, r3
 8000390:	2005      	movs	r0, #5
 8000392:	f7ff ff0b 	bl	80001ac <nrf24_w_reg>
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}

0800039e <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 800039e:	b580      	push	{r7, lr}
 80003a0:	b082      	sub	sp, #8
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 80003a6:	2205      	movs	r2, #5
 80003a8:	6879      	ldr	r1, [r7, #4]
 80003aa:	2010      	movs	r0, #16
 80003ac:	f7ff fefe 	bl	80001ac <nrf24_w_reg>
}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	460a      	mov	r2, r1
 80003c2:	71fb      	strb	r3, [r7, #7]
 80003c4:	4613      	mov	r3, r2
 80003c6:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	2b20      	cmp	r3, #32
 80003cc:	d901      	bls.n	80003d2 <nrf24_pipe_pld_size+0x1a>
		size = 32;
 80003ce:	2320      	movs	r3, #32
 80003d0:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2b05      	cmp	r3, #5
 80003d6:	d839      	bhi.n	800044c <nrf24_pipe_pld_size+0x94>
 80003d8:	a201      	add	r2, pc, #4	@ (adr r2, 80003e0 <nrf24_pipe_pld_size+0x28>)
 80003da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003de:	bf00      	nop
 80003e0:	080003f9 	.word	0x080003f9
 80003e4:	08000407 	.word	0x08000407
 80003e8:	08000415 	.word	0x08000415
 80003ec:	08000423 	.word	0x08000423
 80003f0:	08000431 	.word	0x08000431
 80003f4:	0800043f 	.word	0x0800043f
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 80003f8:	1dbb      	adds	r3, r7, #6
 80003fa:	2201      	movs	r2, #1
 80003fc:	4619      	mov	r1, r3
 80003fe:	2011      	movs	r0, #17
 8000400:	f7ff fed4 	bl	80001ac <nrf24_w_reg>

		break;
 8000404:	e022      	b.n	800044c <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 8000406:	1dbb      	adds	r3, r7, #6
 8000408:	2201      	movs	r2, #1
 800040a:	4619      	mov	r1, r3
 800040c:	2012      	movs	r0, #18
 800040e:	f7ff fecd 	bl	80001ac <nrf24_w_reg>

		break;
 8000412:	e01b      	b.n	800044c <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 8000414:	1dbb      	adds	r3, r7, #6
 8000416:	2201      	movs	r2, #1
 8000418:	4619      	mov	r1, r3
 800041a:	2013      	movs	r0, #19
 800041c:	f7ff fec6 	bl	80001ac <nrf24_w_reg>

		break;
 8000420:	e014      	b.n	800044c <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 8000422:	1dbb      	adds	r3, r7, #6
 8000424:	2201      	movs	r2, #1
 8000426:	4619      	mov	r1, r3
 8000428:	2014      	movs	r0, #20
 800042a:	f7ff febf 	bl	80001ac <nrf24_w_reg>

		break;
 800042e:	e00d      	b.n	800044c <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000430:	1dbb      	adds	r3, r7, #6
 8000432:	2201      	movs	r2, #1
 8000434:	4619      	mov	r1, r3
 8000436:	2015      	movs	r0, #21
 8000438:	f7ff feb8 	bl	80001ac <nrf24_w_reg>

		break;
 800043c:	e006      	b.n	800044c <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 800043e:	1dbb      	adds	r3, r7, #6
 8000440:	2201      	movs	r2, #1
 8000442:	4619      	mov	r1, r3
 8000444:	2016      	movs	r0, #22
 8000446:	f7ff feb1 	bl	80001ac <nrf24_w_reg>

		break;
 800044a:	bf00      	nop
	}
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <nrf24_cls_rx_pipe>:
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_cls_rx_pipe(uint8_t pipe){
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(EN_RXADDR, 1);
 800045e:	2101      	movs	r1, #1
 8000460:	2002      	movs	r0, #2
 8000462:	f7ff fecb 	bl	80001fc <nrf24_r_reg>
 8000466:	4603      	mov	r3, r0
 8000468:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << pipe);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	2201      	movs	r2, #1
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
 8000472:	b25b      	sxtb	r3, r3
 8000474:	43db      	mvns	r3, r3
 8000476:	b25a      	sxtb	r2, r3
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	b25b      	sxtb	r3, r3
 800047c:	4013      	ands	r3, r2
 800047e:	b25b      	sxtb	r3, r3
 8000480:	b2db      	uxtb	r3, r3
 8000482:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000484:	f107 030f 	add.w	r3, r7, #15
 8000488:	2201      	movs	r2, #1
 800048a:	4619      	mov	r1, r3
 800048c:	2002      	movs	r0, #2
 800048e:	f7ff fe8d 	bl	80001ac <nrf24_w_reg>
}
 8000492:	bf00      	nop
 8000494:	3710      	adds	r7, #16
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <nrf24_set_crc>:

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 800049a:	b580      	push	{r7, lr}
 800049c:	b084      	sub	sp, #16
 800049e:	af00      	add	r7, sp, #0
 80004a0:	4603      	mov	r3, r0
 80004a2:	460a      	mov	r2, r1
 80004a4:	71fb      	strb	r3, [r7, #7]
 80004a6:	4613      	mov	r3, r2
 80004a8:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 80004aa:	2101      	movs	r1, #1
 80004ac:	2000      	movs	r0, #0
 80004ae:	f7ff fea5 	bl	80001fc <nrf24_r_reg>
 80004b2:	4603      	mov	r3, r0
 80004b4:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	f023 030c 	bic.w	r3, r3, #12
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	b25a      	sxtb	r2, r3
 80004c6:	79bb      	ldrb	r3, [r7, #6]
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	4313      	orrs	r3, r2
 80004ce:	b25a      	sxtb	r2, r3
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b25b      	sxtb	r3, r3
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 80004dc:	f107 030f 	add.w	r3, r7, #15
 80004e0:	2201      	movs	r2, #1
 80004e2:	4619      	mov	r1, r3
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff fe61 	bl	80001ac <nrf24_w_reg>
}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	4603      	mov	r3, r0
 80004fa:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	3b02      	subs	r3, #2
 8000500:	b2db      	uxtb	r3, r3
 8000502:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	2201      	movs	r2, #1
 8000508:	4619      	mov	r1, r3
 800050a:	2003      	movs	r0, #3
 800050c:	f7ff fe4e 	bl	80001ac <nrf24_w_reg>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	csn_low();
 800051c:	f7ff fe22 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8000520:	20e1      	movs	r0, #225	@ 0xe1
 8000522:	f7ff fe93 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 8000526:	f7ff fe11 	bl	800014c <csn_high>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}

0800052e <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 800052e:	b580      	push	{r7, lr}
 8000530:	af00      	add	r7, sp, #0
	csn_low();
 8000532:	f7ff fe17 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 8000536:	20e2      	movs	r0, #226	@ 0xe2
 8000538:	f7ff fe88 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 800053c:	f7ff fe06 	bl	800014c <csn_high>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 800054e:	23ff      	movs	r3, #255	@ 0xff
 8000550:	71bb      	strb	r3, [r7, #6]

	csn_low();
 8000552:	f7ff fe07 	bl	8000164 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 8000556:	1dfa      	adds	r2, r7, #7
 8000558:	1db9      	adds	r1, r7, #6
 800055a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2301      	movs	r3, #1
 8000562:	4805      	ldr	r0, [pc, #20]	@ (8000578 <nrf24_r_status+0x34>)
 8000564:	f002 f80d 	bl	8002582 <HAL_SPI_TransmitReceive>
	csn_high();
 8000568:	f7ff fdf0 	bl	800014c <csn_high>

	return data;
 800056c:	79fb      	ldrb	r3, [r7, #7]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000088 	.word	0x20000088

0800057c <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8000586:	f7ff ffdd 	bl	8000544 <nrf24_r_status>
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000594:	b2db      	uxtb	r3, r3
 8000596:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	2201      	movs	r2, #1
 800059c:	4619      	mov	r1, r3
 800059e:	2007      	movs	r0, #7
 80005a0:	f7ff fe04 	bl	80001ac <nrf24_w_reg>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005b6:	f7ff ffc5 	bl	8000544 <nrf24_r_status>
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f043 0320 	orr.w	r3, r3, #32
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80005c8:	1dfb      	adds	r3, r7, #7
 80005ca:	2201      	movs	r2, #1
 80005cc:	4619      	mov	r1, r3
 80005ce:	2007      	movs	r0, #7
 80005d0:	f7ff fdec 	bl	80001ac <nrf24_w_reg>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005e6:	f7ff ffad 	bl	8000544 <nrf24_r_status>
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f043 0310 	orr.w	r3, r3, #16
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80005f8:	1dfb      	adds	r3, r7, #7
 80005fa:	2201      	movs	r2, #1
 80005fc:	4619      	mov	r1, r3
 80005fe:	2007      	movs	r0, #7
 8000600:	f7ff fdd4 	bl	80001ac <nrf24_w_reg>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000616:	2101      	movs	r1, #1
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff fdef 	bl	80001fc <nrf24_r_reg>
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f023 0301 	bic.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	2201      	movs	r2, #1
 8000630:	4619      	mov	r1, r3
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff fdba 	bl	80001ac <nrf24_w_reg>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 800064a:	2101      	movs	r1, #1
 800064c:	201d      	movs	r0, #29
 800064e:	f7ff fdd5 	bl	80001fc <nrf24_r_reg>
 8000652:	4603      	mov	r3, r0
 8000654:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d105      	bne.n	8000668 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	b2db      	uxtb	r3, r3
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	e004      	b.n	8000672 <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	f023 0304 	bic.w	r3, r3, #4
 800066e:	b2db      	uxtb	r3, r3
 8000670:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8000672:	f107 030f 	add.w	r3, r7, #15
 8000676:	2201      	movs	r2, #1
 8000678:	4619      	mov	r1, r3
 800067a:	201d      	movs	r0, #29
 800067c:	f7ff fd96 	bl	80001ac <nrf24_w_reg>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <nrf24_set_rx_dpl>:

void nrf24_set_rx_dpl(uint8_t pipe, uint8_t en){
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]

	uint8_t dynpd = nrf24_r_reg(DYNPD, 1);
 8000698:	2101      	movs	r1, #1
 800069a:	201c      	movs	r0, #28
 800069c:	f7ff fdae 	bl	80001fc <nrf24_r_reg>
 80006a0:	4603      	mov	r3, r0
 80006a2:	73fb      	strb	r3, [r7, #15]

	if(pipe > 5){
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b05      	cmp	r3, #5
 80006a8:	d901      	bls.n	80006ae <nrf24_set_rx_dpl+0x26>
		pipe = 5;
 80006aa:	2305      	movs	r3, #5
 80006ac:	71fb      	strb	r3, [r7, #7]
	}

	if(en){
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00b      	beq.n	80006cc <nrf24_set_rx_dpl+0x44>
		dynpd |= (1 << pipe);
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2201      	movs	r2, #1
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	b25a      	sxtb	r2, r3
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e00c      	b.n	80006e6 <nrf24_set_rx_dpl+0x5e>
	}else{
		dynpd &= ~(1 << pipe);
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2201      	movs	r2, #1
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	43db      	mvns	r3, r3
 80006d8:	b25a      	sxtb	r2, r3
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	4013      	ands	r3, r2
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
 80006e6:	f107 030f 	add.w	r3, r7, #15
 80006ea:	2201      	movs	r2, #1
 80006ec:	4619      	mov	r1, r3
 80006ee:	201c      	movs	r0, #28
 80006f0:	f7ff fd5c 	bl	80001ac <nrf24_w_reg>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <nrf24_auto_ack>:

void nrf24_auto_ack(uint8_t pipe, uint8_t ack){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]

	if(pipe > 5){
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b05      	cmp	r3, #5
 8000710:	d901      	bls.n	8000716 <nrf24_auto_ack+0x1a>
		pipe = 5;
 8000712:	2305      	movs	r3, #5
 8000714:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000716:	2101      	movs	r1, #1
 8000718:	2001      	movs	r0, #1
 800071a:	f7ff fd6f 	bl	80001fc <nrf24_r_reg>
 800071e:	4603      	mov	r3, r0
 8000720:	73fb      	strb	r3, [r7, #15]

	if(ack){
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00b      	beq.n	8000740 <nrf24_auto_ack+0x44>
		enaa |= (1 << pipe);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2201      	movs	r2, #1
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	b25a      	sxtb	r2, r3
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	b25b      	sxtb	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b25b      	sxtb	r3, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	73fb      	strb	r3, [r7, #15]
 800073e:	e00c      	b.n	800075a <nrf24_auto_ack+0x5e>
	}else{
		enaa &= ~(1 << pipe);
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2201      	movs	r2, #1
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	b25b      	sxtb	r3, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	b25a      	sxtb	r2, r3
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	b25b      	sxtb	r3, r3
 8000752:	4013      	ands	r3, r2
 8000754:	b25b      	sxtb	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 800075a:	f107 030f 	add.w	r3, r7, #15
 800075e:	2201      	movs	r2, #1
 8000760:	4619      	mov	r1, r3
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fd22 	bl	80001ac <nrf24_w_reg>
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <nrf24_auto_ack_all>:

void nrf24_auto_ack_all(uint8_t ack){
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 800077a:	2101      	movs	r1, #1
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff fd3d 	bl	80001fc <nrf24_r_reg>
 8000782:	4603      	mov	r3, r0
 8000784:	73fb      	strb	r3, [r7, #15]

	if(ack){
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d002      	beq.n	8000792 <nrf24_auto_ack_all+0x22>
		enaa = 63;
 800078c:	233f      	movs	r3, #63	@ 0x3f
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e001      	b.n	8000796 <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000796:	f107 030f 	add.w	r3, r7, #15
 800079a:	2201      	movs	r2, #1
 800079c:	4619      	mov	r1, r3
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fd04 	bl	80001ac <nrf24_w_reg>
}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80007b6:	2101      	movs	r1, #1
 80007b8:	201d      	movs	r0, #29
 80007ba:	f7ff fd1f 	bl	80001fc <nrf24_r_reg>
 80007be:	4603      	mov	r3, r0
 80007c0:	73fb      	strb	r3, [r7, #15]

	if(en){
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d005      	beq.n	80007d4 <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	73fb      	strb	r3, [r7, #15]
 80007d2:	e004      	b.n	80007de <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	f023 0302 	bic.w	r3, r3, #2
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80007de:	f107 030f 	add.w	r3, r7, #15
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	201d      	movs	r0, #29
 80007e8:	f7ff fce0 	bl	80001ac <nrf24_w_reg>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80007fe:	2101      	movs	r1, #1
 8000800:	201d      	movs	r0, #29
 8000802:	f7ff fcfb 	bl	80001fc <nrf24_r_reg>
 8000806:	4603      	mov	r3, r0
 8000808:	73fb      	strb	r3, [r7, #15]

	if(en){
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d005      	beq.n	800081c <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	73fb      	strb	r3, [r7, #15]
 800081a:	e004      	b.n	8000826 <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	f023 0301 	bic.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8000826:	f107 030f 	add.w	r3, r7, #15
 800082a:	2201      	movs	r2, #1
 800082c:	4619      	mov	r1, r3
 800082e:	201d      	movs	r0, #29
 8000830:	f7ff fcbc 	bl	80001ac <nrf24_w_reg>
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <nrf24_auto_retr_delay>:

void nrf24_auto_retr_delay(uint8_t delay){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8000846:	2101      	movs	r1, #1
 8000848:	2004      	movs	r0, #4
 800084a:	f7ff fcd7 	bl	80001fc <nrf24_r_reg>
 800084e:	4603      	mov	r3, r0
 8000850:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	b2db      	uxtb	r3, r3
 800085a:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	b25a      	sxtb	r2, r3
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	b25b      	sxtb	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	b25b      	sxtb	r3, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 800086e:	f107 030f 	add.w	r3, r7, #15
 8000872:	2201      	movs	r2, #1
 8000874:	4619      	mov	r1, r3
 8000876:	2004      	movs	r0, #4
 8000878:	f7ff fc98 	bl	80001ac <nrf24_w_reg>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 800088e:	2101      	movs	r1, #1
 8000890:	2004      	movs	r0, #4
 8000892:	f7ff fcb3 	bl	80001fc <nrf24_r_reg>
 8000896:	4603      	mov	r3, r0
 8000898:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	f023 030f 	bic.w	r3, r3, #15
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 80008a4:	7bfa      	ldrb	r2, [r7, #15]
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80008ae:	f107 030f 	add.w	r3, r7, #15
 80008b2:	2201      	movs	r2, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	2004      	movs	r0, #4
 80008b8:	f7ff fc78 	bl	80001ac <nrf24_w_reg>
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]

	ce_low();
 80008d0:	f7ff fc60 	bl	8000194 <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 80008d4:	23a0      	movs	r3, #160	@ 0xa0
 80008d6:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80008d8:	f7ff fc44 	bl	8000164 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80008dc:	f107 010f 	add.w	r1, r7, #15
 80008e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e4:	2201      	movs	r2, #1
 80008e6:	4813      	ldr	r0, [pc, #76]	@ (8000934 <nrf24_transmit+0x70>)
 80008e8:	f001 fbee 	bl	80020c8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	480f      	ldr	r0, [pc, #60]	@ (8000934 <nrf24_transmit+0x70>)
 80008f8:	f001 fbe6 	bl	80020c8 <HAL_SPI_Transmit>
	csn_high();
 80008fc:	f7ff fc26 	bl	800014c <csn_high>

	ce_high();
 8000900:	f7ff fc3c 	bl	800017c <ce_high>
	HAL_Delay(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f000 fca7 	bl	8001258 <HAL_Delay>
	ce_low();
 800090a:	f7ff fc43 	bl	8000194 <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 800090e:	f7ff fe19 	bl	8000544 <nrf24_r_status>
 8000912:	4603      	mov	r3, r0
 8000914:	f003 0310 	and.w	r3, r3, #16
 8000918:	2b00      	cmp	r3, #0
 800091a:	d005      	beq.n	8000928 <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 800091c:	f7ff fe5e 	bl	80005dc <nrf24_clear_max_rt>
		nrf24_flush_tx();
 8000920:	f7ff fdfa 	bl	8000518 <nrf24_flush_tx>
		return 1;
 8000924:	2301      	movs	r3, #1
 8000926:	e000      	b.n	800092a <nrf24_transmit+0x66>
	}

	return 0;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000088 	.word	0x20000088

08000938 <nrf24_defaults>:
	csn_high();

	nrf24_clear_rx_dr();
}

void nrf24_defaults(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	ce_low();
 800093e:	f7ff fc29 	bl	8000194 <ce_low>

	nrf24_pwr_dwn();
 8000942:	f7ff fcaf 	bl	80002a4 <nrf24_pwr_dwn>
	nrf24_tx_pwr(3);
 8000946:	2003      	movs	r0, #3
 8000948:	f7ff fcc6 	bl	80002d8 <nrf24_tx_pwr>
	nrf24_data_rate(_1mbps);
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff fce9 	bl	8000324 <nrf24_data_rate>
	nrf24_set_channel(2);
 8000952:	2002      	movs	r0, #2
 8000954:	f7ff fd14 	bl	8000380 <nrf24_set_channel>
	nrf24_set_crc(no_crc, _1byte);
 8000958:	2100      	movs	r1, #0
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fd9d 	bl	800049a <nrf24_set_crc>
	nrf24_set_addr_width(5);
 8000960:	2005      	movs	r0, #5
 8000962:	f7ff fdc6 	bl	80004f2 <nrf24_set_addr_width>
	nrf24_flush_tx();
 8000966:	f7ff fdd7 	bl	8000518 <nrf24_flush_tx>
	nrf24_flush_rx();
 800096a:	f7ff fde0 	bl	800052e <nrf24_flush_rx>
	nrf24_clear_rx_dr();
 800096e:	f7ff fe05 	bl	800057c <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8000972:	f7ff fe1b 	bl	80005ac <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000976:	f7ff fe31 	bl	80005dc <nrf24_clear_max_rt>
	nrf24_stop_listen();
 800097a:	f7ff fe47 	bl	800060c <nrf24_stop_listen>
	nrf24_dpl(disable);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fe5e 	bl	8000640 <nrf24_dpl>
	nrf24_en_ack_pld(disable);
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff ff11 	bl	80007ac <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff ff32 	bl	80007f4 <nrf24_en_dyn_ack>
	nrf24_auto_retr_delay(0);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ff53 	bl	800083c <nrf24_auto_retr_delay>
	nrf24_auto_retr_limit(3);
 8000996:	2003      	movs	r0, #3
 8000998:	f7ff ff74 	bl	8000884 <nrf24_auto_retr_limit>


	for(uint8_t i = 0; i < 5; i++){
 800099c:	2300      	movs	r3, #0
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	e015      	b.n	80009ce <nrf24_defaults+0x96>
		nrf24_pipe_pld_size(i, 0);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fd06 	bl	80003b8 <nrf24_pipe_pld_size>
		nrf24_cls_rx_pipe(i);
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fd50 	bl	8000454 <nrf24_cls_rx_pipe>
		nrf24_set_rx_dpl(i, disable);
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe65 	bl	8000688 <nrf24_set_rx_dpl>
		nrf24_auto_ack(i, enable);
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2101      	movs	r1, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fe9a 	bl	80006fc <nrf24_auto_ack>
	for(uint8_t i = 0; i < 5; i++){
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	3301      	adds	r3, #1
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d9e6      	bls.n	80009a2 <nrf24_defaults+0x6a>
	}

	ce_high();
 80009d4:	f7ff fbd2 	bl	800017c <ce_high>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab4 <MX_GPIO_Init+0xd4>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab4 <MX_GPIO_Init+0xd4>)
 80009fa:	f043 0320 	orr.w	r3, r3, #32
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b29      	ldr	r3, [pc, #164]	@ (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a28      	ldr	r2, [pc, #160]	@ (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b26      	ldr	r3, [pc, #152]	@ (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b23      	ldr	r3, [pc, #140]	@ (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a22      	ldr	r2, [pc, #136]	@ (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b20      	ldr	r3, [pc, #128]	@ (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0310 	and.w	r3, r3, #16
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin_Pin|GPIO_PIN_4|CE_Pin_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f240 1111 	movw	r1, #273	@ 0x111
 8000a42:	481d      	ldr	r0, [pc, #116]	@ (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a44:	f000 fe94 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000a4e:	481b      	ldr	r0, [pc, #108]	@ (8000abc <MX_GPIO_Init+0xdc>)
 8000a50:	f000 fe8e 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_pin_Pin CE_pin_Pin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin|CE_Pin_Pin;
 8000a54:	f240 1301 	movw	r3, #257	@ 0x101
 8000a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4812      	ldr	r0, [pc, #72]	@ (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a6e:	f000 fcfb 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a72:	2310      	movs	r3, #16
 8000a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4619      	mov	r1, r3
 8000a88:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a8a:	f000 fced 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000a8e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_GPIO_Init+0xdc>)
 8000aa8:	f000 fcde 	bl	8001468 <HAL_GPIO_Init>

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	40011000 	.word	0x40011000

08000ac0 <nrf24_set_payload_size>:
 * Receive data
 */
void nrf24_receive(uint8_t *data, uint8_t size);

static inline void nrf24_set_payload_size(uint8_t size)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
    nrf24_pipe_pld_size(0, size);   // 파이프 0만 사용
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4619      	mov	r1, r3
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff fc72 	bl	80003b8 <nrf24_pipe_pld_size>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <nrf24_transmitter_setup>:
/* USER CODE BEGIN 0 */
uint8_t tx_data[] = {'h', 'i','i'};      // '\0' 빼고 2바이트


void nrf24_transmitter_setup(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0




    uint8_t tx_address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7}; // 송신기 주소
 8000ae2:	4a15      	ldr	r2, [pc, #84]	@ (8000b38 <nrf24_transmitter_setup+0x5c>)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aea:	6018      	str	r0, [r3, #0]
 8000aec:	3304      	adds	r3, #4
 8000aee:	7019      	strb	r1, [r3, #0]
    nrf24_open_tx_pipe(tx_address);
 8000af0:	463b      	mov	r3, r7
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fc53 	bl	800039e <nrf24_open_tx_pipe>

    nrf24_defaults();  // NRF24 모듈을 기본 설정으로 초기화
 8000af8:	f7ff ff1e 	bl	8000938 <nrf24_defaults>
    nrf24_pwr_up();
 8000afc:	f7ff fbb8 	bl	8000270 <nrf24_pwr_up>
    HAL_Delay(5);        // datasheet 권장: >4.5ms
 8000b00:	2005      	movs	r0, #5
 8000b02:	f000 fba9 	bl	8001258 <HAL_Delay>
    nrf24_stop_listen();
 8000b06:	f7ff fd81 	bl	800060c <nrf24_stop_listen>


    nrf24_set_channel(40);
 8000b0a:	2028      	movs	r0, #40	@ 0x28
 8000b0c:	f7ff fc38 	bl	8000380 <nrf24_set_channel>
    nrf24_set_payload_size(2);
 8000b10:	2002      	movs	r0, #2
 8000b12:	f7ff ffd5 	bl	8000ac0 <nrf24_set_payload_size>
     nrf24_auto_ack_all(disable);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fe2a 	bl	8000770 <nrf24_auto_ack_all>
          // 내부적으로 CONFIG.PRIM_RX=0, CE=0 처리



     nrf24_open_tx_pipe((uint8_t*)tx_address);
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fc3d 	bl	800039e <nrf24_open_tx_pipe>

    nrf24_tx_pwr(3); // 전송 파워 설정 (필요에 따라 조정)
 8000b24:	2003      	movs	r0, #3
 8000b26:	f7ff fbd7 	bl	80002d8 <nrf24_tx_pwr>
    nrf24_data_rate(_1mbps); // 데이터 전송 속도 설정 (1mbps 일반적으로 사용)
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff fbfa 	bl	8000324 <nrf24_data_rate>


}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	08003e7c 	.word	0x08003e7c

08000b3c <debug_dump_settings>:

void debug_dump_settings(void) {
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b087      	sub	sp, #28
 8000b40:	af02      	add	r7, sp, #8
    uint8_t ch     = nrf24_r_reg(RF_CH,      1);
 8000b42:	2101      	movs	r1, #1
 8000b44:	2005      	movs	r0, #5
 8000b46:	f7ff fb59 	bl	80001fc <nrf24_r_reg>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	73fb      	strb	r3, [r7, #15]
    uint8_t pw     = nrf24_r_reg(RX_PW_P0,   1);
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2011      	movs	r0, #17
 8000b52:	f7ff fb53 	bl	80001fc <nrf24_r_reg>
 8000b56:	4603      	mov	r3, r0
 8000b58:	73bb      	strb	r3, [r7, #14]
    uint8_t addr[5] = {0};
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	733b      	strb	r3, [r7, #12]

    // RX_ADDR_P0 레지스터(0x0A)부터 5바이트 읽기
    csn_low();
 8000b62:	f7ff faff 	bl	8000164 <csn_low>
      uint8_t cmd = R_REGISTER | RX_ADDR_P0;
 8000b66:	230a      	movs	r3, #10
 8000b68:	71fb      	strb	r3, [r7, #7]
      HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_rw_timeout);
 8000b6a:	1df9      	adds	r1, r7, #7
 8000b6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b70:	2201      	movs	r2, #1
 8000b72:	4818      	ldr	r0, [pc, #96]	@ (8000bd4 <debug_dump_settings+0x98>)
 8000b74:	f001 faa8 	bl	80020c8 <HAL_SPI_Transmit>
      HAL_SPI_Receive (&hspiX, addr, 5, spi_r_timeout);
 8000b78:	f107 0108 	add.w	r1, r7, #8
 8000b7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b80:	2205      	movs	r2, #5
 8000b82:	4814      	ldr	r0, [pc, #80]	@ (8000bd4 <debug_dump_settings+0x98>)
 8000b84:	f001 fbe4 	bl	8002350 <HAL_SPI_Receive>
    csn_high();
 8000b88:	f7ff fae0 	bl	800014c <csn_high>

    printf("=== DEBUG SETTINGS ===\r\n");
 8000b8c:	4812      	ldr	r0, [pc, #72]	@ (8000bd8 <debug_dump_settings+0x9c>)
 8000b8e:	f002 fafb 	bl	8003188 <puts>
    printf(" RF_CH       = %u\r\n", ch);
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	4619      	mov	r1, r3
 8000b96:	4811      	ldr	r0, [pc, #68]	@ (8000bdc <debug_dump_settings+0xa0>)
 8000b98:	f002 fa8e 	bl	80030b8 <iprintf>
    printf(" RX_PW_P0    = %u bytes\r\n", pw);
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480f      	ldr	r0, [pc, #60]	@ (8000be0 <debug_dump_settings+0xa4>)
 8000ba2:	f002 fa89 	bl	80030b8 <iprintf>
    printf(" RX_ADDR_P0  = %02X %02X %02X %02X %02X\r\n",
           addr[0], addr[1], addr[2], addr[3], addr[4]);
 8000ba6:	7a3b      	ldrb	r3, [r7, #8]
    printf(" RX_ADDR_P0  = %02X %02X %02X %02X %02X\r\n",
 8000ba8:	4619      	mov	r1, r3
           addr[0], addr[1], addr[2], addr[3], addr[4]);
 8000baa:	7a7b      	ldrb	r3, [r7, #9]
    printf(" RX_ADDR_P0  = %02X %02X %02X %02X %02X\r\n",
 8000bac:	4618      	mov	r0, r3
           addr[0], addr[1], addr[2], addr[3], addr[4]);
 8000bae:	7abb      	ldrb	r3, [r7, #10]
    printf(" RX_ADDR_P0  = %02X %02X %02X %02X %02X\r\n",
 8000bb0:	461c      	mov	r4, r3
           addr[0], addr[1], addr[2], addr[3], addr[4]);
 8000bb2:	7afb      	ldrb	r3, [r7, #11]
 8000bb4:	7b3a      	ldrb	r2, [r7, #12]
    printf(" RX_ADDR_P0  = %02X %02X %02X %02X %02X\r\n",
 8000bb6:	9201      	str	r2, [sp, #4]
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	4623      	mov	r3, r4
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	4809      	ldr	r0, [pc, #36]	@ (8000be4 <debug_dump_settings+0xa8>)
 8000bc0:	f002 fa7a 	bl	80030b8 <iprintf>
    printf("======================\r\n");
 8000bc4:	4808      	ldr	r0, [pc, #32]	@ (8000be8 <debug_dump_settings+0xac>)
 8000bc6:	f002 fadf 	bl	8003188 <puts>
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000088 	.word	0x20000088
 8000bd8:	08003e84 	.word	0x08003e84
 8000bdc:	08003e9c 	.word	0x08003e9c
 8000be0:	08003eb0 	.word	0x08003eb0
 8000be4:	08003ecc 	.word	0x08003ecc
 8000be8:	08003ef8 	.word	0x08003ef8

08000bec <transmit_hi>:

void transmit_hi(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	 uint8_t wr = 40;                    // 쓰고 싶은 채널 값
 8000bf2:	2328      	movs	r3, #40	@ 0x28
 8000bf4:	71bb      	strb	r3, [r7, #6]
		          nrf24_w_reg(RF_CH, &wr, 1);         // RF_CH 레지스터에 40(0x28) 쓰기
 8000bf6:	1dbb      	adds	r3, r7, #6
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	2005      	movs	r0, #5
 8000bfe:	f7ff fad5 	bl	80001ac <nrf24_w_reg>
		          uint8_t rd = nrf24_r_reg(RF_CH, 1); // 바로 다시 읽기
 8000c02:	2101      	movs	r1, #1
 8000c04:	2005      	movs	r0, #5
 8000c06:	f7ff faf9 	bl	80001fc <nrf24_r_reg>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
		          printf("TEST RF_CH = %u\r\n", rd);  // rd가 40인지 확인
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4619      	mov	r1, r3
 8000c12:	4813      	ldr	r0, [pc, #76]	@ (8000c60 <transmit_hi+0x74>)
 8000c14:	f002 fa50 	bl	80030b8 <iprintf>
    // 데이터 전송
    if (nrf24_transmit(tx_data, sizeof(tx_data)) == 0) {
 8000c18:	2103      	movs	r1, #3
 8000c1a:	4812      	ldr	r0, [pc, #72]	@ (8000c64 <transmit_hi+0x78>)
 8000c1c:	f7ff fe52 	bl	80008c4 <nrf24_transmit>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10c      	bne.n	8000c40 <transmit_hi+0x54>
        // 전송 성공 시, LED를 켜서 피드백
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);  // PC6 핀에 연결된 LED 켜기
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c2c:	480e      	ldr	r0, [pc, #56]	@ (8000c68 <transmit_hi+0x7c>)
 8000c2e:	f000 fd9f 	bl	8001770 <HAL_GPIO_WritePin>
        nrf24_flush_tx();  // 송신 버퍼 플러시
 8000c32:	f7ff fc71 	bl	8000518 <nrf24_flush_tx>

        printf("Sent Data: %s\n", tx_data);  // 송신된 데이터를 터미널에 출력
 8000c36:	490b      	ldr	r1, [pc, #44]	@ (8000c64 <transmit_hi+0x78>)
 8000c38:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <transmit_hi+0x80>)
 8000c3a:	f002 fa3d 	bl	80030b8 <iprintf>

    }



}
 8000c3e:	e00a      	b.n	8000c56 <transmit_hi+0x6a>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);  // PC6 핀에 전압을 출력 (LED 켜짐)
 8000c40:	2201      	movs	r2, #1
 8000c42:	2140      	movs	r1, #64	@ 0x40
 8000c44:	4808      	ldr	r0, [pc, #32]	@ (8000c68 <transmit_hi+0x7c>)
 8000c46:	f000 fd93 	bl	8001770 <HAL_GPIO_WritePin>
    	 nrf24_flush_tx();  // 송신 버퍼 플러시
 8000c4a:	f7ff fc65 	bl	8000518 <nrf24_flush_tx>
    	 printf("Failed to send data: %s\n", tx_data);  // 전송 실패 메시지
 8000c4e:	4905      	ldr	r1, [pc, #20]	@ (8000c64 <transmit_hi+0x78>)
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <transmit_hi+0x84>)
 8000c52:	f002 fa31 	bl	80030b8 <iprintf>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	08003f10 	.word	0x08003f10
 8000c64:	20000000 	.word	0x20000000
 8000c68:	40011000 	.word	0x40011000
 8000c6c:	08003f24 	.word	0x08003f24
 8000c70:	08003f34 	.word	0x08003f34

08000c74 <__io_putchar>:

int __io_putchar(int ch)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);  // UART2로 데이터 전송
 8000c7c:	1d39      	adds	r1, r7, #4
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	2201      	movs	r2, #1
 8000c84:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <__io_putchar+0x20>)
 8000c86:	f001 ff80 	bl	8002b8a <HAL_UART_Transmit>
    return ch;
 8000c8a:	687b      	ldr	r3, [r7, #4]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000e4 	.word	0x200000e4

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9c:	f000 fa7a 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca0:	f000 f812 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca4:	f7ff fe9c 	bl	80009e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ca8:	f000 f856 	bl	8000d58 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000cac:	f000 f9d8 	bl	8001060 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  nrf24_transmitter_setup();
 8000cb0:	f7ff ff14 	bl	8000adc <nrf24_transmitter_setup>
  debug_dump_settings();
 8000cb4:	f7ff ff42 	bl	8000b3c <debug_dump_settings>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   transmit_hi();  // "hi" 전송
 8000cb8:	f7ff ff98 	bl	8000bec <transmit_hi>
	 // debug_setup();

	         HAL_Delay(1000); // 2초 대기
 8000cbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cc0:	f000 faca 	bl	8001258 <HAL_Delay>
	   transmit_hi();  // "hi" 전송
 8000cc4:	bf00      	nop
 8000cc6:	e7f7      	b.n	8000cb8 <main+0x20>

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b090      	sub	sp, #64	@ 0x40
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0318 	add.w	r3, r7, #24
 8000cd2:	2228      	movs	r2, #40	@ 0x28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 fb36 	bl	8003348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cfe:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fd49 	bl	80017a0 <HAL_RCC_OscConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d14:	f000 f819 	bl	8000d4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d18:	230f      	movs	r3, #15
 8000d1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2102      	movs	r1, #2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 ffb6 	bl	8001ca4 <HAL_RCC_ClockConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d3e:	f000 f804 	bl	8000d4a <Error_Handler>
  }
}
 8000d42:	bf00      	nop
 8000d44:	3740      	adds	r7, #64	@ 0x40
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4e:	b672      	cpsid	i
}
 8000d50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d52:	bf00      	nop
 8000d54:	e7fd      	b.n	8000d52 <Error_Handler+0x8>
	...

08000d58 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000d5e:	4a18      	ldr	r2, [pc, #96]	@ (8000dc0 <MX_SPI1_Init+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d62:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000d64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000d8c:	2218      	movs	r2, #24
 8000d8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000da4:	220a      	movs	r2, #10
 8000da6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <MX_SPI1_Init+0x64>)
 8000daa:	f001 f909 	bl	8001fc0 <HAL_SPI_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db4:	f7ff ffc9 	bl	8000d4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000088 	.word	0x20000088
 8000dc0:	40013000 	.word	0x40013000

08000dc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <HAL_SPI_MspInit+0x88>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d12f      	bne.n	8000e44 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <HAL_SPI_MspInit+0x8c>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a19      	ldr	r2, [pc, #100]	@ (8000e50 <HAL_SPI_MspInit+0x8c>)
 8000dea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <HAL_SPI_MspInit+0x8c>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <HAL_SPI_MspInit+0x8c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a13      	ldr	r2, [pc, #76]	@ (8000e50 <HAL_SPI_MspInit+0x8c>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_SPI_MspInit+0x8c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e14:	23a0      	movs	r3, #160	@ 0xa0
 8000e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	480b      	ldr	r0, [pc, #44]	@ (8000e54 <HAL_SPI_MspInit+0x90>)
 8000e28:	f000 fb1e 	bl	8001468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e2c:	2340      	movs	r3, #64	@ 0x40
 8000e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <HAL_SPI_MspInit+0x90>)
 8000e40:	f000 fb12 	bl	8001468 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010800 	.word	0x40010800

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_MspInit+0x60>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <HAL_MspInit+0x60>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 f988 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e00a      	b.n	8000f3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f26:	f3af 8000 	nop.w
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	b2ca      	uxtb	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf0      	blt.n	8000f26 <_read+0x12>
  }

  return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e009      	b.n	8000f74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fe83 	bl	8000c74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dbf1      	blt.n	8000f60 <_write+0x12>
  }
  return len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_close>:

int _close(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fac:	605a      	str	r2, [r3, #4]
  return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <_isatty>:

int _isatty(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f002 f9e4 	bl	80033e4 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20005000 	.word	0x20005000
 8001048:	00000400 	.word	0x00000400
 800104c:	200000e0 	.word	0x200000e0
 8001050:	20000280 	.word	0x20000280

08001054 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <MX_USART2_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001098:	f001 fd27 	bl	8002aea <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f7ff fe52 	bl	8000d4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200000e4 	.word	0x200000e4
 80010b0:	40004400 	.word	0x40004400

080010b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1b      	ldr	r2, [pc, #108]	@ (800113c <HAL_UART_MspInit+0x88>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d12f      	bne.n	8001134 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <HAL_UART_MspInit+0x8c>)
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <HAL_UART_MspInit+0x8c>)
 80010da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010de:	61d3      	str	r3, [r2, #28]
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_UART_MspInit+0x8c>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <HAL_UART_MspInit+0x8c>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <HAL_UART_MspInit+0x8c>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_UART_MspInit+0x8c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001104:	2304      	movs	r3, #4
 8001106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	480b      	ldr	r0, [pc, #44]	@ (8001144 <HAL_UART_MspInit+0x90>)
 8001118:	f000 f9a6 	bl	8001468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800111c:	2308      	movs	r3, #8
 800111e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <HAL_UART_MspInit+0x90>)
 8001130:	f000 f99a 	bl	8001468 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40004400 	.word	0x40004400
 8001140:	40021000 	.word	0x40021000
 8001144:	40010800 	.word	0x40010800

08001148 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001148:	f7ff ff84 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480b      	ldr	r0, [pc, #44]	@ (800117c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800114e:	490c      	ldr	r1, [pc, #48]	@ (8001180 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001150:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a09      	ldr	r2, [pc, #36]	@ (8001188 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001164:	4c09      	ldr	r4, [pc, #36]	@ (800118c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001172:	f002 f93d 	bl	80033f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001176:	f7ff fd8f 	bl	8000c98 <main>
  bx lr
 800117a:	4770      	bx	lr
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001184:	08003fb8 	.word	0x08003fb8
  ldr r2, =_sbss
 8001188:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800118c:	2000027c 	.word	0x2000027c

08001190 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_2_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <HAL_Init+0x28>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	@ (80011bc <HAL_Init+0x28>)
 800119e:	f043 0310 	orr.w	r3, r3, #16
 80011a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f92b 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f000 f808 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fe52 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40022000 	.word	0x40022000

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_InitTick+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_InitTick+0x58>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f935 	bl	800144e <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f000 f90b 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	@ (800121c <HAL_InitTick+0x5c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000004 	.word	0x20000004
 8001218:	2000000c 	.word	0x2000000c
 800121c:	20000008 	.word	0x20000008

08001220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <HAL_IncTick+0x1c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <HAL_IncTick+0x20>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a03      	ldr	r2, [pc, #12]	@ (8001240 <HAL_IncTick+0x20>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	2000000c 	.word	0x2000000c
 8001240:	2000012c 	.word	0x2000012c

08001244 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b02      	ldr	r3, [pc, #8]	@ (8001254 <HAL_GetTick+0x10>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	2000012c 	.word	0x2000012c

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff fff0 	bl	8001244 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffe0 	bl	8001244 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000000c 	.word	0x2000000c

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	@ (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	@ (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff90 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff49 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff5e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff90 	bl	8001358 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5f 	bl	8001304 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ffb0 	bl	80013bc <SysTick_Config>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b08b      	sub	sp, #44	@ 0x2c
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147a:	e169      	b.n	8001750 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800147c:	2201      	movs	r2, #1
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	429a      	cmp	r2, r3
 8001496:	f040 8158 	bne.w	800174a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a9a      	ldr	r2, [pc, #616]	@ (8001708 <HAL_GPIO_Init+0x2a0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d05e      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014a4:	4a98      	ldr	r2, [pc, #608]	@ (8001708 <HAL_GPIO_Init+0x2a0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d875      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014aa:	4a98      	ldr	r2, [pc, #608]	@ (800170c <HAL_GPIO_Init+0x2a4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d058      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014b0:	4a96      	ldr	r2, [pc, #600]	@ (800170c <HAL_GPIO_Init+0x2a4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d86f      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014b6:	4a96      	ldr	r2, [pc, #600]	@ (8001710 <HAL_GPIO_Init+0x2a8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d052      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014bc:	4a94      	ldr	r2, [pc, #592]	@ (8001710 <HAL_GPIO_Init+0x2a8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d869      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014c2:	4a94      	ldr	r2, [pc, #592]	@ (8001714 <HAL_GPIO_Init+0x2ac>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d04c      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014c8:	4a92      	ldr	r2, [pc, #584]	@ (8001714 <HAL_GPIO_Init+0x2ac>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d863      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014ce:	4a92      	ldr	r2, [pc, #584]	@ (8001718 <HAL_GPIO_Init+0x2b0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d046      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014d4:	4a90      	ldr	r2, [pc, #576]	@ (8001718 <HAL_GPIO_Init+0x2b0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d85d      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014da:	2b12      	cmp	r3, #18
 80014dc:	d82a      	bhi.n	8001534 <HAL_GPIO_Init+0xcc>
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d859      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014e2:	a201      	add	r2, pc, #4	@ (adr r2, 80014e8 <HAL_GPIO_Init+0x80>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	08001563 	.word	0x08001563
 80014ec:	0800153d 	.word	0x0800153d
 80014f0:	0800154f 	.word	0x0800154f
 80014f4:	08001591 	.word	0x08001591
 80014f8:	08001597 	.word	0x08001597
 80014fc:	08001597 	.word	0x08001597
 8001500:	08001597 	.word	0x08001597
 8001504:	08001597 	.word	0x08001597
 8001508:	08001597 	.word	0x08001597
 800150c:	08001597 	.word	0x08001597
 8001510:	08001597 	.word	0x08001597
 8001514:	08001597 	.word	0x08001597
 8001518:	08001597 	.word	0x08001597
 800151c:	08001597 	.word	0x08001597
 8001520:	08001597 	.word	0x08001597
 8001524:	08001597 	.word	0x08001597
 8001528:	08001597 	.word	0x08001597
 800152c:	08001545 	.word	0x08001545
 8001530:	08001559 	.word	0x08001559
 8001534:	4a79      	ldr	r2, [pc, #484]	@ (800171c <HAL_GPIO_Init+0x2b4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800153a:	e02c      	b.n	8001596 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e029      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	3304      	adds	r3, #4
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e024      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	3308      	adds	r3, #8
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e01f      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	330c      	adds	r3, #12
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e01a      	b.n	8001598 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800156a:	2304      	movs	r3, #4
 800156c:	623b      	str	r3, [r7, #32]
          break;
 800156e:	e013      	b.n	8001598 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001578:	2308      	movs	r3, #8
 800157a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	611a      	str	r2, [r3, #16]
          break;
 8001582:	e009      	b.n	8001598 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001584:	2308      	movs	r3, #8
 8001586:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	615a      	str	r2, [r3, #20]
          break;
 800158e:	e003      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
          break;
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x130>
          break;
 8001596:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2bff      	cmp	r3, #255	@ 0xff
 800159c:	d801      	bhi.n	80015a2 <HAL_GPIO_Init+0x13a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	e001      	b.n	80015a6 <HAL_GPIO_Init+0x13e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3304      	adds	r3, #4
 80015a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2bff      	cmp	r3, #255	@ 0xff
 80015ac:	d802      	bhi.n	80015b4 <HAL_GPIO_Init+0x14c>
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0x152>
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	3b08      	subs	r3, #8
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	210f      	movs	r1, #15
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	401a      	ands	r2, r3
 80015cc:	6a39      	ldr	r1, [r7, #32]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	431a      	orrs	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80b1 	beq.w	800174a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001720 <HAL_GPIO_Init+0x2b8>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001720 <HAL_GPIO_Init+0x2b8>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001720 <HAL_GPIO_Init+0x2b8>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001600:	4a48      	ldr	r2, [pc, #288]	@ (8001724 <HAL_GPIO_Init+0x2bc>)
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a40      	ldr	r2, [pc, #256]	@ (8001728 <HAL_GPIO_Init+0x2c0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d013      	beq.n	8001654 <HAL_GPIO_Init+0x1ec>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a3f      	ldr	r2, [pc, #252]	@ (800172c <HAL_GPIO_Init+0x2c4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d00d      	beq.n	8001650 <HAL_GPIO_Init+0x1e8>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a3e      	ldr	r2, [pc, #248]	@ (8001730 <HAL_GPIO_Init+0x2c8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d007      	beq.n	800164c <HAL_GPIO_Init+0x1e4>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a3d      	ldr	r2, [pc, #244]	@ (8001734 <HAL_GPIO_Init+0x2cc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d101      	bne.n	8001648 <HAL_GPIO_Init+0x1e0>
 8001644:	2303      	movs	r3, #3
 8001646:	e006      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001648:	2304      	movs	r3, #4
 800164a:	e004      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 800164c:	2302      	movs	r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001654:	2300      	movs	r3, #0
 8001656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4093      	lsls	r3, r2
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001666:	492f      	ldr	r1, [pc, #188]	@ (8001724 <HAL_GPIO_Init+0x2bc>)
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001680:	4b2d      	ldr	r3, [pc, #180]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	492c      	ldr	r1, [pc, #176]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	608b      	str	r3, [r1, #8]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800168e:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	4928      	ldr	r1, [pc, #160]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 8001698:	4013      	ands	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016a8:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	4922      	ldr	r1, [pc, #136]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	60cb      	str	r3, [r1, #12]
 80016b4:	e006      	b.n	80016c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	43db      	mvns	r3, r3
 80016be:	491e      	ldr	r1, [pc, #120]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4918      	ldr	r1, [pc, #96]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4914      	ldr	r1, [pc, #80]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d021      	beq.n	800173c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	490e      	ldr	r1, [pc, #56]	@ (8001738 <HAL_GPIO_Init+0x2d0>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
 8001704:	e021      	b.n	800174a <HAL_GPIO_Init+0x2e2>
 8001706:	bf00      	nop
 8001708:	10320000 	.word	0x10320000
 800170c:	10310000 	.word	0x10310000
 8001710:	10220000 	.word	0x10220000
 8001714:	10210000 	.word	0x10210000
 8001718:	10120000 	.word	0x10120000
 800171c:	10110000 	.word	0x10110000
 8001720:	40021000 	.word	0x40021000
 8001724:	40010000 	.word	0x40010000
 8001728:	40010800 	.word	0x40010800
 800172c:	40010c00 	.word	0x40010c00
 8001730:	40011000 	.word	0x40011000
 8001734:	40011400 	.word	0x40011400
 8001738:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_GPIO_Init+0x304>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	43db      	mvns	r3, r3
 8001744:	4909      	ldr	r1, [pc, #36]	@ (800176c <HAL_GPIO_Init+0x304>)
 8001746:	4013      	ands	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	3301      	adds	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	f47f ae8e 	bne.w	800147c <HAL_GPIO_Init+0x14>
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	372c      	adds	r7, #44	@ 0x2c
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	40010400 	.word	0x40010400

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800178c:	e003      	b.n	8001796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	041a      	lsls	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	611a      	str	r2, [r3, #16]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e272      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8087 	beq.w	80018ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c0:	4b92      	ldr	r3, [pc, #584]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d00c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017cc:	4b8f      	ldr	r3, [pc, #572]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d112      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
 80017d8:	4b8c      	ldr	r3, [pc, #560]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e4:	d10b      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e6:	4b89      	ldr	r3, [pc, #548]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d06c      	beq.n	80018cc <HAL_RCC_OscConfig+0x12c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d168      	bne.n	80018cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e24c      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x76>
 8001808:	4b80      	ldr	r3, [pc, #512]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a7f      	ldr	r2, [pc, #508]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e02e      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x98>
 800181e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a7a      	ldr	r2, [pc, #488]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b78      	ldr	r3, [pc, #480]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a77      	ldr	r2, [pc, #476]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0xbc>
 8001842:	4b72      	ldr	r3, [pc, #456]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a71      	ldr	r2, [pc, #452]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b6f      	ldr	r3, [pc, #444]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a6e      	ldr	r2, [pc, #440]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 800185c:	4b6b      	ldr	r3, [pc, #428]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6a      	ldr	r2, [pc, #424]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b68      	ldr	r3, [pc, #416]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a67      	ldr	r2, [pc, #412]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fce2 	bl	8001244 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fcde 	bl	8001244 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	@ 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e200      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b5d      	ldr	r3, [pc, #372]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xe4>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fcce 	bl	8001244 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fcca 	bl	8001244 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	@ 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1ec      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	4b53      	ldr	r3, [pc, #332]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x10c>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d063      	beq.n	80019a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018da:	4b4c      	ldr	r3, [pc, #304]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018e6:	4b49      	ldr	r3, [pc, #292]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d11c      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
 80018f2:	4b46      	ldr	r3, [pc, #280]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d116      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	4b43      	ldr	r3, [pc, #268]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e1c0      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b3d      	ldr	r3, [pc, #244]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4939      	ldr	r1, [pc, #228]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e03a      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001934:	4b36      	ldr	r3, [pc, #216]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fc83 	bl	8001244 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fc7f 	bl	8001244 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1a1      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	4b2d      	ldr	r3, [pc, #180]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b2a      	ldr	r3, [pc, #168]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4927      	ldr	r1, [pc, #156]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e015      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001976:	4b26      	ldr	r3, [pc, #152]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fc62 	bl	8001244 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff fc5e 	bl	8001244 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e180      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d03a      	beq.n	8001a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d019      	beq.n	80019ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b6:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff fc42 	bl	8001244 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fc3e 	bl	8001244 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e160      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f000 face 	bl	8001f84 <RCC_Delay>
 80019e8:	e01c      	b.n	8001a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fc28 	bl	8001244 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f6:	e00f      	b.n	8001a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fc24 	bl	8001244 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d908      	bls.n	8001a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e146      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	42420000 	.word	0x42420000
 8001a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	4b92      	ldr	r3, [pc, #584]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e9      	bne.n	80019f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a6 	beq.w	8001b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b8b      	ldr	r3, [pc, #556]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b88      	ldr	r3, [pc, #544]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a87      	ldr	r2, [pc, #540]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b85      	ldr	r3, [pc, #532]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b82      	ldr	r3, [pc, #520]	@ (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fbe5 	bl	8001244 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7ff fbe1 	bl	8001244 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	@ 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e103      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b75      	ldr	r3, [pc, #468]	@ (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x312>
 8001aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	e02d      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x334>
 8001aba:	4b6a      	ldr	r3, [pc, #424]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a69      	ldr	r2, [pc, #420]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4b67      	ldr	r3, [pc, #412]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a66      	ldr	r2, [pc, #408]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
 8001ad2:	e01c      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x356>
 8001adc:	4b61      	ldr	r3, [pc, #388]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a60      	ldr	r2, [pc, #384]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6213      	str	r3, [r2, #32]
 8001ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4a5d      	ldr	r2, [pc, #372]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6213      	str	r3, [r2, #32]
 8001af4:	e00b      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001af6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a5a      	ldr	r2, [pc, #360]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6213      	str	r3, [r2, #32]
 8001b02:	4b58      	ldr	r3, [pc, #352]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a57      	ldr	r2, [pc, #348]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d015      	beq.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fb95 	bl	8001244 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fb91 	bl	8001244 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0b1      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b34:	4b4b      	ldr	r3, [pc, #300]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ee      	beq.n	8001b1e <HAL_RCC_OscConfig+0x37e>
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fb7f 	bl	8001244 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff fb7b 	bl	8001244 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e09b      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	4b40      	ldr	r3, [pc, #256]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ee      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b72:	4b3c      	ldr	r3, [pc, #240]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a3b      	ldr	r2, [pc, #236]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8087 	beq.w	8001c96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b88:	4b36      	ldr	r3, [pc, #216]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d061      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d146      	bne.n	8001c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fb4f 	bl	8001244 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff fb4b 	bl	8001244 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e06d      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	4b29      	ldr	r3, [pc, #164]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd0:	d108      	bne.n	8001be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd2:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	4921      	ldr	r1, [pc, #132]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a19      	ldr	r1, [r3, #32]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	491b      	ldr	r1, [pc, #108]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fb1f 	bl	8001244 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff fb1b 	bl	8001244 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e03d      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x46a>
 8001c28:	e035      	b.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fb08 	bl	8001244 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff fb04 	bl	8001244 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e026      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x498>
 8001c56:	e01e      	b.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e019      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <HAL_RCC_OscConfig+0x500>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0d0      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d910      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b67      	ldr	r3, [pc, #412]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 0207 	bic.w	r2, r3, #7
 8001cce:	4965      	ldr	r1, [pc, #404]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b8      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d00:	4b59      	ldr	r3, [pc, #356]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4a58      	ldr	r2, [pc, #352]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d18:	4b53      	ldr	r3, [pc, #332]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a52      	ldr	r2, [pc, #328]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b50      	ldr	r3, [pc, #320]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	494d      	ldr	r1, [pc, #308]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d040      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	4b47      	ldr	r3, [pc, #284]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d115      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e07f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d62:	4b41      	ldr	r3, [pc, #260]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e073      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	4b3d      	ldr	r3, [pc, #244]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06b      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d82:	4b39      	ldr	r3, [pc, #228]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f023 0203 	bic.w	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4936      	ldr	r1, [pc, #216]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d94:	f7ff fa56 	bl	8001244 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7ff fa52 	bl	8001244 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e053      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 020c 	and.w	r2, r3, #12
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d1eb      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b27      	ldr	r3, [pc, #156]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d210      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 0207 	bic.w	r2, r3, #7
 8001dda:	4922      	ldr	r1, [pc, #136]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e032      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e00:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4916      	ldr	r1, [pc, #88]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	490e      	ldr	r1, [pc, #56]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e32:	f000 f821 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	490a      	ldr	r1, [pc, #40]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001e44:	5ccb      	ldrb	r3, [r1, r3]
 8001e46:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4a:	4a09      	ldr	r2, [pc, #36]	@ (8001e70 <HAL_RCC_ClockConfig+0x1cc>)
 8001e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_RCC_ClockConfig+0x1d0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f9b4 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08003f50 	.word	0x08003f50
 8001e70:	20000004 	.word	0x20000004
 8001e74:	20000008 	.word	0x20000008

08001e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e92:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d002      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d003      	beq.n	8001eae <HAL_RCC_GetSysClockFreq+0x36>
 8001ea6:	e027      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eaa:	613b      	str	r3, [r7, #16]
      break;
 8001eac:	e027      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	0c9b      	lsrs	r3, r3, #18
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	4a17      	ldr	r2, [pc, #92]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d010      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	0c5b      	lsrs	r3, r3, #17
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	4a11      	ldr	r2, [pc, #68]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eda:	fb03 f202 	mul.w	r2, r3, r2
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e004      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a0c      	ldr	r2, [pc, #48]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eec:	fb02 f303 	mul.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	613b      	str	r3, [r7, #16]
      break;
 8001ef6:	e002      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efa:	613b      	str	r3, [r7, #16]
      break;
 8001efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efe:	693b      	ldr	r3, [r7, #16]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	007a1200 	.word	0x007a1200
 8001f14:	08003f68 	.word	0x08003f68
 8001f18:	08003f78 	.word	0x08003f78
 8001f1c:	003d0900 	.word	0x003d0900

08001f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f24:	4b02      	ldr	r3, [pc, #8]	@ (8001f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	20000004 	.word	0x20000004

08001f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f38:	f7ff fff2 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4903      	ldr	r1, [pc, #12]	@ (8001f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08003f60 	.word	0x08003f60

08001f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	0adb      	lsrs	r3, r3, #11
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	4903      	ldr	r1, [pc, #12]	@ (8001f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08003f60 	.word	0x08003f60

08001f84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <RCC_Delay+0x34>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <RCC_Delay+0x38>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0a5b      	lsrs	r3, r3, #9
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa0:	bf00      	nop
  }
  while (Delay --);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	60fa      	str	r2, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f9      	bne.n	8001fa0 <RCC_Delay+0x1c>
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	10624dd3 	.word	0x10624dd3

08001fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e076      	b.n	80020c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d108      	bne.n	8001fec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fe2:	d009      	beq.n	8001ff8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
 8001fea:	e005      	b.n	8001ff8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fed6 	bl	8000dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800202e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207c:	ea42 0103 	orr.w	r1, r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002084:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	0c1a      	lsrs	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f002 0204 	and.w	r2, r2, #4
 800209e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020d8:	f7ff f8b4 	bl	8001244 <HAL_GetTick>
 80020dc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d001      	beq.n	80020f2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	e12a      	b.n	8002348 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_SPI_Transmit+0x36>
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e122      	b.n	8002348 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_SPI_Transmit+0x48>
 800210c:	2302      	movs	r3, #2
 800210e:	e11b      	b.n	8002348 <HAL_SPI_Transmit+0x280>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2203      	movs	r2, #3
 800211c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	88fa      	ldrh	r2, [r7, #6]
 8002130:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	88fa      	ldrh	r2, [r7, #6]
 8002136:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800215e:	d10f      	bne.n	8002180 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800216e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800217e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218a:	2b40      	cmp	r3, #64	@ 0x40
 800218c:	d007      	beq.n	800219e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021a6:	d152      	bne.n	800224e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_SPI_Transmit+0xee>
 80021b0:	8b7b      	ldrh	r3, [r7, #26]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d145      	bne.n	8002242 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	881a      	ldrh	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	1c9a      	adds	r2, r3, #2
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021da:	e032      	b.n	8002242 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d112      	bne.n	8002210 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	881a      	ldrh	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	1c9a      	adds	r2, r3, #2
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800220e:	e018      	b.n	8002242 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002210:	f7ff f818 	bl	8001244 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d803      	bhi.n	8002228 <HAL_SPI_Transmit+0x160>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002226:	d102      	bne.n	800222e <HAL_SPI_Transmit+0x166>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e082      	b.n	8002348 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1c7      	bne.n	80021dc <HAL_SPI_Transmit+0x114>
 800224c:	e053      	b.n	80022f6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_SPI_Transmit+0x194>
 8002256:	8b7b      	ldrh	r3, [r7, #26]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d147      	bne.n	80022ec <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	330c      	adds	r3, #12
 8002266:	7812      	ldrb	r2, [r2, #0]
 8002268:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002278:	b29b      	uxth	r3, r3
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002282:	e033      	b.n	80022ec <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d113      	bne.n	80022ba <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	330c      	adds	r3, #12
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022b8:	e018      	b.n	80022ec <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ba:	f7fe ffc3 	bl	8001244 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d803      	bhi.n	80022d2 <HAL_SPI_Transmit+0x20a>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d102      	bne.n	80022d8 <HAL_SPI_Transmit+0x210>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e02d      	b.n	8002348 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1c6      	bne.n	8002284 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	6839      	ldr	r1, [r7, #0]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fbc4 	bl	8002a88 <SPI_EndRxTxTransaction>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002346:	2300      	movs	r3, #0
  }
}
 8002348:	4618      	mov	r0, r3
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	4613      	mov	r3, r2
 800235e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d001      	beq.n	8002370 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
 800236e:	e104      	b.n	800257a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002378:	d112      	bne.n	80023a0 <HAL_SPI_Receive+0x50>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10e      	bne.n	80023a0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2204      	movs	r2, #4
 8002386:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800238a:	88fa      	ldrh	r2, [r7, #6]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f8f3 	bl	8002582 <HAL_SPI_TransmitReceive>
 800239c:	4603      	mov	r3, r0
 800239e:	e0ec      	b.n	800257a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023a0:	f7fe ff50 	bl	8001244 <HAL_GetTick>
 80023a4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_SPI_Receive+0x62>
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0e1      	b.n	800257a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_SPI_Receive+0x74>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e0da      	b.n	800257a <HAL_SPI_Receive+0x22a>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2204      	movs	r2, #4
 80023d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	88fa      	ldrh	r2, [r7, #6]
 80023e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002412:	d10f      	bne.n	8002434 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002422:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243e:	2b40      	cmp	r3, #64	@ 0x40
 8002440:	d007      	beq.n	8002452 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d170      	bne.n	800253c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800245a:	e035      	b.n	80024c8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d115      	bne.n	8002496 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f103 020c 	add.w	r2, r3, #12
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002476:	7812      	ldrb	r2, [r2, #0]
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002494:	e018      	b.n	80024c8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002496:	f7fe fed5 	bl	8001244 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d803      	bhi.n	80024ae <HAL_SPI_Receive+0x15e>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d102      	bne.n	80024b4 <HAL_SPI_Receive+0x164>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e058      	b.n	800257a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1c4      	bne.n	800245c <HAL_SPI_Receive+0x10c>
 80024d2:	e038      	b.n	8002546 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d113      	bne.n	800250a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ec:	b292      	uxth	r2, r2
 80024ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f4:	1c9a      	adds	r2, r3, #2
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002508:	e018      	b.n	800253c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800250a:	f7fe fe9b 	bl	8001244 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d803      	bhi.n	8002522 <HAL_SPI_Receive+0x1d2>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d102      	bne.n	8002528 <HAL_SPI_Receive+0x1d8>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e01e      	b.n	800257a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1c6      	bne.n	80024d4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	6839      	ldr	r1, [r7, #0]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fa4a 	bl	80029e4 <SPI_EndRxTransaction>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002578:	2300      	movs	r3, #0
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b08a      	sub	sp, #40	@ 0x28
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002590:	2301      	movs	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002594:	f7fe fe56 	bl	8001244 <HAL_GetTick>
 8002598:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025a0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025ac:	7ffb      	ldrb	r3, [r7, #31]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d00c      	beq.n	80025cc <HAL_SPI_TransmitReceive+0x4a>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025b8:	d106      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x46>
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d001      	beq.n	80025cc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
 80025ca:	e17f      	b.n	80028cc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_SPI_TransmitReceive+0x5c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_SPI_TransmitReceive+0x5c>
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e174      	b.n	80028cc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_SPI_TransmitReceive+0x6e>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e16d      	b.n	80028cc <HAL_SPI_TransmitReceive+0x34a>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b04      	cmp	r3, #4
 8002602:	d003      	beq.n	800260c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2205      	movs	r2, #5
 8002608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	887a      	ldrh	r2, [r7, #2]
 8002622:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	887a      	ldrh	r2, [r7, #2]
 800262e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264c:	2b40      	cmp	r3, #64	@ 0x40
 800264e:	d007      	beq.n	8002660 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800265e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002668:	d17e      	bne.n	8002768 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_SPI_TransmitReceive+0xf6>
 8002672:	8afb      	ldrh	r3, [r7, #22]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d16c      	bne.n	8002752 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002688:	1c9a      	adds	r2, r3, #2
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800269c:	e059      	b.n	8002752 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d11b      	bne.n	80026e4 <HAL_SPI_TransmitReceive+0x162>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x162>
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d113      	bne.n	80026e4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	881a      	ldrh	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	1c9a      	adds	r2, r3, #2
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d119      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x1a4>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d014      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002706:	b292      	uxth	r2, r2
 8002708:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270e:	1c9a      	adds	r2, r3, #2
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002722:	2301      	movs	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002726:	f7fe fd8d 	bl	8001244 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002732:	429a      	cmp	r2, r3
 8002734:	d80d      	bhi.n	8002752 <HAL_SPI_TransmitReceive+0x1d0>
 8002736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d009      	beq.n	8002752 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0bc      	b.n	80028cc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002756:	b29b      	uxth	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1a0      	bne.n	800269e <HAL_SPI_TransmitReceive+0x11c>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d19b      	bne.n	800269e <HAL_SPI_TransmitReceive+0x11c>
 8002766:	e082      	b.n	800286e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_SPI_TransmitReceive+0x1f4>
 8002770:	8afb      	ldrh	r3, [r7, #22]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d171      	bne.n	800285a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	330c      	adds	r3, #12
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800279c:	e05d      	b.n	800285a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d11c      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x264>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d017      	beq.n	80027e6 <HAL_SPI_TransmitReceive+0x264>
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d114      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	330c      	adds	r3, #12
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d119      	bne.n	8002828 <HAL_SPI_TransmitReceive+0x2a6>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d014      	beq.n	8002828 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002824:	2301      	movs	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002828:	f7fe fd0c 	bl	8001244 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002834:	429a      	cmp	r2, r3
 8002836:	d803      	bhi.n	8002840 <HAL_SPI_TransmitReceive+0x2be>
 8002838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283e:	d102      	bne.n	8002846 <HAL_SPI_TransmitReceive+0x2c4>
 8002840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e038      	b.n	80028cc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d19c      	bne.n	800279e <HAL_SPI_TransmitReceive+0x21c>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d197      	bne.n	800279e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800286e:	6a3a      	ldr	r2, [r7, #32]
 8002870:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f908 	bl	8002a88 <SPI_EndRxTxTransaction>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e01d      	b.n	80028cc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80028ca:	2300      	movs	r3, #0
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3728      	adds	r7, #40	@ 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028e4:	f7fe fcae 	bl	8001244 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028f4:	f7fe fca6 	bl	8001244 <HAL_GetTick>
 80028f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028fa:	4b39      	ldr	r3, [pc, #228]	@ (80029e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	015b      	lsls	r3, r3, #5
 8002900:	0d1b      	lsrs	r3, r3, #20
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800290a:	e054      	b.n	80029b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d050      	beq.n	80029b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002914:	f7fe fc96 	bl	8001244 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	429a      	cmp	r2, r3
 8002922:	d902      	bls.n	800292a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d13d      	bne.n	80029a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002938:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002942:	d111      	bne.n	8002968 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800294c:	d004      	beq.n	8002958 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002956:	d107      	bne.n	8002968 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002966:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002970:	d10f      	bne.n	8002992 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002990:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e017      	b.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4013      	ands	r3, r2
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	bf0c      	ite	eq
 80029c6:	2301      	moveq	r3, #1
 80029c8:	2300      	movne	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d19b      	bne.n	800290c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000004 	.word	0x20000004

080029e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029f8:	d111      	bne.n	8002a1e <SPI_EndRxTransaction+0x3a>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a02:	d004      	beq.n	8002a0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a0c:	d107      	bne.n	8002a1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a26:	d117      	bne.n	8002a58 <SPI_EndRxTransaction+0x74>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a30:	d112      	bne.n	8002a58 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff ff49 	bl	80028d4 <SPI_WaitFlagStateUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01a      	beq.n	8002a7e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4c:	f043 0220 	orr.w	r2, r3, #32
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e013      	b.n	8002a80 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2180      	movs	r1, #128	@ 0x80
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff ff36 	bl	80028d4 <SPI_WaitFlagStateUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e000      	b.n	8002a80 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff ff18 	bl	80028d4 <SPI_WaitFlagStateUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aae:	f043 0220 	orr.w	r2, r3, #32
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e013      	b.n	8002ae2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2180      	movs	r1, #128	@ 0x80
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f7ff ff05 	bl	80028d4 <SPI_WaitFlagStateUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e000      	b.n	8002ae2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e042      	b.n	8002b82 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d106      	bne.n	8002b16 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7fe facf 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2224      	movs	r2, #36	@ 0x24
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b2c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f972 	bl	8002e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b42:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b52:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b62:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b08a      	sub	sp, #40	@ 0x28
 8002b8e:	af02      	add	r7, sp, #8
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d175      	bne.n	8002c96 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_UART_Transmit+0x2c>
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e06e      	b.n	8002c98 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2221      	movs	r2, #33	@ 0x21
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fb3c 	bl	8001244 <HAL_GetTick>
 8002bcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	88fa      	ldrh	r2, [r7, #6]
 8002bd8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be2:	d108      	bne.n	8002bf6 <HAL_UART_Transmit+0x6c>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	e003      	b.n	8002bfe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bfe:	e02e      	b.n	8002c5e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2200      	movs	r2, #0
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f848 	bl	8002ca0 <UART_WaitOnFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e03a      	b.n	8002c98 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c36:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	e007      	b.n	8002c50 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1cb      	bne.n	8002c00 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2140      	movs	r1, #64	@ 0x40
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f814 	bl	8002ca0 <UART_WaitOnFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e006      	b.n	8002c98 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb0:	e03b      	b.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d037      	beq.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7fe fac3 	bl	8001244 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	6a3a      	ldr	r2, [r7, #32]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e03a      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d023      	beq.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b80      	cmp	r3, #128	@ 0x80
 8002ce6:	d020      	beq.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b40      	cmp	r3, #64	@ 0x40
 8002cec:	d01d      	beq.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d116      	bne.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f81d 	bl	8002d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00f      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4013      	ands	r3, r2
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	bf0c      	ite	eq
 8002d3a:	2301      	moveq	r3, #1
 8002d3c:	2300      	movne	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d0b4      	beq.n	8002cb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b095      	sub	sp, #84	@ 0x54
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e5      	bne.n	8002d5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3314      	adds	r3, #20
 8002d94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3314      	adds	r3, #20
 8002dac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002db4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e5      	bne.n	8002d8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d119      	bne.n	8002dfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	e853 3f00 	ldrex	r3, [r3]
 8002dd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f023 0310 	bic.w	r3, r3, #16
 8002de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	330c      	adds	r3, #12
 8002de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dea:	61ba      	str	r2, [r7, #24]
 8002dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dee:	6979      	ldr	r1, [r7, #20]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	e841 2300 	strex	r3, r2, [r1]
 8002df6:	613b      	str	r3, [r7, #16]
   return(result);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1e5      	bne.n	8002dca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e0c:	bf00      	nop
 8002e0e:	3754      	adds	r7, #84	@ 0x54
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
	...

08002e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002e52:	f023 030c 	bic.w	r3, r3, #12
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8002f2c <UART_SetConfig+0x114>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d103      	bne.n	8002e88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e80:	f7ff f86c 	bl	8001f5c <HAL_RCC_GetPCLK2Freq>
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	e002      	b.n	8002e8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e88:	f7ff f854 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 8002e8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009a      	lsls	r2, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	4a22      	ldr	r2, [pc, #136]	@ (8002f30 <UART_SetConfig+0x118>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	0119      	lsls	r1, r3, #4
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f30 <UART_SetConfig+0x118>)
 8002ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2064      	movs	r0, #100	@ 0x64
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	3332      	adds	r3, #50	@ 0x32
 8002ed8:	4a15      	ldr	r2, [pc, #84]	@ (8002f30 <UART_SetConfig+0x118>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ee4:	4419      	add	r1, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009a      	lsls	r2, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002efc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <UART_SetConfig+0x118>)
 8002efe:	fba3 0302 	umull	r0, r3, r3, r2
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2064      	movs	r0, #100	@ 0x64
 8002f06:	fb00 f303 	mul.w	r3, r0, r3
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	3332      	adds	r3, #50	@ 0x32
 8002f10:	4a07      	ldr	r2, [pc, #28]	@ (8002f30 <UART_SetConfig+0x118>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	440a      	add	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	51eb851f 	.word	0x51eb851f

08002f34 <std>:
 8002f34:	2300      	movs	r3, #0
 8002f36:	b510      	push	{r4, lr}
 8002f38:	4604      	mov	r4, r0
 8002f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f42:	6083      	str	r3, [r0, #8]
 8002f44:	8181      	strh	r1, [r0, #12]
 8002f46:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f48:	81c2      	strh	r2, [r0, #14]
 8002f4a:	6183      	str	r3, [r0, #24]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	2208      	movs	r2, #8
 8002f50:	305c      	adds	r0, #92	@ 0x5c
 8002f52:	f000 f9f9 	bl	8003348 <memset>
 8002f56:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <std+0x58>)
 8002f58:	6224      	str	r4, [r4, #32]
 8002f5a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <std+0x5c>)
 8002f5e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f60:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <std+0x60>)
 8002f62:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f64:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <std+0x64>)
 8002f66:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f68:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <std+0x68>)
 8002f6a:	429c      	cmp	r4, r3
 8002f6c:	d006      	beq.n	8002f7c <std+0x48>
 8002f6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f72:	4294      	cmp	r4, r2
 8002f74:	d002      	beq.n	8002f7c <std+0x48>
 8002f76:	33d0      	adds	r3, #208	@ 0xd0
 8002f78:	429c      	cmp	r4, r3
 8002f7a:	d105      	bne.n	8002f88 <std+0x54>
 8002f7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f84:	f000 ba58 	b.w	8003438 <__retarget_lock_init_recursive>
 8002f88:	bd10      	pop	{r4, pc}
 8002f8a:	bf00      	nop
 8002f8c:	08003199 	.word	0x08003199
 8002f90:	080031bb 	.word	0x080031bb
 8002f94:	080031f3 	.word	0x080031f3
 8002f98:	08003217 	.word	0x08003217
 8002f9c:	20000130 	.word	0x20000130

08002fa0 <stdio_exit_handler>:
 8002fa0:	4a02      	ldr	r2, [pc, #8]	@ (8002fac <stdio_exit_handler+0xc>)
 8002fa2:	4903      	ldr	r1, [pc, #12]	@ (8002fb0 <stdio_exit_handler+0x10>)
 8002fa4:	4803      	ldr	r0, [pc, #12]	@ (8002fb4 <stdio_exit_handler+0x14>)
 8002fa6:	f000 b869 	b.w	800307c <_fwalk_sglue>
 8002faa:	bf00      	nop
 8002fac:	20000010 	.word	0x20000010
 8002fb0:	08003cd1 	.word	0x08003cd1
 8002fb4:	20000020 	.word	0x20000020

08002fb8 <cleanup_stdio>:
 8002fb8:	6841      	ldr	r1, [r0, #4]
 8002fba:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <cleanup_stdio+0x34>)
 8002fbc:	b510      	push	{r4, lr}
 8002fbe:	4299      	cmp	r1, r3
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	d001      	beq.n	8002fc8 <cleanup_stdio+0x10>
 8002fc4:	f000 fe84 	bl	8003cd0 <_fflush_r>
 8002fc8:	68a1      	ldr	r1, [r4, #8]
 8002fca:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <cleanup_stdio+0x38>)
 8002fcc:	4299      	cmp	r1, r3
 8002fce:	d002      	beq.n	8002fd6 <cleanup_stdio+0x1e>
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f000 fe7d 	bl	8003cd0 <_fflush_r>
 8002fd6:	68e1      	ldr	r1, [r4, #12]
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <cleanup_stdio+0x3c>)
 8002fda:	4299      	cmp	r1, r3
 8002fdc:	d004      	beq.n	8002fe8 <cleanup_stdio+0x30>
 8002fde:	4620      	mov	r0, r4
 8002fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fe4:	f000 be74 	b.w	8003cd0 <_fflush_r>
 8002fe8:	bd10      	pop	{r4, pc}
 8002fea:	bf00      	nop
 8002fec:	20000130 	.word	0x20000130
 8002ff0:	20000198 	.word	0x20000198
 8002ff4:	20000200 	.word	0x20000200

08002ff8 <global_stdio_init.part.0>:
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <global_stdio_init.part.0+0x30>)
 8002ffc:	4c0b      	ldr	r4, [pc, #44]	@ (800302c <global_stdio_init.part.0+0x34>)
 8002ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8003030 <global_stdio_init.part.0+0x38>)
 8003000:	4620      	mov	r0, r4
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	2104      	movs	r1, #4
 8003006:	2200      	movs	r2, #0
 8003008:	f7ff ff94 	bl	8002f34 <std>
 800300c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003010:	2201      	movs	r2, #1
 8003012:	2109      	movs	r1, #9
 8003014:	f7ff ff8e 	bl	8002f34 <std>
 8003018:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800301c:	2202      	movs	r2, #2
 800301e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003022:	2112      	movs	r1, #18
 8003024:	f7ff bf86 	b.w	8002f34 <std>
 8003028:	20000268 	.word	0x20000268
 800302c:	20000130 	.word	0x20000130
 8003030:	08002fa1 	.word	0x08002fa1

08003034 <__sfp_lock_acquire>:
 8003034:	4801      	ldr	r0, [pc, #4]	@ (800303c <__sfp_lock_acquire+0x8>)
 8003036:	f000 ba00 	b.w	800343a <__retarget_lock_acquire_recursive>
 800303a:	bf00      	nop
 800303c:	20000271 	.word	0x20000271

08003040 <__sfp_lock_release>:
 8003040:	4801      	ldr	r0, [pc, #4]	@ (8003048 <__sfp_lock_release+0x8>)
 8003042:	f000 b9fb 	b.w	800343c <__retarget_lock_release_recursive>
 8003046:	bf00      	nop
 8003048:	20000271 	.word	0x20000271

0800304c <__sinit>:
 800304c:	b510      	push	{r4, lr}
 800304e:	4604      	mov	r4, r0
 8003050:	f7ff fff0 	bl	8003034 <__sfp_lock_acquire>
 8003054:	6a23      	ldr	r3, [r4, #32]
 8003056:	b11b      	cbz	r3, 8003060 <__sinit+0x14>
 8003058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800305c:	f7ff bff0 	b.w	8003040 <__sfp_lock_release>
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <__sinit+0x28>)
 8003062:	6223      	str	r3, [r4, #32]
 8003064:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <__sinit+0x2c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f5      	bne.n	8003058 <__sinit+0xc>
 800306c:	f7ff ffc4 	bl	8002ff8 <global_stdio_init.part.0>
 8003070:	e7f2      	b.n	8003058 <__sinit+0xc>
 8003072:	bf00      	nop
 8003074:	08002fb9 	.word	0x08002fb9
 8003078:	20000268 	.word	0x20000268

0800307c <_fwalk_sglue>:
 800307c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003080:	4607      	mov	r7, r0
 8003082:	4688      	mov	r8, r1
 8003084:	4614      	mov	r4, r2
 8003086:	2600      	movs	r6, #0
 8003088:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800308c:	f1b9 0901 	subs.w	r9, r9, #1
 8003090:	d505      	bpl.n	800309e <_fwalk_sglue+0x22>
 8003092:	6824      	ldr	r4, [r4, #0]
 8003094:	2c00      	cmp	r4, #0
 8003096:	d1f7      	bne.n	8003088 <_fwalk_sglue+0xc>
 8003098:	4630      	mov	r0, r6
 800309a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800309e:	89ab      	ldrh	r3, [r5, #12]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d907      	bls.n	80030b4 <_fwalk_sglue+0x38>
 80030a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030a8:	3301      	adds	r3, #1
 80030aa:	d003      	beq.n	80030b4 <_fwalk_sglue+0x38>
 80030ac:	4629      	mov	r1, r5
 80030ae:	4638      	mov	r0, r7
 80030b0:	47c0      	blx	r8
 80030b2:	4306      	orrs	r6, r0
 80030b4:	3568      	adds	r5, #104	@ 0x68
 80030b6:	e7e9      	b.n	800308c <_fwalk_sglue+0x10>

080030b8 <iprintf>:
 80030b8:	b40f      	push	{r0, r1, r2, r3}
 80030ba:	b507      	push	{r0, r1, r2, lr}
 80030bc:	4906      	ldr	r1, [pc, #24]	@ (80030d8 <iprintf+0x20>)
 80030be:	ab04      	add	r3, sp, #16
 80030c0:	6808      	ldr	r0, [r1, #0]
 80030c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80030c6:	6881      	ldr	r1, [r0, #8]
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	f000 fad7 	bl	800367c <_vfiprintf_r>
 80030ce:	b003      	add	sp, #12
 80030d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80030d4:	b004      	add	sp, #16
 80030d6:	4770      	bx	lr
 80030d8:	2000001c 	.word	0x2000001c

080030dc <_puts_r>:
 80030dc:	6a03      	ldr	r3, [r0, #32]
 80030de:	b570      	push	{r4, r5, r6, lr}
 80030e0:	4605      	mov	r5, r0
 80030e2:	460e      	mov	r6, r1
 80030e4:	6884      	ldr	r4, [r0, #8]
 80030e6:	b90b      	cbnz	r3, 80030ec <_puts_r+0x10>
 80030e8:	f7ff ffb0 	bl	800304c <__sinit>
 80030ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030ee:	07db      	lsls	r3, r3, #31
 80030f0:	d405      	bmi.n	80030fe <_puts_r+0x22>
 80030f2:	89a3      	ldrh	r3, [r4, #12]
 80030f4:	0598      	lsls	r0, r3, #22
 80030f6:	d402      	bmi.n	80030fe <_puts_r+0x22>
 80030f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030fa:	f000 f99e 	bl	800343a <__retarget_lock_acquire_recursive>
 80030fe:	89a3      	ldrh	r3, [r4, #12]
 8003100:	0719      	lsls	r1, r3, #28
 8003102:	d502      	bpl.n	800310a <_puts_r+0x2e>
 8003104:	6923      	ldr	r3, [r4, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d135      	bne.n	8003176 <_puts_r+0x9a>
 800310a:	4621      	mov	r1, r4
 800310c:	4628      	mov	r0, r5
 800310e:	f000 f8c5 	bl	800329c <__swsetup_r>
 8003112:	b380      	cbz	r0, 8003176 <_puts_r+0x9a>
 8003114:	f04f 35ff 	mov.w	r5, #4294967295
 8003118:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800311a:	07da      	lsls	r2, r3, #31
 800311c:	d405      	bmi.n	800312a <_puts_r+0x4e>
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	059b      	lsls	r3, r3, #22
 8003122:	d402      	bmi.n	800312a <_puts_r+0x4e>
 8003124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003126:	f000 f989 	bl	800343c <__retarget_lock_release_recursive>
 800312a:	4628      	mov	r0, r5
 800312c:	bd70      	pop	{r4, r5, r6, pc}
 800312e:	2b00      	cmp	r3, #0
 8003130:	da04      	bge.n	800313c <_puts_r+0x60>
 8003132:	69a2      	ldr	r2, [r4, #24]
 8003134:	429a      	cmp	r2, r3
 8003136:	dc17      	bgt.n	8003168 <_puts_r+0x8c>
 8003138:	290a      	cmp	r1, #10
 800313a:	d015      	beq.n	8003168 <_puts_r+0x8c>
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	6022      	str	r2, [r4, #0]
 8003142:	7019      	strb	r1, [r3, #0]
 8003144:	68a3      	ldr	r3, [r4, #8]
 8003146:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800314a:	3b01      	subs	r3, #1
 800314c:	60a3      	str	r3, [r4, #8]
 800314e:	2900      	cmp	r1, #0
 8003150:	d1ed      	bne.n	800312e <_puts_r+0x52>
 8003152:	2b00      	cmp	r3, #0
 8003154:	da11      	bge.n	800317a <_puts_r+0x9e>
 8003156:	4622      	mov	r2, r4
 8003158:	210a      	movs	r1, #10
 800315a:	4628      	mov	r0, r5
 800315c:	f000 f85f 	bl	800321e <__swbuf_r>
 8003160:	3001      	adds	r0, #1
 8003162:	d0d7      	beq.n	8003114 <_puts_r+0x38>
 8003164:	250a      	movs	r5, #10
 8003166:	e7d7      	b.n	8003118 <_puts_r+0x3c>
 8003168:	4622      	mov	r2, r4
 800316a:	4628      	mov	r0, r5
 800316c:	f000 f857 	bl	800321e <__swbuf_r>
 8003170:	3001      	adds	r0, #1
 8003172:	d1e7      	bne.n	8003144 <_puts_r+0x68>
 8003174:	e7ce      	b.n	8003114 <_puts_r+0x38>
 8003176:	3e01      	subs	r6, #1
 8003178:	e7e4      	b.n	8003144 <_puts_r+0x68>
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	6022      	str	r2, [r4, #0]
 8003180:	220a      	movs	r2, #10
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e7ee      	b.n	8003164 <_puts_r+0x88>
	...

08003188 <puts>:
 8003188:	4b02      	ldr	r3, [pc, #8]	@ (8003194 <puts+0xc>)
 800318a:	4601      	mov	r1, r0
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	f7ff bfa5 	b.w	80030dc <_puts_r>
 8003192:	bf00      	nop
 8003194:	2000001c 	.word	0x2000001c

08003198 <__sread>:
 8003198:	b510      	push	{r4, lr}
 800319a:	460c      	mov	r4, r1
 800319c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031a0:	f000 f8fc 	bl	800339c <_read_r>
 80031a4:	2800      	cmp	r0, #0
 80031a6:	bfab      	itete	ge
 80031a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80031aa:	89a3      	ldrhlt	r3, [r4, #12]
 80031ac:	181b      	addge	r3, r3, r0
 80031ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80031b2:	bfac      	ite	ge
 80031b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80031b6:	81a3      	strhlt	r3, [r4, #12]
 80031b8:	bd10      	pop	{r4, pc}

080031ba <__swrite>:
 80031ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031be:	461f      	mov	r7, r3
 80031c0:	898b      	ldrh	r3, [r1, #12]
 80031c2:	4605      	mov	r5, r0
 80031c4:	05db      	lsls	r3, r3, #23
 80031c6:	460c      	mov	r4, r1
 80031c8:	4616      	mov	r6, r2
 80031ca:	d505      	bpl.n	80031d8 <__swrite+0x1e>
 80031cc:	2302      	movs	r3, #2
 80031ce:	2200      	movs	r2, #0
 80031d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d4:	f000 f8d0 	bl	8003378 <_lseek_r>
 80031d8:	89a3      	ldrh	r3, [r4, #12]
 80031da:	4632      	mov	r2, r6
 80031dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031e0:	81a3      	strh	r3, [r4, #12]
 80031e2:	4628      	mov	r0, r5
 80031e4:	463b      	mov	r3, r7
 80031e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031ee:	f000 b8e7 	b.w	80033c0 <_write_r>

080031f2 <__sseek>:
 80031f2:	b510      	push	{r4, lr}
 80031f4:	460c      	mov	r4, r1
 80031f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031fa:	f000 f8bd 	bl	8003378 <_lseek_r>
 80031fe:	1c43      	adds	r3, r0, #1
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	bf15      	itete	ne
 8003204:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003206:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800320a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800320e:	81a3      	strheq	r3, [r4, #12]
 8003210:	bf18      	it	ne
 8003212:	81a3      	strhne	r3, [r4, #12]
 8003214:	bd10      	pop	{r4, pc}

08003216 <__sclose>:
 8003216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800321a:	f000 b89d 	b.w	8003358 <_close_r>

0800321e <__swbuf_r>:
 800321e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003220:	460e      	mov	r6, r1
 8003222:	4614      	mov	r4, r2
 8003224:	4605      	mov	r5, r0
 8003226:	b118      	cbz	r0, 8003230 <__swbuf_r+0x12>
 8003228:	6a03      	ldr	r3, [r0, #32]
 800322a:	b90b      	cbnz	r3, 8003230 <__swbuf_r+0x12>
 800322c:	f7ff ff0e 	bl	800304c <__sinit>
 8003230:	69a3      	ldr	r3, [r4, #24]
 8003232:	60a3      	str	r3, [r4, #8]
 8003234:	89a3      	ldrh	r3, [r4, #12]
 8003236:	071a      	lsls	r2, r3, #28
 8003238:	d501      	bpl.n	800323e <__swbuf_r+0x20>
 800323a:	6923      	ldr	r3, [r4, #16]
 800323c:	b943      	cbnz	r3, 8003250 <__swbuf_r+0x32>
 800323e:	4621      	mov	r1, r4
 8003240:	4628      	mov	r0, r5
 8003242:	f000 f82b 	bl	800329c <__swsetup_r>
 8003246:	b118      	cbz	r0, 8003250 <__swbuf_r+0x32>
 8003248:	f04f 37ff 	mov.w	r7, #4294967295
 800324c:	4638      	mov	r0, r7
 800324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	6922      	ldr	r2, [r4, #16]
 8003254:	b2f6      	uxtb	r6, r6
 8003256:	1a98      	subs	r0, r3, r2
 8003258:	6963      	ldr	r3, [r4, #20]
 800325a:	4637      	mov	r7, r6
 800325c:	4283      	cmp	r3, r0
 800325e:	dc05      	bgt.n	800326c <__swbuf_r+0x4e>
 8003260:	4621      	mov	r1, r4
 8003262:	4628      	mov	r0, r5
 8003264:	f000 fd34 	bl	8003cd0 <_fflush_r>
 8003268:	2800      	cmp	r0, #0
 800326a:	d1ed      	bne.n	8003248 <__swbuf_r+0x2a>
 800326c:	68a3      	ldr	r3, [r4, #8]
 800326e:	3b01      	subs	r3, #1
 8003270:	60a3      	str	r3, [r4, #8]
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	6022      	str	r2, [r4, #0]
 8003278:	701e      	strb	r6, [r3, #0]
 800327a:	6962      	ldr	r2, [r4, #20]
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	429a      	cmp	r2, r3
 8003280:	d004      	beq.n	800328c <__swbuf_r+0x6e>
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	07db      	lsls	r3, r3, #31
 8003286:	d5e1      	bpl.n	800324c <__swbuf_r+0x2e>
 8003288:	2e0a      	cmp	r6, #10
 800328a:	d1df      	bne.n	800324c <__swbuf_r+0x2e>
 800328c:	4621      	mov	r1, r4
 800328e:	4628      	mov	r0, r5
 8003290:	f000 fd1e 	bl	8003cd0 <_fflush_r>
 8003294:	2800      	cmp	r0, #0
 8003296:	d0d9      	beq.n	800324c <__swbuf_r+0x2e>
 8003298:	e7d6      	b.n	8003248 <__swbuf_r+0x2a>
	...

0800329c <__swsetup_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	4b29      	ldr	r3, [pc, #164]	@ (8003344 <__swsetup_r+0xa8>)
 80032a0:	4605      	mov	r5, r0
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	460c      	mov	r4, r1
 80032a6:	b118      	cbz	r0, 80032b0 <__swsetup_r+0x14>
 80032a8:	6a03      	ldr	r3, [r0, #32]
 80032aa:	b90b      	cbnz	r3, 80032b0 <__swsetup_r+0x14>
 80032ac:	f7ff fece 	bl	800304c <__sinit>
 80032b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032b4:	0719      	lsls	r1, r3, #28
 80032b6:	d422      	bmi.n	80032fe <__swsetup_r+0x62>
 80032b8:	06da      	lsls	r2, r3, #27
 80032ba:	d407      	bmi.n	80032cc <__swsetup_r+0x30>
 80032bc:	2209      	movs	r2, #9
 80032be:	602a      	str	r2, [r5, #0]
 80032c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c4:	f04f 30ff 	mov.w	r0, #4294967295
 80032c8:	81a3      	strh	r3, [r4, #12]
 80032ca:	e033      	b.n	8003334 <__swsetup_r+0x98>
 80032cc:	0758      	lsls	r0, r3, #29
 80032ce:	d512      	bpl.n	80032f6 <__swsetup_r+0x5a>
 80032d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032d2:	b141      	cbz	r1, 80032e6 <__swsetup_r+0x4a>
 80032d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032d8:	4299      	cmp	r1, r3
 80032da:	d002      	beq.n	80032e2 <__swsetup_r+0x46>
 80032dc:	4628      	mov	r0, r5
 80032de:	f000 f8af 	bl	8003440 <_free_r>
 80032e2:	2300      	movs	r3, #0
 80032e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80032ec:	81a3      	strh	r3, [r4, #12]
 80032ee:	2300      	movs	r3, #0
 80032f0:	6063      	str	r3, [r4, #4]
 80032f2:	6923      	ldr	r3, [r4, #16]
 80032f4:	6023      	str	r3, [r4, #0]
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	f043 0308 	orr.w	r3, r3, #8
 80032fc:	81a3      	strh	r3, [r4, #12]
 80032fe:	6923      	ldr	r3, [r4, #16]
 8003300:	b94b      	cbnz	r3, 8003316 <__swsetup_r+0x7a>
 8003302:	89a3      	ldrh	r3, [r4, #12]
 8003304:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800330c:	d003      	beq.n	8003316 <__swsetup_r+0x7a>
 800330e:	4621      	mov	r1, r4
 8003310:	4628      	mov	r0, r5
 8003312:	f000 fd2a 	bl	8003d6a <__smakebuf_r>
 8003316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800331a:	f013 0201 	ands.w	r2, r3, #1
 800331e:	d00a      	beq.n	8003336 <__swsetup_r+0x9a>
 8003320:	2200      	movs	r2, #0
 8003322:	60a2      	str	r2, [r4, #8]
 8003324:	6962      	ldr	r2, [r4, #20]
 8003326:	4252      	negs	r2, r2
 8003328:	61a2      	str	r2, [r4, #24]
 800332a:	6922      	ldr	r2, [r4, #16]
 800332c:	b942      	cbnz	r2, 8003340 <__swsetup_r+0xa4>
 800332e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003332:	d1c5      	bne.n	80032c0 <__swsetup_r+0x24>
 8003334:	bd38      	pop	{r3, r4, r5, pc}
 8003336:	0799      	lsls	r1, r3, #30
 8003338:	bf58      	it	pl
 800333a:	6962      	ldrpl	r2, [r4, #20]
 800333c:	60a2      	str	r2, [r4, #8]
 800333e:	e7f4      	b.n	800332a <__swsetup_r+0x8e>
 8003340:	2000      	movs	r0, #0
 8003342:	e7f7      	b.n	8003334 <__swsetup_r+0x98>
 8003344:	2000001c 	.word	0x2000001c

08003348 <memset>:
 8003348:	4603      	mov	r3, r0
 800334a:	4402      	add	r2, r0
 800334c:	4293      	cmp	r3, r2
 800334e:	d100      	bne.n	8003352 <memset+0xa>
 8003350:	4770      	bx	lr
 8003352:	f803 1b01 	strb.w	r1, [r3], #1
 8003356:	e7f9      	b.n	800334c <memset+0x4>

08003358 <_close_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	2300      	movs	r3, #0
 800335c:	4d05      	ldr	r5, [pc, #20]	@ (8003374 <_close_r+0x1c>)
 800335e:	4604      	mov	r4, r0
 8003360:	4608      	mov	r0, r1
 8003362:	602b      	str	r3, [r5, #0]
 8003364:	f7fd fe0f 	bl	8000f86 <_close>
 8003368:	1c43      	adds	r3, r0, #1
 800336a:	d102      	bne.n	8003372 <_close_r+0x1a>
 800336c:	682b      	ldr	r3, [r5, #0]
 800336e:	b103      	cbz	r3, 8003372 <_close_r+0x1a>
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	bd38      	pop	{r3, r4, r5, pc}
 8003374:	2000026c 	.word	0x2000026c

08003378 <_lseek_r>:
 8003378:	b538      	push	{r3, r4, r5, lr}
 800337a:	4604      	mov	r4, r0
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	2200      	movs	r2, #0
 8003382:	4d05      	ldr	r5, [pc, #20]	@ (8003398 <_lseek_r+0x20>)
 8003384:	602a      	str	r2, [r5, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	f7fd fe21 	bl	8000fce <_lseek>
 800338c:	1c43      	adds	r3, r0, #1
 800338e:	d102      	bne.n	8003396 <_lseek_r+0x1e>
 8003390:	682b      	ldr	r3, [r5, #0]
 8003392:	b103      	cbz	r3, 8003396 <_lseek_r+0x1e>
 8003394:	6023      	str	r3, [r4, #0]
 8003396:	bd38      	pop	{r3, r4, r5, pc}
 8003398:	2000026c 	.word	0x2000026c

0800339c <_read_r>:
 800339c:	b538      	push	{r3, r4, r5, lr}
 800339e:	4604      	mov	r4, r0
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	2200      	movs	r2, #0
 80033a6:	4d05      	ldr	r5, [pc, #20]	@ (80033bc <_read_r+0x20>)
 80033a8:	602a      	str	r2, [r5, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f7fd fdb2 	bl	8000f14 <_read>
 80033b0:	1c43      	adds	r3, r0, #1
 80033b2:	d102      	bne.n	80033ba <_read_r+0x1e>
 80033b4:	682b      	ldr	r3, [r5, #0]
 80033b6:	b103      	cbz	r3, 80033ba <_read_r+0x1e>
 80033b8:	6023      	str	r3, [r4, #0]
 80033ba:	bd38      	pop	{r3, r4, r5, pc}
 80033bc:	2000026c 	.word	0x2000026c

080033c0 <_write_r>:
 80033c0:	b538      	push	{r3, r4, r5, lr}
 80033c2:	4604      	mov	r4, r0
 80033c4:	4608      	mov	r0, r1
 80033c6:	4611      	mov	r1, r2
 80033c8:	2200      	movs	r2, #0
 80033ca:	4d05      	ldr	r5, [pc, #20]	@ (80033e0 <_write_r+0x20>)
 80033cc:	602a      	str	r2, [r5, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	f7fd fdbd 	bl	8000f4e <_write>
 80033d4:	1c43      	adds	r3, r0, #1
 80033d6:	d102      	bne.n	80033de <_write_r+0x1e>
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	b103      	cbz	r3, 80033de <_write_r+0x1e>
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	bd38      	pop	{r3, r4, r5, pc}
 80033e0:	2000026c 	.word	0x2000026c

080033e4 <__errno>:
 80033e4:	4b01      	ldr	r3, [pc, #4]	@ (80033ec <__errno+0x8>)
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	2000001c 	.word	0x2000001c

080033f0 <__libc_init_array>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	2600      	movs	r6, #0
 80033f4:	4d0c      	ldr	r5, [pc, #48]	@ (8003428 <__libc_init_array+0x38>)
 80033f6:	4c0d      	ldr	r4, [pc, #52]	@ (800342c <__libc_init_array+0x3c>)
 80033f8:	1b64      	subs	r4, r4, r5
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	42a6      	cmp	r6, r4
 80033fe:	d109      	bne.n	8003414 <__libc_init_array+0x24>
 8003400:	f000 fd30 	bl	8003e64 <_init>
 8003404:	2600      	movs	r6, #0
 8003406:	4d0a      	ldr	r5, [pc, #40]	@ (8003430 <__libc_init_array+0x40>)
 8003408:	4c0a      	ldr	r4, [pc, #40]	@ (8003434 <__libc_init_array+0x44>)
 800340a:	1b64      	subs	r4, r4, r5
 800340c:	10a4      	asrs	r4, r4, #2
 800340e:	42a6      	cmp	r6, r4
 8003410:	d105      	bne.n	800341e <__libc_init_array+0x2e>
 8003412:	bd70      	pop	{r4, r5, r6, pc}
 8003414:	f855 3b04 	ldr.w	r3, [r5], #4
 8003418:	4798      	blx	r3
 800341a:	3601      	adds	r6, #1
 800341c:	e7ee      	b.n	80033fc <__libc_init_array+0xc>
 800341e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003422:	4798      	blx	r3
 8003424:	3601      	adds	r6, #1
 8003426:	e7f2      	b.n	800340e <__libc_init_array+0x1e>
 8003428:	08003fb0 	.word	0x08003fb0
 800342c:	08003fb0 	.word	0x08003fb0
 8003430:	08003fb0 	.word	0x08003fb0
 8003434:	08003fb4 	.word	0x08003fb4

08003438 <__retarget_lock_init_recursive>:
 8003438:	4770      	bx	lr

0800343a <__retarget_lock_acquire_recursive>:
 800343a:	4770      	bx	lr

0800343c <__retarget_lock_release_recursive>:
 800343c:	4770      	bx	lr
	...

08003440 <_free_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4605      	mov	r5, r0
 8003444:	2900      	cmp	r1, #0
 8003446:	d040      	beq.n	80034ca <_free_r+0x8a>
 8003448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800344c:	1f0c      	subs	r4, r1, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	bfb8      	it	lt
 8003452:	18e4      	addlt	r4, r4, r3
 8003454:	f000 f8de 	bl	8003614 <__malloc_lock>
 8003458:	4a1c      	ldr	r2, [pc, #112]	@ (80034cc <_free_r+0x8c>)
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	b933      	cbnz	r3, 800346c <_free_r+0x2c>
 800345e:	6063      	str	r3, [r4, #4]
 8003460:	6014      	str	r4, [r2, #0]
 8003462:	4628      	mov	r0, r5
 8003464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003468:	f000 b8da 	b.w	8003620 <__malloc_unlock>
 800346c:	42a3      	cmp	r3, r4
 800346e:	d908      	bls.n	8003482 <_free_r+0x42>
 8003470:	6820      	ldr	r0, [r4, #0]
 8003472:	1821      	adds	r1, r4, r0
 8003474:	428b      	cmp	r3, r1
 8003476:	bf01      	itttt	eq
 8003478:	6819      	ldreq	r1, [r3, #0]
 800347a:	685b      	ldreq	r3, [r3, #4]
 800347c:	1809      	addeq	r1, r1, r0
 800347e:	6021      	streq	r1, [r4, #0]
 8003480:	e7ed      	b.n	800345e <_free_r+0x1e>
 8003482:	461a      	mov	r2, r3
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	b10b      	cbz	r3, 800348c <_free_r+0x4c>
 8003488:	42a3      	cmp	r3, r4
 800348a:	d9fa      	bls.n	8003482 <_free_r+0x42>
 800348c:	6811      	ldr	r1, [r2, #0]
 800348e:	1850      	adds	r0, r2, r1
 8003490:	42a0      	cmp	r0, r4
 8003492:	d10b      	bne.n	80034ac <_free_r+0x6c>
 8003494:	6820      	ldr	r0, [r4, #0]
 8003496:	4401      	add	r1, r0
 8003498:	1850      	adds	r0, r2, r1
 800349a:	4283      	cmp	r3, r0
 800349c:	6011      	str	r1, [r2, #0]
 800349e:	d1e0      	bne.n	8003462 <_free_r+0x22>
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4408      	add	r0, r1
 80034a6:	6010      	str	r0, [r2, #0]
 80034a8:	6053      	str	r3, [r2, #4]
 80034aa:	e7da      	b.n	8003462 <_free_r+0x22>
 80034ac:	d902      	bls.n	80034b4 <_free_r+0x74>
 80034ae:	230c      	movs	r3, #12
 80034b0:	602b      	str	r3, [r5, #0]
 80034b2:	e7d6      	b.n	8003462 <_free_r+0x22>
 80034b4:	6820      	ldr	r0, [r4, #0]
 80034b6:	1821      	adds	r1, r4, r0
 80034b8:	428b      	cmp	r3, r1
 80034ba:	bf01      	itttt	eq
 80034bc:	6819      	ldreq	r1, [r3, #0]
 80034be:	685b      	ldreq	r3, [r3, #4]
 80034c0:	1809      	addeq	r1, r1, r0
 80034c2:	6021      	streq	r1, [r4, #0]
 80034c4:	6063      	str	r3, [r4, #4]
 80034c6:	6054      	str	r4, [r2, #4]
 80034c8:	e7cb      	b.n	8003462 <_free_r+0x22>
 80034ca:	bd38      	pop	{r3, r4, r5, pc}
 80034cc:	20000278 	.word	0x20000278

080034d0 <sbrk_aligned>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003510 <sbrk_aligned+0x40>)
 80034d4:	460c      	mov	r4, r1
 80034d6:	6831      	ldr	r1, [r6, #0]
 80034d8:	4605      	mov	r5, r0
 80034da:	b911      	cbnz	r1, 80034e2 <sbrk_aligned+0x12>
 80034dc:	f000 fca4 	bl	8003e28 <_sbrk_r>
 80034e0:	6030      	str	r0, [r6, #0]
 80034e2:	4621      	mov	r1, r4
 80034e4:	4628      	mov	r0, r5
 80034e6:	f000 fc9f 	bl	8003e28 <_sbrk_r>
 80034ea:	1c43      	adds	r3, r0, #1
 80034ec:	d103      	bne.n	80034f6 <sbrk_aligned+0x26>
 80034ee:	f04f 34ff 	mov.w	r4, #4294967295
 80034f2:	4620      	mov	r0, r4
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
 80034f6:	1cc4      	adds	r4, r0, #3
 80034f8:	f024 0403 	bic.w	r4, r4, #3
 80034fc:	42a0      	cmp	r0, r4
 80034fe:	d0f8      	beq.n	80034f2 <sbrk_aligned+0x22>
 8003500:	1a21      	subs	r1, r4, r0
 8003502:	4628      	mov	r0, r5
 8003504:	f000 fc90 	bl	8003e28 <_sbrk_r>
 8003508:	3001      	adds	r0, #1
 800350a:	d1f2      	bne.n	80034f2 <sbrk_aligned+0x22>
 800350c:	e7ef      	b.n	80034ee <sbrk_aligned+0x1e>
 800350e:	bf00      	nop
 8003510:	20000274 	.word	0x20000274

08003514 <_malloc_r>:
 8003514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003518:	1ccd      	adds	r5, r1, #3
 800351a:	f025 0503 	bic.w	r5, r5, #3
 800351e:	3508      	adds	r5, #8
 8003520:	2d0c      	cmp	r5, #12
 8003522:	bf38      	it	cc
 8003524:	250c      	movcc	r5, #12
 8003526:	2d00      	cmp	r5, #0
 8003528:	4606      	mov	r6, r0
 800352a:	db01      	blt.n	8003530 <_malloc_r+0x1c>
 800352c:	42a9      	cmp	r1, r5
 800352e:	d904      	bls.n	800353a <_malloc_r+0x26>
 8003530:	230c      	movs	r3, #12
 8003532:	6033      	str	r3, [r6, #0]
 8003534:	2000      	movs	r0, #0
 8003536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800353a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003610 <_malloc_r+0xfc>
 800353e:	f000 f869 	bl	8003614 <__malloc_lock>
 8003542:	f8d8 3000 	ldr.w	r3, [r8]
 8003546:	461c      	mov	r4, r3
 8003548:	bb44      	cbnz	r4, 800359c <_malloc_r+0x88>
 800354a:	4629      	mov	r1, r5
 800354c:	4630      	mov	r0, r6
 800354e:	f7ff ffbf 	bl	80034d0 <sbrk_aligned>
 8003552:	1c43      	adds	r3, r0, #1
 8003554:	4604      	mov	r4, r0
 8003556:	d158      	bne.n	800360a <_malloc_r+0xf6>
 8003558:	f8d8 4000 	ldr.w	r4, [r8]
 800355c:	4627      	mov	r7, r4
 800355e:	2f00      	cmp	r7, #0
 8003560:	d143      	bne.n	80035ea <_malloc_r+0xd6>
 8003562:	2c00      	cmp	r4, #0
 8003564:	d04b      	beq.n	80035fe <_malloc_r+0xea>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	4639      	mov	r1, r7
 800356a:	4630      	mov	r0, r6
 800356c:	eb04 0903 	add.w	r9, r4, r3
 8003570:	f000 fc5a 	bl	8003e28 <_sbrk_r>
 8003574:	4581      	cmp	r9, r0
 8003576:	d142      	bne.n	80035fe <_malloc_r+0xea>
 8003578:	6821      	ldr	r1, [r4, #0]
 800357a:	4630      	mov	r0, r6
 800357c:	1a6d      	subs	r5, r5, r1
 800357e:	4629      	mov	r1, r5
 8003580:	f7ff ffa6 	bl	80034d0 <sbrk_aligned>
 8003584:	3001      	adds	r0, #1
 8003586:	d03a      	beq.n	80035fe <_malloc_r+0xea>
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	442b      	add	r3, r5
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	f8d8 3000 	ldr.w	r3, [r8]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	bb62      	cbnz	r2, 80035f0 <_malloc_r+0xdc>
 8003596:	f8c8 7000 	str.w	r7, [r8]
 800359a:	e00f      	b.n	80035bc <_malloc_r+0xa8>
 800359c:	6822      	ldr	r2, [r4, #0]
 800359e:	1b52      	subs	r2, r2, r5
 80035a0:	d420      	bmi.n	80035e4 <_malloc_r+0xd0>
 80035a2:	2a0b      	cmp	r2, #11
 80035a4:	d917      	bls.n	80035d6 <_malloc_r+0xc2>
 80035a6:	1961      	adds	r1, r4, r5
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	6025      	str	r5, [r4, #0]
 80035ac:	bf18      	it	ne
 80035ae:	6059      	strne	r1, [r3, #4]
 80035b0:	6863      	ldr	r3, [r4, #4]
 80035b2:	bf08      	it	eq
 80035b4:	f8c8 1000 	streq.w	r1, [r8]
 80035b8:	5162      	str	r2, [r4, r5]
 80035ba:	604b      	str	r3, [r1, #4]
 80035bc:	4630      	mov	r0, r6
 80035be:	f000 f82f 	bl	8003620 <__malloc_unlock>
 80035c2:	f104 000b 	add.w	r0, r4, #11
 80035c6:	1d23      	adds	r3, r4, #4
 80035c8:	f020 0007 	bic.w	r0, r0, #7
 80035cc:	1ac2      	subs	r2, r0, r3
 80035ce:	bf1c      	itt	ne
 80035d0:	1a1b      	subne	r3, r3, r0
 80035d2:	50a3      	strne	r3, [r4, r2]
 80035d4:	e7af      	b.n	8003536 <_malloc_r+0x22>
 80035d6:	6862      	ldr	r2, [r4, #4]
 80035d8:	42a3      	cmp	r3, r4
 80035da:	bf0c      	ite	eq
 80035dc:	f8c8 2000 	streq.w	r2, [r8]
 80035e0:	605a      	strne	r2, [r3, #4]
 80035e2:	e7eb      	b.n	80035bc <_malloc_r+0xa8>
 80035e4:	4623      	mov	r3, r4
 80035e6:	6864      	ldr	r4, [r4, #4]
 80035e8:	e7ae      	b.n	8003548 <_malloc_r+0x34>
 80035ea:	463c      	mov	r4, r7
 80035ec:	687f      	ldr	r7, [r7, #4]
 80035ee:	e7b6      	b.n	800355e <_malloc_r+0x4a>
 80035f0:	461a      	mov	r2, r3
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	42a3      	cmp	r3, r4
 80035f6:	d1fb      	bne.n	80035f0 <_malloc_r+0xdc>
 80035f8:	2300      	movs	r3, #0
 80035fa:	6053      	str	r3, [r2, #4]
 80035fc:	e7de      	b.n	80035bc <_malloc_r+0xa8>
 80035fe:	230c      	movs	r3, #12
 8003600:	4630      	mov	r0, r6
 8003602:	6033      	str	r3, [r6, #0]
 8003604:	f000 f80c 	bl	8003620 <__malloc_unlock>
 8003608:	e794      	b.n	8003534 <_malloc_r+0x20>
 800360a:	6005      	str	r5, [r0, #0]
 800360c:	e7d6      	b.n	80035bc <_malloc_r+0xa8>
 800360e:	bf00      	nop
 8003610:	20000278 	.word	0x20000278

08003614 <__malloc_lock>:
 8003614:	4801      	ldr	r0, [pc, #4]	@ (800361c <__malloc_lock+0x8>)
 8003616:	f7ff bf10 	b.w	800343a <__retarget_lock_acquire_recursive>
 800361a:	bf00      	nop
 800361c:	20000270 	.word	0x20000270

08003620 <__malloc_unlock>:
 8003620:	4801      	ldr	r0, [pc, #4]	@ (8003628 <__malloc_unlock+0x8>)
 8003622:	f7ff bf0b 	b.w	800343c <__retarget_lock_release_recursive>
 8003626:	bf00      	nop
 8003628:	20000270 	.word	0x20000270

0800362c <__sfputc_r>:
 800362c:	6893      	ldr	r3, [r2, #8]
 800362e:	b410      	push	{r4}
 8003630:	3b01      	subs	r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	6093      	str	r3, [r2, #8]
 8003636:	da07      	bge.n	8003648 <__sfputc_r+0x1c>
 8003638:	6994      	ldr	r4, [r2, #24]
 800363a:	42a3      	cmp	r3, r4
 800363c:	db01      	blt.n	8003642 <__sfputc_r+0x16>
 800363e:	290a      	cmp	r1, #10
 8003640:	d102      	bne.n	8003648 <__sfputc_r+0x1c>
 8003642:	bc10      	pop	{r4}
 8003644:	f7ff bdeb 	b.w	800321e <__swbuf_r>
 8003648:	6813      	ldr	r3, [r2, #0]
 800364a:	1c58      	adds	r0, r3, #1
 800364c:	6010      	str	r0, [r2, #0]
 800364e:	7019      	strb	r1, [r3, #0]
 8003650:	4608      	mov	r0, r1
 8003652:	bc10      	pop	{r4}
 8003654:	4770      	bx	lr

08003656 <__sfputs_r>:
 8003656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003658:	4606      	mov	r6, r0
 800365a:	460f      	mov	r7, r1
 800365c:	4614      	mov	r4, r2
 800365e:	18d5      	adds	r5, r2, r3
 8003660:	42ac      	cmp	r4, r5
 8003662:	d101      	bne.n	8003668 <__sfputs_r+0x12>
 8003664:	2000      	movs	r0, #0
 8003666:	e007      	b.n	8003678 <__sfputs_r+0x22>
 8003668:	463a      	mov	r2, r7
 800366a:	4630      	mov	r0, r6
 800366c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003670:	f7ff ffdc 	bl	800362c <__sfputc_r>
 8003674:	1c43      	adds	r3, r0, #1
 8003676:	d1f3      	bne.n	8003660 <__sfputs_r+0xa>
 8003678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800367c <_vfiprintf_r>:
 800367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003680:	460d      	mov	r5, r1
 8003682:	4614      	mov	r4, r2
 8003684:	4698      	mov	r8, r3
 8003686:	4606      	mov	r6, r0
 8003688:	b09d      	sub	sp, #116	@ 0x74
 800368a:	b118      	cbz	r0, 8003694 <_vfiprintf_r+0x18>
 800368c:	6a03      	ldr	r3, [r0, #32]
 800368e:	b90b      	cbnz	r3, 8003694 <_vfiprintf_r+0x18>
 8003690:	f7ff fcdc 	bl	800304c <__sinit>
 8003694:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003696:	07d9      	lsls	r1, r3, #31
 8003698:	d405      	bmi.n	80036a6 <_vfiprintf_r+0x2a>
 800369a:	89ab      	ldrh	r3, [r5, #12]
 800369c:	059a      	lsls	r2, r3, #22
 800369e:	d402      	bmi.n	80036a6 <_vfiprintf_r+0x2a>
 80036a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036a2:	f7ff feca 	bl	800343a <__retarget_lock_acquire_recursive>
 80036a6:	89ab      	ldrh	r3, [r5, #12]
 80036a8:	071b      	lsls	r3, r3, #28
 80036aa:	d501      	bpl.n	80036b0 <_vfiprintf_r+0x34>
 80036ac:	692b      	ldr	r3, [r5, #16]
 80036ae:	b99b      	cbnz	r3, 80036d8 <_vfiprintf_r+0x5c>
 80036b0:	4629      	mov	r1, r5
 80036b2:	4630      	mov	r0, r6
 80036b4:	f7ff fdf2 	bl	800329c <__swsetup_r>
 80036b8:	b170      	cbz	r0, 80036d8 <_vfiprintf_r+0x5c>
 80036ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80036bc:	07dc      	lsls	r4, r3, #31
 80036be:	d504      	bpl.n	80036ca <_vfiprintf_r+0x4e>
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	b01d      	add	sp, #116	@ 0x74
 80036c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ca:	89ab      	ldrh	r3, [r5, #12]
 80036cc:	0598      	lsls	r0, r3, #22
 80036ce:	d4f7      	bmi.n	80036c0 <_vfiprintf_r+0x44>
 80036d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036d2:	f7ff feb3 	bl	800343c <__retarget_lock_release_recursive>
 80036d6:	e7f3      	b.n	80036c0 <_vfiprintf_r+0x44>
 80036d8:	2300      	movs	r3, #0
 80036da:	9309      	str	r3, [sp, #36]	@ 0x24
 80036dc:	2320      	movs	r3, #32
 80036de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036e2:	2330      	movs	r3, #48	@ 0x30
 80036e4:	f04f 0901 	mov.w	r9, #1
 80036e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80036ec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003898 <_vfiprintf_r+0x21c>
 80036f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036f4:	4623      	mov	r3, r4
 80036f6:	469a      	mov	sl, r3
 80036f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036fc:	b10a      	cbz	r2, 8003702 <_vfiprintf_r+0x86>
 80036fe:	2a25      	cmp	r2, #37	@ 0x25
 8003700:	d1f9      	bne.n	80036f6 <_vfiprintf_r+0x7a>
 8003702:	ebba 0b04 	subs.w	fp, sl, r4
 8003706:	d00b      	beq.n	8003720 <_vfiprintf_r+0xa4>
 8003708:	465b      	mov	r3, fp
 800370a:	4622      	mov	r2, r4
 800370c:	4629      	mov	r1, r5
 800370e:	4630      	mov	r0, r6
 8003710:	f7ff ffa1 	bl	8003656 <__sfputs_r>
 8003714:	3001      	adds	r0, #1
 8003716:	f000 80a7 	beq.w	8003868 <_vfiprintf_r+0x1ec>
 800371a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800371c:	445a      	add	r2, fp
 800371e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003720:	f89a 3000 	ldrb.w	r3, [sl]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 809f 	beq.w	8003868 <_vfiprintf_r+0x1ec>
 800372a:	2300      	movs	r3, #0
 800372c:	f04f 32ff 	mov.w	r2, #4294967295
 8003730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003734:	f10a 0a01 	add.w	sl, sl, #1
 8003738:	9304      	str	r3, [sp, #16]
 800373a:	9307      	str	r3, [sp, #28]
 800373c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003740:	931a      	str	r3, [sp, #104]	@ 0x68
 8003742:	4654      	mov	r4, sl
 8003744:	2205      	movs	r2, #5
 8003746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800374a:	4853      	ldr	r0, [pc, #332]	@ (8003898 <_vfiprintf_r+0x21c>)
 800374c:	f000 fb7c 	bl	8003e48 <memchr>
 8003750:	9a04      	ldr	r2, [sp, #16]
 8003752:	b9d8      	cbnz	r0, 800378c <_vfiprintf_r+0x110>
 8003754:	06d1      	lsls	r1, r2, #27
 8003756:	bf44      	itt	mi
 8003758:	2320      	movmi	r3, #32
 800375a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800375e:	0713      	lsls	r3, r2, #28
 8003760:	bf44      	itt	mi
 8003762:	232b      	movmi	r3, #43	@ 0x2b
 8003764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003768:	f89a 3000 	ldrb.w	r3, [sl]
 800376c:	2b2a      	cmp	r3, #42	@ 0x2a
 800376e:	d015      	beq.n	800379c <_vfiprintf_r+0x120>
 8003770:	4654      	mov	r4, sl
 8003772:	2000      	movs	r0, #0
 8003774:	f04f 0c0a 	mov.w	ip, #10
 8003778:	9a07      	ldr	r2, [sp, #28]
 800377a:	4621      	mov	r1, r4
 800377c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003780:	3b30      	subs	r3, #48	@ 0x30
 8003782:	2b09      	cmp	r3, #9
 8003784:	d94b      	bls.n	800381e <_vfiprintf_r+0x1a2>
 8003786:	b1b0      	cbz	r0, 80037b6 <_vfiprintf_r+0x13a>
 8003788:	9207      	str	r2, [sp, #28]
 800378a:	e014      	b.n	80037b6 <_vfiprintf_r+0x13a>
 800378c:	eba0 0308 	sub.w	r3, r0, r8
 8003790:	fa09 f303 	lsl.w	r3, r9, r3
 8003794:	4313      	orrs	r3, r2
 8003796:	46a2      	mov	sl, r4
 8003798:	9304      	str	r3, [sp, #16]
 800379a:	e7d2      	b.n	8003742 <_vfiprintf_r+0xc6>
 800379c:	9b03      	ldr	r3, [sp, #12]
 800379e:	1d19      	adds	r1, r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	9103      	str	r1, [sp, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bfbb      	ittet	lt
 80037a8:	425b      	neglt	r3, r3
 80037aa:	f042 0202 	orrlt.w	r2, r2, #2
 80037ae:	9307      	strge	r3, [sp, #28]
 80037b0:	9307      	strlt	r3, [sp, #28]
 80037b2:	bfb8      	it	lt
 80037b4:	9204      	strlt	r2, [sp, #16]
 80037b6:	7823      	ldrb	r3, [r4, #0]
 80037b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80037ba:	d10a      	bne.n	80037d2 <_vfiprintf_r+0x156>
 80037bc:	7863      	ldrb	r3, [r4, #1]
 80037be:	2b2a      	cmp	r3, #42	@ 0x2a
 80037c0:	d132      	bne.n	8003828 <_vfiprintf_r+0x1ac>
 80037c2:	9b03      	ldr	r3, [sp, #12]
 80037c4:	3402      	adds	r4, #2
 80037c6:	1d1a      	adds	r2, r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	9203      	str	r2, [sp, #12]
 80037cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037d0:	9305      	str	r3, [sp, #20]
 80037d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800389c <_vfiprintf_r+0x220>
 80037d6:	2203      	movs	r2, #3
 80037d8:	4650      	mov	r0, sl
 80037da:	7821      	ldrb	r1, [r4, #0]
 80037dc:	f000 fb34 	bl	8003e48 <memchr>
 80037e0:	b138      	cbz	r0, 80037f2 <_vfiprintf_r+0x176>
 80037e2:	2240      	movs	r2, #64	@ 0x40
 80037e4:	9b04      	ldr	r3, [sp, #16]
 80037e6:	eba0 000a 	sub.w	r0, r0, sl
 80037ea:	4082      	lsls	r2, r0
 80037ec:	4313      	orrs	r3, r2
 80037ee:	3401      	adds	r4, #1
 80037f0:	9304      	str	r3, [sp, #16]
 80037f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f6:	2206      	movs	r2, #6
 80037f8:	4829      	ldr	r0, [pc, #164]	@ (80038a0 <_vfiprintf_r+0x224>)
 80037fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037fe:	f000 fb23 	bl	8003e48 <memchr>
 8003802:	2800      	cmp	r0, #0
 8003804:	d03f      	beq.n	8003886 <_vfiprintf_r+0x20a>
 8003806:	4b27      	ldr	r3, [pc, #156]	@ (80038a4 <_vfiprintf_r+0x228>)
 8003808:	bb1b      	cbnz	r3, 8003852 <_vfiprintf_r+0x1d6>
 800380a:	9b03      	ldr	r3, [sp, #12]
 800380c:	3307      	adds	r3, #7
 800380e:	f023 0307 	bic.w	r3, r3, #7
 8003812:	3308      	adds	r3, #8
 8003814:	9303      	str	r3, [sp, #12]
 8003816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003818:	443b      	add	r3, r7
 800381a:	9309      	str	r3, [sp, #36]	@ 0x24
 800381c:	e76a      	b.n	80036f4 <_vfiprintf_r+0x78>
 800381e:	460c      	mov	r4, r1
 8003820:	2001      	movs	r0, #1
 8003822:	fb0c 3202 	mla	r2, ip, r2, r3
 8003826:	e7a8      	b.n	800377a <_vfiprintf_r+0xfe>
 8003828:	2300      	movs	r3, #0
 800382a:	f04f 0c0a 	mov.w	ip, #10
 800382e:	4619      	mov	r1, r3
 8003830:	3401      	adds	r4, #1
 8003832:	9305      	str	r3, [sp, #20]
 8003834:	4620      	mov	r0, r4
 8003836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800383a:	3a30      	subs	r2, #48	@ 0x30
 800383c:	2a09      	cmp	r2, #9
 800383e:	d903      	bls.n	8003848 <_vfiprintf_r+0x1cc>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0c6      	beq.n	80037d2 <_vfiprintf_r+0x156>
 8003844:	9105      	str	r1, [sp, #20]
 8003846:	e7c4      	b.n	80037d2 <_vfiprintf_r+0x156>
 8003848:	4604      	mov	r4, r0
 800384a:	2301      	movs	r3, #1
 800384c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003850:	e7f0      	b.n	8003834 <_vfiprintf_r+0x1b8>
 8003852:	ab03      	add	r3, sp, #12
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	462a      	mov	r2, r5
 8003858:	4630      	mov	r0, r6
 800385a:	4b13      	ldr	r3, [pc, #76]	@ (80038a8 <_vfiprintf_r+0x22c>)
 800385c:	a904      	add	r1, sp, #16
 800385e:	f3af 8000 	nop.w
 8003862:	4607      	mov	r7, r0
 8003864:	1c78      	adds	r0, r7, #1
 8003866:	d1d6      	bne.n	8003816 <_vfiprintf_r+0x19a>
 8003868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800386a:	07d9      	lsls	r1, r3, #31
 800386c:	d405      	bmi.n	800387a <_vfiprintf_r+0x1fe>
 800386e:	89ab      	ldrh	r3, [r5, #12]
 8003870:	059a      	lsls	r2, r3, #22
 8003872:	d402      	bmi.n	800387a <_vfiprintf_r+0x1fe>
 8003874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003876:	f7ff fde1 	bl	800343c <__retarget_lock_release_recursive>
 800387a:	89ab      	ldrh	r3, [r5, #12]
 800387c:	065b      	lsls	r3, r3, #25
 800387e:	f53f af1f 	bmi.w	80036c0 <_vfiprintf_r+0x44>
 8003882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003884:	e71e      	b.n	80036c4 <_vfiprintf_r+0x48>
 8003886:	ab03      	add	r3, sp, #12
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	462a      	mov	r2, r5
 800388c:	4630      	mov	r0, r6
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <_vfiprintf_r+0x22c>)
 8003890:	a904      	add	r1, sp, #16
 8003892:	f000 f87d 	bl	8003990 <_printf_i>
 8003896:	e7e4      	b.n	8003862 <_vfiprintf_r+0x1e6>
 8003898:	08003f7a 	.word	0x08003f7a
 800389c:	08003f80 	.word	0x08003f80
 80038a0:	08003f84 	.word	0x08003f84
 80038a4:	00000000 	.word	0x00000000
 80038a8:	08003657 	.word	0x08003657

080038ac <_printf_common>:
 80038ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b0:	4616      	mov	r6, r2
 80038b2:	4698      	mov	r8, r3
 80038b4:	688a      	ldr	r2, [r1, #8]
 80038b6:	690b      	ldr	r3, [r1, #16]
 80038b8:	4607      	mov	r7, r0
 80038ba:	4293      	cmp	r3, r2
 80038bc:	bfb8      	it	lt
 80038be:	4613      	movlt	r3, r2
 80038c0:	6033      	str	r3, [r6, #0]
 80038c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038c6:	460c      	mov	r4, r1
 80038c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038cc:	b10a      	cbz	r2, 80038d2 <_printf_common+0x26>
 80038ce:	3301      	adds	r3, #1
 80038d0:	6033      	str	r3, [r6, #0]
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	0699      	lsls	r1, r3, #26
 80038d6:	bf42      	ittt	mi
 80038d8:	6833      	ldrmi	r3, [r6, #0]
 80038da:	3302      	addmi	r3, #2
 80038dc:	6033      	strmi	r3, [r6, #0]
 80038de:	6825      	ldr	r5, [r4, #0]
 80038e0:	f015 0506 	ands.w	r5, r5, #6
 80038e4:	d106      	bne.n	80038f4 <_printf_common+0x48>
 80038e6:	f104 0a19 	add.w	sl, r4, #25
 80038ea:	68e3      	ldr	r3, [r4, #12]
 80038ec:	6832      	ldr	r2, [r6, #0]
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	42ab      	cmp	r3, r5
 80038f2:	dc2b      	bgt.n	800394c <_printf_common+0xa0>
 80038f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038f8:	6822      	ldr	r2, [r4, #0]
 80038fa:	3b00      	subs	r3, #0
 80038fc:	bf18      	it	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	0692      	lsls	r2, r2, #26
 8003902:	d430      	bmi.n	8003966 <_printf_common+0xba>
 8003904:	4641      	mov	r1, r8
 8003906:	4638      	mov	r0, r7
 8003908:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800390c:	47c8      	blx	r9
 800390e:	3001      	adds	r0, #1
 8003910:	d023      	beq.n	800395a <_printf_common+0xae>
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	6922      	ldr	r2, [r4, #16]
 8003916:	f003 0306 	and.w	r3, r3, #6
 800391a:	2b04      	cmp	r3, #4
 800391c:	bf14      	ite	ne
 800391e:	2500      	movne	r5, #0
 8003920:	6833      	ldreq	r3, [r6, #0]
 8003922:	f04f 0600 	mov.w	r6, #0
 8003926:	bf08      	it	eq
 8003928:	68e5      	ldreq	r5, [r4, #12]
 800392a:	f104 041a 	add.w	r4, r4, #26
 800392e:	bf08      	it	eq
 8003930:	1aed      	subeq	r5, r5, r3
 8003932:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003936:	bf08      	it	eq
 8003938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800393c:	4293      	cmp	r3, r2
 800393e:	bfc4      	itt	gt
 8003940:	1a9b      	subgt	r3, r3, r2
 8003942:	18ed      	addgt	r5, r5, r3
 8003944:	42b5      	cmp	r5, r6
 8003946:	d11a      	bne.n	800397e <_printf_common+0xd2>
 8003948:	2000      	movs	r0, #0
 800394a:	e008      	b.n	800395e <_printf_common+0xb2>
 800394c:	2301      	movs	r3, #1
 800394e:	4652      	mov	r2, sl
 8003950:	4641      	mov	r1, r8
 8003952:	4638      	mov	r0, r7
 8003954:	47c8      	blx	r9
 8003956:	3001      	adds	r0, #1
 8003958:	d103      	bne.n	8003962 <_printf_common+0xb6>
 800395a:	f04f 30ff 	mov.w	r0, #4294967295
 800395e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003962:	3501      	adds	r5, #1
 8003964:	e7c1      	b.n	80038ea <_printf_common+0x3e>
 8003966:	2030      	movs	r0, #48	@ 0x30
 8003968:	18e1      	adds	r1, r4, r3
 800396a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003974:	4422      	add	r2, r4
 8003976:	3302      	adds	r3, #2
 8003978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800397c:	e7c2      	b.n	8003904 <_printf_common+0x58>
 800397e:	2301      	movs	r3, #1
 8003980:	4622      	mov	r2, r4
 8003982:	4641      	mov	r1, r8
 8003984:	4638      	mov	r0, r7
 8003986:	47c8      	blx	r9
 8003988:	3001      	adds	r0, #1
 800398a:	d0e6      	beq.n	800395a <_printf_common+0xae>
 800398c:	3601      	adds	r6, #1
 800398e:	e7d9      	b.n	8003944 <_printf_common+0x98>

08003990 <_printf_i>:
 8003990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003994:	7e0f      	ldrb	r7, [r1, #24]
 8003996:	4691      	mov	r9, r2
 8003998:	2f78      	cmp	r7, #120	@ 0x78
 800399a:	4680      	mov	r8, r0
 800399c:	460c      	mov	r4, r1
 800399e:	469a      	mov	sl, r3
 80039a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039a6:	d807      	bhi.n	80039b8 <_printf_i+0x28>
 80039a8:	2f62      	cmp	r7, #98	@ 0x62
 80039aa:	d80a      	bhi.n	80039c2 <_printf_i+0x32>
 80039ac:	2f00      	cmp	r7, #0
 80039ae:	f000 80d3 	beq.w	8003b58 <_printf_i+0x1c8>
 80039b2:	2f58      	cmp	r7, #88	@ 0x58
 80039b4:	f000 80ba 	beq.w	8003b2c <_printf_i+0x19c>
 80039b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039c0:	e03a      	b.n	8003a38 <_printf_i+0xa8>
 80039c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039c6:	2b15      	cmp	r3, #21
 80039c8:	d8f6      	bhi.n	80039b8 <_printf_i+0x28>
 80039ca:	a101      	add	r1, pc, #4	@ (adr r1, 80039d0 <_printf_i+0x40>)
 80039cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039d0:	08003a29 	.word	0x08003a29
 80039d4:	08003a3d 	.word	0x08003a3d
 80039d8:	080039b9 	.word	0x080039b9
 80039dc:	080039b9 	.word	0x080039b9
 80039e0:	080039b9 	.word	0x080039b9
 80039e4:	080039b9 	.word	0x080039b9
 80039e8:	08003a3d 	.word	0x08003a3d
 80039ec:	080039b9 	.word	0x080039b9
 80039f0:	080039b9 	.word	0x080039b9
 80039f4:	080039b9 	.word	0x080039b9
 80039f8:	080039b9 	.word	0x080039b9
 80039fc:	08003b3f 	.word	0x08003b3f
 8003a00:	08003a67 	.word	0x08003a67
 8003a04:	08003af9 	.word	0x08003af9
 8003a08:	080039b9 	.word	0x080039b9
 8003a0c:	080039b9 	.word	0x080039b9
 8003a10:	08003b61 	.word	0x08003b61
 8003a14:	080039b9 	.word	0x080039b9
 8003a18:	08003a67 	.word	0x08003a67
 8003a1c:	080039b9 	.word	0x080039b9
 8003a20:	080039b9 	.word	0x080039b9
 8003a24:	08003b01 	.word	0x08003b01
 8003a28:	6833      	ldr	r3, [r6, #0]
 8003a2a:	1d1a      	adds	r2, r3, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6032      	str	r2, [r6, #0]
 8003a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e09e      	b.n	8003b7a <_printf_i+0x1ea>
 8003a3c:	6833      	ldr	r3, [r6, #0]
 8003a3e:	6820      	ldr	r0, [r4, #0]
 8003a40:	1d19      	adds	r1, r3, #4
 8003a42:	6031      	str	r1, [r6, #0]
 8003a44:	0606      	lsls	r6, r0, #24
 8003a46:	d501      	bpl.n	8003a4c <_printf_i+0xbc>
 8003a48:	681d      	ldr	r5, [r3, #0]
 8003a4a:	e003      	b.n	8003a54 <_printf_i+0xc4>
 8003a4c:	0645      	lsls	r5, r0, #25
 8003a4e:	d5fb      	bpl.n	8003a48 <_printf_i+0xb8>
 8003a50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a54:	2d00      	cmp	r5, #0
 8003a56:	da03      	bge.n	8003a60 <_printf_i+0xd0>
 8003a58:	232d      	movs	r3, #45	@ 0x2d
 8003a5a:	426d      	negs	r5, r5
 8003a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a60:	230a      	movs	r3, #10
 8003a62:	4859      	ldr	r0, [pc, #356]	@ (8003bc8 <_printf_i+0x238>)
 8003a64:	e011      	b.n	8003a8a <_printf_i+0xfa>
 8003a66:	6821      	ldr	r1, [r4, #0]
 8003a68:	6833      	ldr	r3, [r6, #0]
 8003a6a:	0608      	lsls	r0, r1, #24
 8003a6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a70:	d402      	bmi.n	8003a78 <_printf_i+0xe8>
 8003a72:	0649      	lsls	r1, r1, #25
 8003a74:	bf48      	it	mi
 8003a76:	b2ad      	uxthmi	r5, r5
 8003a78:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a7a:	6033      	str	r3, [r6, #0]
 8003a7c:	bf14      	ite	ne
 8003a7e:	230a      	movne	r3, #10
 8003a80:	2308      	moveq	r3, #8
 8003a82:	4851      	ldr	r0, [pc, #324]	@ (8003bc8 <_printf_i+0x238>)
 8003a84:	2100      	movs	r1, #0
 8003a86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a8a:	6866      	ldr	r6, [r4, #4]
 8003a8c:	2e00      	cmp	r6, #0
 8003a8e:	bfa8      	it	ge
 8003a90:	6821      	ldrge	r1, [r4, #0]
 8003a92:	60a6      	str	r6, [r4, #8]
 8003a94:	bfa4      	itt	ge
 8003a96:	f021 0104 	bicge.w	r1, r1, #4
 8003a9a:	6021      	strge	r1, [r4, #0]
 8003a9c:	b90d      	cbnz	r5, 8003aa2 <_printf_i+0x112>
 8003a9e:	2e00      	cmp	r6, #0
 8003aa0:	d04b      	beq.n	8003b3a <_printf_i+0x1aa>
 8003aa2:	4616      	mov	r6, r2
 8003aa4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003aa8:	fb03 5711 	mls	r7, r3, r1, r5
 8003aac:	5dc7      	ldrb	r7, [r0, r7]
 8003aae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ab2:	462f      	mov	r7, r5
 8003ab4:	42bb      	cmp	r3, r7
 8003ab6:	460d      	mov	r5, r1
 8003ab8:	d9f4      	bls.n	8003aa4 <_printf_i+0x114>
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d10b      	bne.n	8003ad6 <_printf_i+0x146>
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	07df      	lsls	r7, r3, #31
 8003ac2:	d508      	bpl.n	8003ad6 <_printf_i+0x146>
 8003ac4:	6923      	ldr	r3, [r4, #16]
 8003ac6:	6861      	ldr	r1, [r4, #4]
 8003ac8:	4299      	cmp	r1, r3
 8003aca:	bfde      	ittt	le
 8003acc:	2330      	movle	r3, #48	@ 0x30
 8003ace:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ad2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ad6:	1b92      	subs	r2, r2, r6
 8003ad8:	6122      	str	r2, [r4, #16]
 8003ada:	464b      	mov	r3, r9
 8003adc:	4621      	mov	r1, r4
 8003ade:	4640      	mov	r0, r8
 8003ae0:	f8cd a000 	str.w	sl, [sp]
 8003ae4:	aa03      	add	r2, sp, #12
 8003ae6:	f7ff fee1 	bl	80038ac <_printf_common>
 8003aea:	3001      	adds	r0, #1
 8003aec:	d14a      	bne.n	8003b84 <_printf_i+0x1f4>
 8003aee:	f04f 30ff 	mov.w	r0, #4294967295
 8003af2:	b004      	add	sp, #16
 8003af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	f043 0320 	orr.w	r3, r3, #32
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	2778      	movs	r7, #120	@ 0x78
 8003b02:	4832      	ldr	r0, [pc, #200]	@ (8003bcc <_printf_i+0x23c>)
 8003b04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	6831      	ldr	r1, [r6, #0]
 8003b0c:	061f      	lsls	r7, r3, #24
 8003b0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b12:	d402      	bmi.n	8003b1a <_printf_i+0x18a>
 8003b14:	065f      	lsls	r7, r3, #25
 8003b16:	bf48      	it	mi
 8003b18:	b2ad      	uxthmi	r5, r5
 8003b1a:	6031      	str	r1, [r6, #0]
 8003b1c:	07d9      	lsls	r1, r3, #31
 8003b1e:	bf44      	itt	mi
 8003b20:	f043 0320 	orrmi.w	r3, r3, #32
 8003b24:	6023      	strmi	r3, [r4, #0]
 8003b26:	b11d      	cbz	r5, 8003b30 <_printf_i+0x1a0>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	e7ab      	b.n	8003a84 <_printf_i+0xf4>
 8003b2c:	4826      	ldr	r0, [pc, #152]	@ (8003bc8 <_printf_i+0x238>)
 8003b2e:	e7e9      	b.n	8003b04 <_printf_i+0x174>
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	f023 0320 	bic.w	r3, r3, #32
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	e7f6      	b.n	8003b28 <_printf_i+0x198>
 8003b3a:	4616      	mov	r6, r2
 8003b3c:	e7bd      	b.n	8003aba <_printf_i+0x12a>
 8003b3e:	6833      	ldr	r3, [r6, #0]
 8003b40:	6825      	ldr	r5, [r4, #0]
 8003b42:	1d18      	adds	r0, r3, #4
 8003b44:	6961      	ldr	r1, [r4, #20]
 8003b46:	6030      	str	r0, [r6, #0]
 8003b48:	062e      	lsls	r6, r5, #24
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	d501      	bpl.n	8003b52 <_printf_i+0x1c2>
 8003b4e:	6019      	str	r1, [r3, #0]
 8003b50:	e002      	b.n	8003b58 <_printf_i+0x1c8>
 8003b52:	0668      	lsls	r0, r5, #25
 8003b54:	d5fb      	bpl.n	8003b4e <_printf_i+0x1be>
 8003b56:	8019      	strh	r1, [r3, #0]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	4616      	mov	r6, r2
 8003b5c:	6123      	str	r3, [r4, #16]
 8003b5e:	e7bc      	b.n	8003ada <_printf_i+0x14a>
 8003b60:	6833      	ldr	r3, [r6, #0]
 8003b62:	2100      	movs	r1, #0
 8003b64:	1d1a      	adds	r2, r3, #4
 8003b66:	6032      	str	r2, [r6, #0]
 8003b68:	681e      	ldr	r6, [r3, #0]
 8003b6a:	6862      	ldr	r2, [r4, #4]
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f000 f96b 	bl	8003e48 <memchr>
 8003b72:	b108      	cbz	r0, 8003b78 <_printf_i+0x1e8>
 8003b74:	1b80      	subs	r0, r0, r6
 8003b76:	6060      	str	r0, [r4, #4]
 8003b78:	6863      	ldr	r3, [r4, #4]
 8003b7a:	6123      	str	r3, [r4, #16]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b82:	e7aa      	b.n	8003ada <_printf_i+0x14a>
 8003b84:	4632      	mov	r2, r6
 8003b86:	4649      	mov	r1, r9
 8003b88:	4640      	mov	r0, r8
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	47d0      	blx	sl
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d0ad      	beq.n	8003aee <_printf_i+0x15e>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	079b      	lsls	r3, r3, #30
 8003b96:	d413      	bmi.n	8003bc0 <_printf_i+0x230>
 8003b98:	68e0      	ldr	r0, [r4, #12]
 8003b9a:	9b03      	ldr	r3, [sp, #12]
 8003b9c:	4298      	cmp	r0, r3
 8003b9e:	bfb8      	it	lt
 8003ba0:	4618      	movlt	r0, r3
 8003ba2:	e7a6      	b.n	8003af2 <_printf_i+0x162>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	4632      	mov	r2, r6
 8003ba8:	4649      	mov	r1, r9
 8003baa:	4640      	mov	r0, r8
 8003bac:	47d0      	blx	sl
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d09d      	beq.n	8003aee <_printf_i+0x15e>
 8003bb2:	3501      	adds	r5, #1
 8003bb4:	68e3      	ldr	r3, [r4, #12]
 8003bb6:	9903      	ldr	r1, [sp, #12]
 8003bb8:	1a5b      	subs	r3, r3, r1
 8003bba:	42ab      	cmp	r3, r5
 8003bbc:	dcf2      	bgt.n	8003ba4 <_printf_i+0x214>
 8003bbe:	e7eb      	b.n	8003b98 <_printf_i+0x208>
 8003bc0:	2500      	movs	r5, #0
 8003bc2:	f104 0619 	add.w	r6, r4, #25
 8003bc6:	e7f5      	b.n	8003bb4 <_printf_i+0x224>
 8003bc8:	08003f8b 	.word	0x08003f8b
 8003bcc:	08003f9c 	.word	0x08003f9c

08003bd0 <__sflush_r>:
 8003bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	0716      	lsls	r6, r2, #28
 8003bd8:	4605      	mov	r5, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	d454      	bmi.n	8003c88 <__sflush_r+0xb8>
 8003bde:	684b      	ldr	r3, [r1, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	dc02      	bgt.n	8003bea <__sflush_r+0x1a>
 8003be4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	dd48      	ble.n	8003c7c <__sflush_r+0xac>
 8003bea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bec:	2e00      	cmp	r6, #0
 8003bee:	d045      	beq.n	8003c7c <__sflush_r+0xac>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003bf6:	682f      	ldr	r7, [r5, #0]
 8003bf8:	6a21      	ldr	r1, [r4, #32]
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	d030      	beq.n	8003c60 <__sflush_r+0x90>
 8003bfe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	0759      	lsls	r1, r3, #29
 8003c04:	d505      	bpl.n	8003c12 <__sflush_r+0x42>
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	1ad2      	subs	r2, r2, r3
 8003c0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c0c:	b10b      	cbz	r3, 8003c12 <__sflush_r+0x42>
 8003c0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c10:	1ad2      	subs	r2, r2, r3
 8003c12:	2300      	movs	r3, #0
 8003c14:	4628      	mov	r0, r5
 8003c16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c18:	6a21      	ldr	r1, [r4, #32]
 8003c1a:	47b0      	blx	r6
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	89a3      	ldrh	r3, [r4, #12]
 8003c20:	d106      	bne.n	8003c30 <__sflush_r+0x60>
 8003c22:	6829      	ldr	r1, [r5, #0]
 8003c24:	291d      	cmp	r1, #29
 8003c26:	d82b      	bhi.n	8003c80 <__sflush_r+0xb0>
 8003c28:	4a28      	ldr	r2, [pc, #160]	@ (8003ccc <__sflush_r+0xfc>)
 8003c2a:	410a      	asrs	r2, r1
 8003c2c:	07d6      	lsls	r6, r2, #31
 8003c2e:	d427      	bmi.n	8003c80 <__sflush_r+0xb0>
 8003c30:	2200      	movs	r2, #0
 8003c32:	6062      	str	r2, [r4, #4]
 8003c34:	6922      	ldr	r2, [r4, #16]
 8003c36:	04d9      	lsls	r1, r3, #19
 8003c38:	6022      	str	r2, [r4, #0]
 8003c3a:	d504      	bpl.n	8003c46 <__sflush_r+0x76>
 8003c3c:	1c42      	adds	r2, r0, #1
 8003c3e:	d101      	bne.n	8003c44 <__sflush_r+0x74>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	b903      	cbnz	r3, 8003c46 <__sflush_r+0x76>
 8003c44:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c48:	602f      	str	r7, [r5, #0]
 8003c4a:	b1b9      	cbz	r1, 8003c7c <__sflush_r+0xac>
 8003c4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c50:	4299      	cmp	r1, r3
 8003c52:	d002      	beq.n	8003c5a <__sflush_r+0x8a>
 8003c54:	4628      	mov	r0, r5
 8003c56:	f7ff fbf3 	bl	8003440 <_free_r>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c5e:	e00d      	b.n	8003c7c <__sflush_r+0xac>
 8003c60:	2301      	movs	r3, #1
 8003c62:	4628      	mov	r0, r5
 8003c64:	47b0      	blx	r6
 8003c66:	4602      	mov	r2, r0
 8003c68:	1c50      	adds	r0, r2, #1
 8003c6a:	d1c9      	bne.n	8003c00 <__sflush_r+0x30>
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0c6      	beq.n	8003c00 <__sflush_r+0x30>
 8003c72:	2b1d      	cmp	r3, #29
 8003c74:	d001      	beq.n	8003c7a <__sflush_r+0xaa>
 8003c76:	2b16      	cmp	r3, #22
 8003c78:	d11d      	bne.n	8003cb6 <__sflush_r+0xe6>
 8003c7a:	602f      	str	r7, [r5, #0]
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	e021      	b.n	8003cc4 <__sflush_r+0xf4>
 8003c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c84:	b21b      	sxth	r3, r3
 8003c86:	e01a      	b.n	8003cbe <__sflush_r+0xee>
 8003c88:	690f      	ldr	r7, [r1, #16]
 8003c8a:	2f00      	cmp	r7, #0
 8003c8c:	d0f6      	beq.n	8003c7c <__sflush_r+0xac>
 8003c8e:	0793      	lsls	r3, r2, #30
 8003c90:	bf18      	it	ne
 8003c92:	2300      	movne	r3, #0
 8003c94:	680e      	ldr	r6, [r1, #0]
 8003c96:	bf08      	it	eq
 8003c98:	694b      	ldreq	r3, [r1, #20]
 8003c9a:	1bf6      	subs	r6, r6, r7
 8003c9c:	600f      	str	r7, [r1, #0]
 8003c9e:	608b      	str	r3, [r1, #8]
 8003ca0:	2e00      	cmp	r6, #0
 8003ca2:	ddeb      	ble.n	8003c7c <__sflush_r+0xac>
 8003ca4:	4633      	mov	r3, r6
 8003ca6:	463a      	mov	r2, r7
 8003ca8:	4628      	mov	r0, r5
 8003caa:	6a21      	ldr	r1, [r4, #32]
 8003cac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003cb0:	47e0      	blx	ip
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	dc07      	bgt.n	8003cc6 <__sflush_r+0xf6>
 8003cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc2:	81a3      	strh	r3, [r4, #12]
 8003cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc6:	4407      	add	r7, r0
 8003cc8:	1a36      	subs	r6, r6, r0
 8003cca:	e7e9      	b.n	8003ca0 <__sflush_r+0xd0>
 8003ccc:	dfbffffe 	.word	0xdfbffffe

08003cd0 <_fflush_r>:
 8003cd0:	b538      	push	{r3, r4, r5, lr}
 8003cd2:	690b      	ldr	r3, [r1, #16]
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	b913      	cbnz	r3, 8003ce0 <_fflush_r+0x10>
 8003cda:	2500      	movs	r5, #0
 8003cdc:	4628      	mov	r0, r5
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	b118      	cbz	r0, 8003cea <_fflush_r+0x1a>
 8003ce2:	6a03      	ldr	r3, [r0, #32]
 8003ce4:	b90b      	cbnz	r3, 8003cea <_fflush_r+0x1a>
 8003ce6:	f7ff f9b1 	bl	800304c <__sinit>
 8003cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f3      	beq.n	8003cda <_fflush_r+0xa>
 8003cf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003cf4:	07d0      	lsls	r0, r2, #31
 8003cf6:	d404      	bmi.n	8003d02 <_fflush_r+0x32>
 8003cf8:	0599      	lsls	r1, r3, #22
 8003cfa:	d402      	bmi.n	8003d02 <_fflush_r+0x32>
 8003cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cfe:	f7ff fb9c 	bl	800343a <__retarget_lock_acquire_recursive>
 8003d02:	4628      	mov	r0, r5
 8003d04:	4621      	mov	r1, r4
 8003d06:	f7ff ff63 	bl	8003bd0 <__sflush_r>
 8003d0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	07da      	lsls	r2, r3, #31
 8003d10:	d4e4      	bmi.n	8003cdc <_fflush_r+0xc>
 8003d12:	89a3      	ldrh	r3, [r4, #12]
 8003d14:	059b      	lsls	r3, r3, #22
 8003d16:	d4e1      	bmi.n	8003cdc <_fflush_r+0xc>
 8003d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d1a:	f7ff fb8f 	bl	800343c <__retarget_lock_release_recursive>
 8003d1e:	e7dd      	b.n	8003cdc <_fflush_r+0xc>

08003d20 <__swhatbuf_r>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	460c      	mov	r4, r1
 8003d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d28:	4615      	mov	r5, r2
 8003d2a:	2900      	cmp	r1, #0
 8003d2c:	461e      	mov	r6, r3
 8003d2e:	b096      	sub	sp, #88	@ 0x58
 8003d30:	da0c      	bge.n	8003d4c <__swhatbuf_r+0x2c>
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	2100      	movs	r1, #0
 8003d36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d3a:	bf14      	ite	ne
 8003d3c:	2340      	movne	r3, #64	@ 0x40
 8003d3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d42:	2000      	movs	r0, #0
 8003d44:	6031      	str	r1, [r6, #0]
 8003d46:	602b      	str	r3, [r5, #0]
 8003d48:	b016      	add	sp, #88	@ 0x58
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	466a      	mov	r2, sp
 8003d4e:	f000 f849 	bl	8003de4 <_fstat_r>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	dbed      	blt.n	8003d32 <__swhatbuf_r+0x12>
 8003d56:	9901      	ldr	r1, [sp, #4]
 8003d58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d60:	4259      	negs	r1, r3
 8003d62:	4159      	adcs	r1, r3
 8003d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d68:	e7eb      	b.n	8003d42 <__swhatbuf_r+0x22>

08003d6a <__smakebuf_r>:
 8003d6a:	898b      	ldrh	r3, [r1, #12]
 8003d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d6e:	079d      	lsls	r5, r3, #30
 8003d70:	4606      	mov	r6, r0
 8003d72:	460c      	mov	r4, r1
 8003d74:	d507      	bpl.n	8003d86 <__smakebuf_r+0x1c>
 8003d76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d7a:	6023      	str	r3, [r4, #0]
 8003d7c:	6123      	str	r3, [r4, #16]
 8003d7e:	2301      	movs	r3, #1
 8003d80:	6163      	str	r3, [r4, #20]
 8003d82:	b003      	add	sp, #12
 8003d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d86:	466a      	mov	r2, sp
 8003d88:	ab01      	add	r3, sp, #4
 8003d8a:	f7ff ffc9 	bl	8003d20 <__swhatbuf_r>
 8003d8e:	9f00      	ldr	r7, [sp, #0]
 8003d90:	4605      	mov	r5, r0
 8003d92:	4639      	mov	r1, r7
 8003d94:	4630      	mov	r0, r6
 8003d96:	f7ff fbbd 	bl	8003514 <_malloc_r>
 8003d9a:	b948      	cbnz	r0, 8003db0 <__smakebuf_r+0x46>
 8003d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da0:	059a      	lsls	r2, r3, #22
 8003da2:	d4ee      	bmi.n	8003d82 <__smakebuf_r+0x18>
 8003da4:	f023 0303 	bic.w	r3, r3, #3
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	81a3      	strh	r3, [r4, #12]
 8003dae:	e7e2      	b.n	8003d76 <__smakebuf_r+0xc>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	9b01      	ldr	r3, [sp, #4]
 8003dbe:	6020      	str	r0, [r4, #0]
 8003dc0:	b15b      	cbz	r3, 8003dda <__smakebuf_r+0x70>
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc8:	f000 f81e 	bl	8003e08 <_isatty_r>
 8003dcc:	b128      	cbz	r0, 8003dda <__smakebuf_r+0x70>
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	f023 0303 	bic.w	r3, r3, #3
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	81a3      	strh	r3, [r4, #12]
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	431d      	orrs	r5, r3
 8003dde:	81a5      	strh	r5, [r4, #12]
 8003de0:	e7cf      	b.n	8003d82 <__smakebuf_r+0x18>
	...

08003de4 <_fstat_r>:
 8003de4:	b538      	push	{r3, r4, r5, lr}
 8003de6:	2300      	movs	r3, #0
 8003de8:	4d06      	ldr	r5, [pc, #24]	@ (8003e04 <_fstat_r+0x20>)
 8003dea:	4604      	mov	r4, r0
 8003dec:	4608      	mov	r0, r1
 8003dee:	4611      	mov	r1, r2
 8003df0:	602b      	str	r3, [r5, #0]
 8003df2:	f7fd f8d3 	bl	8000f9c <_fstat>
 8003df6:	1c43      	adds	r3, r0, #1
 8003df8:	d102      	bne.n	8003e00 <_fstat_r+0x1c>
 8003dfa:	682b      	ldr	r3, [r5, #0]
 8003dfc:	b103      	cbz	r3, 8003e00 <_fstat_r+0x1c>
 8003dfe:	6023      	str	r3, [r4, #0]
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
 8003e02:	bf00      	nop
 8003e04:	2000026c 	.word	0x2000026c

08003e08 <_isatty_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4d05      	ldr	r5, [pc, #20]	@ (8003e24 <_isatty_r+0x1c>)
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fd f8d1 	bl	8000fba <_isatty>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_isatty_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_isatty_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	2000026c 	.word	0x2000026c

08003e28 <_sbrk_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	4d05      	ldr	r5, [pc, #20]	@ (8003e44 <_sbrk_r+0x1c>)
 8003e2e:	4604      	mov	r4, r0
 8003e30:	4608      	mov	r0, r1
 8003e32:	602b      	str	r3, [r5, #0]
 8003e34:	f7fd f8d8 	bl	8000fe8 <_sbrk>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_sbrk_r+0x1a>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_sbrk_r+0x1a>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	2000026c 	.word	0x2000026c

08003e48 <memchr>:
 8003e48:	4603      	mov	r3, r0
 8003e4a:	b510      	push	{r4, lr}
 8003e4c:	b2c9      	uxtb	r1, r1
 8003e4e:	4402      	add	r2, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	d101      	bne.n	8003e5a <memchr+0x12>
 8003e56:	2000      	movs	r0, #0
 8003e58:	e003      	b.n	8003e62 <memchr+0x1a>
 8003e5a:	7804      	ldrb	r4, [r0, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	428c      	cmp	r4, r1
 8003e60:	d1f6      	bne.n	8003e50 <memchr+0x8>
 8003e62:	bd10      	pop	{r4, pc}

08003e64 <_init>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	bf00      	nop
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr

08003e70 <_fini>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr
