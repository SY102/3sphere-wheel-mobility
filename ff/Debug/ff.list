
ff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d7c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003e8c  08003e8c  00004e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f24  08003f24  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003f24  08003f24  00005060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003f24  08003f24  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f24  08003f24  00004f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f28  08003f28  00004f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003f2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b50  20000060  08003f8c  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bb0  08003f8c  00005bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9ad  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b2  00000000  00000000  00012a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00014ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e9  00000000  00000000  00015ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000026a1  00000000  00000000  000163a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ceb2  00000000  00000000  00018a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ab1  00000000  00000000  000258fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af3ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003274  00000000  00000000  000af3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b2664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08003e74 	.word	0x08003e74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08003e74 	.word	0x08003e74

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 f958 	bl	8000408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f824 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f864 	bl	8000228 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 f860 	bl	8001224 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask2 */
  myTask2Handle = osThreadNew(StartTask02, NULL, &myTask2_attributes);
 8000164:	4a09      	ldr	r2, [pc, #36]	@ (800018c <main+0x3c>)
 8000166:	2100      	movs	r1, #0
 8000168:	4809      	ldr	r0, [pc, #36]	@ (8000190 <main+0x40>)
 800016a:	f001 f8a3 	bl	80012b4 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a08      	ldr	r2, [pc, #32]	@ (8000194 <main+0x44>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8000174:	4a08      	ldr	r2, [pc, #32]	@ (8000198 <main+0x48>)
 8000176:	2100      	movs	r1, #0
 8000178:	4808      	ldr	r0, [pc, #32]	@ (800019c <main+0x4c>)
 800017a:	f001 f89b 	bl	80012b4 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a07      	ldr	r2, [pc, #28]	@ (80001a0 <main+0x50>)
 8000182:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000184:	f001 f870 	bl	8001268 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000188:	bf00      	nop
 800018a:	e7fd      	b.n	8000188 <main+0x38>
 800018c:	08003eb8 	.word	0x08003eb8
 8000190:	080002a5 	.word	0x080002a5
 8000194:	2000007c 	.word	0x2000007c
 8000198:	08003edc 	.word	0x08003edc
 800019c:	080002c5 	.word	0x080002c5
 80001a0:	20000080 	.word	0x20000080

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b090      	sub	sp, #64	@ 0x40
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	2228      	movs	r2, #40	@ 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f003 fd70 	bl	8003c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]
 80001c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c6:	2302      	movs	r3, #2
 80001c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ce:	2310      	movs	r3, #16
 80001d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d2:	2302      	movs	r3, #2
 80001d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001d6:	2300      	movs	r3, #0
 80001d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001da:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e0:	f107 0318 	add.w	r3, r7, #24
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fc0b 	bl	8000a00 <HAL_RCC_OscConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001f0:	f000 f878 	bl	80002e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f4:	230f      	movs	r3, #15
 80001f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f8:	2302      	movs	r3, #2
 80001fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	2102      	movs	r1, #2
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fe78 	bl	8000f04 <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800021a:	f000 f863 	bl	80002e4 <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3740      	adds	r7, #64	@ 0x40
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022e:	f107 0308 	add.w	r3, r7, #8
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023c:	4b17      	ldr	r3, [pc, #92]	@ (800029c <MX_GPIO_Init+0x74>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a16      	ldr	r2, [pc, #88]	@ (800029c <MX_GPIO_Init+0x74>)
 8000242:	f043 0304 	orr.w	r3, r3, #4
 8000246:	6193      	str	r3, [r2, #24]
 8000248:	4b14      	ldr	r3, [pc, #80]	@ (800029c <MX_GPIO_Init+0x74>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	f003 0304 	and.w	r3, r3, #4
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000254:	4b11      	ldr	r3, [pc, #68]	@ (800029c <MX_GPIO_Init+0x74>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a10      	ldr	r2, [pc, #64]	@ (800029c <MX_GPIO_Init+0x74>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b0e      	ldr	r3, [pc, #56]	@ (800029c <MX_GPIO_Init+0x74>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0308 	and.w	r3, r3, #8
 8000268:	603b      	str	r3, [r7, #0]
 800026a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	210c      	movs	r1, #12
 8000270:	480b      	ldr	r0, [pc, #44]	@ (80002a0 <MX_GPIO_Init+0x78>)
 8000272:	f000 fb93 	bl	800099c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000276:	230c      	movs	r3, #12
 8000278:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027a:	2301      	movs	r3, #1
 800027c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000282:	2302      	movs	r3, #2
 8000284:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000286:	f107 0308 	add.w	r3, r7, #8
 800028a:	4619      	mov	r1, r3
 800028c:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <MX_GPIO_Init+0x78>)
 800028e:	f000 fa01 	bl	8000694 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000292:	bf00      	nop
 8000294:	3718      	adds	r7, #24
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40021000 	.word	0x40021000
 80002a0:	40010800 	.word	0x40010800

080002a4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
 80002ac:	2108      	movs	r1, #8
 80002ae:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <StartTask02+0x1c>)
 80002b0:	f000 fb8c 	bl	80009cc <HAL_GPIO_TogglePin>
    osDelay(500);
 80002b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002b8:	f001 f88e 	bl	80013d8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
 80002bc:	bf00      	nop
 80002be:	e7f5      	b.n	80002ac <StartTask02+0x8>
 80002c0:	40010800 	.word	0x40010800

080002c4 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 80002cc:	2104      	movs	r1, #4
 80002ce:	4804      	ldr	r0, [pc, #16]	@ (80002e0 <StartTask01+0x1c>)
 80002d0:	f000 fb7c 	bl	80009cc <HAL_GPIO_TogglePin>
    osDelay(1);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f001 f87f 	bl	80013d8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 80002da:	bf00      	nop
 80002dc:	e7f6      	b.n	80002cc <StartTask01+0x8>
 80002de:	bf00      	nop
 80002e0:	40010800 	.word	0x40010800

080002e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ec:	bf00      	nop
 80002ee:	e7fd      	b.n	80002ec <Error_Handler+0x8>

080002f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <HAL_MspInit+0x68>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a17      	ldr	r2, [pc, #92]	@ (8000358 <HAL_MspInit+0x68>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <HAL_MspInit+0x68>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030e:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <HAL_MspInit+0x68>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a11      	ldr	r2, [pc, #68]	@ (8000358 <HAL_MspInit+0x68>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <HAL_MspInit+0x68>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	210f      	movs	r1, #15
 800032a:	f06f 0001 	mvn.w	r0, #1
 800032e:	f000 f988 	bl	8000642 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000332:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <HAL_MspInit+0x6c>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	4a04      	ldr	r2, [pc, #16]	@ (800035c <HAL_MspInit+0x6c>)
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40010000 	.word	0x40010000

08000360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <NMI_Handler+0x4>

08000368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <HardFault_Handler+0x4>

08000370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <MemManage_Handler+0x4>

08000378 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <UsageFault_Handler+0x4>

08000388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000398:	f000 f87c 	bl	8000494 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800039c:	f002 fc66 	bl	8002c6c <xTaskGetSchedulerState>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d001      	beq.n	80003aa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80003a6:	f003 fa07 	bl	80037b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}

080003ae <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
	...

080003bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003bc:	f7ff fff7 	bl	80003ae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	@ (80003f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003c2:	490c      	ldr	r1, [pc, #48]	@ (80003f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003c4:	4a0c      	ldr	r2, [pc, #48]	@ (80003f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c8:	e002      	b.n	80003d0 <LoopCopyDataInit>

080003ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ce:	3304      	adds	r3, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d4:	d3f9      	bcc.n	80003ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d6:	4a09      	ldr	r2, [pc, #36]	@ (80003fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003d8:	4c09      	ldr	r4, [pc, #36]	@ (8000400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003dc:	e001      	b.n	80003e2 <LoopFillZerobss>

080003de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e0:	3204      	adds	r2, #4

080003e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e4:	d3fb      	bcc.n	80003de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003e6:	f003 fcbd 	bl	8003d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ea:	f7ff feb1 	bl	8000150 <main>
  bx lr
 80003ee:	4770      	bx	lr
  ldr r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80003f8:	08003f2c 	.word	0x08003f2c
  ldr r2, =_sbss
 80003fc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000400:	20001bb0 	.word	0x20001bb0

08000404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC1_2_IRQHandler>
	...

08000408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800040c:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <HAL_Init+0x28>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a07      	ldr	r2, [pc, #28]	@ (8000430 <HAL_Init+0x28>)
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000418:	2003      	movs	r0, #3
 800041a:	f000 f907 	bl	800062c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800041e:	200f      	movs	r0, #15
 8000420:	f000 f808 	bl	8000434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000424:	f7ff ff64 	bl	80002f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000428:	2300      	movs	r3, #0
}
 800042a:	4618      	mov	r0, r3
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40022000 	.word	0x40022000

08000434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800043c:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <HAL_InitTick+0x54>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b12      	ldr	r3, [pc, #72]	@ (800048c <HAL_InitTick+0x58>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	4619      	mov	r1, r3
 8000446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800044a:	fbb3 f3f1 	udiv	r3, r3, r1
 800044e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f911 	bl	800067a <HAL_SYSTICK_Config>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800045e:	2301      	movs	r3, #1
 8000460:	e00e      	b.n	8000480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b0f      	cmp	r3, #15
 8000466:	d80a      	bhi.n	800047e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000468:	2200      	movs	r2, #0
 800046a:	6879      	ldr	r1, [r7, #4]
 800046c:	f04f 30ff 	mov.w	r0, #4294967295
 8000470:	f000 f8e7 	bl	8000642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000474:	4a06      	ldr	r2, [pc, #24]	@ (8000490 <HAL_InitTick+0x5c>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800047a:	2300      	movs	r3, #0
 800047c:	e000      	b.n	8000480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800047e:	2301      	movs	r3, #1
}
 8000480:	4618      	mov	r0, r3
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000000 	.word	0x20000000
 800048c:	20000008 	.word	0x20000008
 8000490:	20000004 	.word	0x20000004

08000494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000498:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <HAL_IncTick+0x1c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	461a      	mov	r2, r3
 800049e:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <HAL_IncTick+0x20>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4413      	add	r3, r2
 80004a4:	4a03      	ldr	r2, [pc, #12]	@ (80004b4 <HAL_IncTick+0x20>)
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	20000008 	.word	0x20000008
 80004b4:	20000084 	.word	0x20000084

080004b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  return uwTick;
 80004bc:	4b02      	ldr	r3, [pc, #8]	@ (80004c8 <HAL_GetTick+0x10>)
 80004be:	681b      	ldr	r3, [r3, #0]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	20000084 	.word	0x20000084

080004cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f003 0307 	and.w	r3, r3, #7
 80004da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <__NVIC_SetPriorityGrouping+0x44>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80004e8:	4013      	ands	r3, r2
 80004ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80004f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004fe:	4a04      	ldr	r2, [pc, #16]	@ (8000510 <__NVIC_SetPriorityGrouping+0x44>)
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	60d3      	str	r3, [r2, #12]
}
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000518:	4b04      	ldr	r3, [pc, #16]	@ (800052c <__NVIC_GetPriorityGrouping+0x18>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	0a1b      	lsrs	r3, r3, #8
 800051e:	f003 0307 	and.w	r3, r3, #7
}
 8000522:	4618      	mov	r0, r3
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	6039      	str	r1, [r7, #0]
 800053a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800053c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	db0a      	blt.n	800055a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	b2da      	uxtb	r2, r3
 8000548:	490c      	ldr	r1, [pc, #48]	@ (800057c <__NVIC_SetPriority+0x4c>)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	0112      	lsls	r2, r2, #4
 8000550:	b2d2      	uxtb	r2, r2
 8000552:	440b      	add	r3, r1
 8000554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000558:	e00a      	b.n	8000570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4908      	ldr	r1, [pc, #32]	@ (8000580 <__NVIC_SetPriority+0x50>)
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	f003 030f 	and.w	r3, r3, #15
 8000566:	3b04      	subs	r3, #4
 8000568:	0112      	lsls	r2, r2, #4
 800056a:	b2d2      	uxtb	r2, r2
 800056c:	440b      	add	r3, r1
 800056e:	761a      	strb	r2, [r3, #24]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000e100 	.word	0xe000e100
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000584:	b480      	push	{r7}
 8000586:	b089      	sub	sp, #36	@ 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f003 0307 	and.w	r3, r3, #7
 8000596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	f1c3 0307 	rsb	r3, r3, #7
 800059e:	2b04      	cmp	r3, #4
 80005a0:	bf28      	it	cs
 80005a2:	2304      	movcs	r3, #4
 80005a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3304      	adds	r3, #4
 80005aa:	2b06      	cmp	r3, #6
 80005ac:	d902      	bls.n	80005b4 <NVIC_EncodePriority+0x30>
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	3b03      	subs	r3, #3
 80005b2:	e000      	b.n	80005b6 <NVIC_EncodePriority+0x32>
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b8:	f04f 32ff 	mov.w	r2, #4294967295
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	43da      	mvns	r2, r3
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	401a      	ands	r2, r3
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005cc:	f04f 31ff 	mov.w	r1, #4294967295
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	43d9      	mvns	r1, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	4313      	orrs	r3, r2
         );
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3724      	adds	r7, #36	@ 0x24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005f8:	d301      	bcc.n	80005fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005fa:	2301      	movs	r3, #1
 80005fc:	e00f      	b.n	800061e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000628 <SysTick_Config+0x40>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3b01      	subs	r3, #1
 8000604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000606:	210f      	movs	r1, #15
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f7ff ff90 	bl	8000530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <SysTick_Config+0x40>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000616:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <SysTick_Config+0x40>)
 8000618:	2207      	movs	r2, #7
 800061a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	e000e010 	.word	0xe000e010

0800062c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ff49 	bl	80004cc <__NVIC_SetPriorityGrouping>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000642:	b580      	push	{r7, lr}
 8000644:	b086      	sub	sp, #24
 8000646:	af00      	add	r7, sp, #0
 8000648:	4603      	mov	r3, r0
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000654:	f7ff ff5e 	bl	8000514 <__NVIC_GetPriorityGrouping>
 8000658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	68b9      	ldr	r1, [r7, #8]
 800065e:	6978      	ldr	r0, [r7, #20]
 8000660:	f7ff ff90 	bl	8000584 <NVIC_EncodePriority>
 8000664:	4602      	mov	r2, r0
 8000666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066a:	4611      	mov	r1, r2
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff5f 	bl	8000530 <__NVIC_SetPriority>
}
 8000672:	bf00      	nop
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ffb0 	bl	80005e8 <SysTick_Config>
 8000688:	4603      	mov	r3, r0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000694:	b480      	push	{r7}
 8000696:	b08b      	sub	sp, #44	@ 0x2c
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006a6:	e169      	b.n	800097c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006a8:	2201      	movs	r2, #1
 80006aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	69fa      	ldr	r2, [r7, #28]
 80006b8:	4013      	ands	r3, r2
 80006ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80006bc:	69ba      	ldr	r2, [r7, #24]
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	f040 8158 	bne.w	8000976 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	4a9a      	ldr	r2, [pc, #616]	@ (8000934 <HAL_GPIO_Init+0x2a0>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d05e      	beq.n	800078e <HAL_GPIO_Init+0xfa>
 80006d0:	4a98      	ldr	r2, [pc, #608]	@ (8000934 <HAL_GPIO_Init+0x2a0>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d875      	bhi.n	80007c2 <HAL_GPIO_Init+0x12e>
 80006d6:	4a98      	ldr	r2, [pc, #608]	@ (8000938 <HAL_GPIO_Init+0x2a4>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d058      	beq.n	800078e <HAL_GPIO_Init+0xfa>
 80006dc:	4a96      	ldr	r2, [pc, #600]	@ (8000938 <HAL_GPIO_Init+0x2a4>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d86f      	bhi.n	80007c2 <HAL_GPIO_Init+0x12e>
 80006e2:	4a96      	ldr	r2, [pc, #600]	@ (800093c <HAL_GPIO_Init+0x2a8>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d052      	beq.n	800078e <HAL_GPIO_Init+0xfa>
 80006e8:	4a94      	ldr	r2, [pc, #592]	@ (800093c <HAL_GPIO_Init+0x2a8>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d869      	bhi.n	80007c2 <HAL_GPIO_Init+0x12e>
 80006ee:	4a94      	ldr	r2, [pc, #592]	@ (8000940 <HAL_GPIO_Init+0x2ac>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d04c      	beq.n	800078e <HAL_GPIO_Init+0xfa>
 80006f4:	4a92      	ldr	r2, [pc, #584]	@ (8000940 <HAL_GPIO_Init+0x2ac>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d863      	bhi.n	80007c2 <HAL_GPIO_Init+0x12e>
 80006fa:	4a92      	ldr	r2, [pc, #584]	@ (8000944 <HAL_GPIO_Init+0x2b0>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d046      	beq.n	800078e <HAL_GPIO_Init+0xfa>
 8000700:	4a90      	ldr	r2, [pc, #576]	@ (8000944 <HAL_GPIO_Init+0x2b0>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d85d      	bhi.n	80007c2 <HAL_GPIO_Init+0x12e>
 8000706:	2b12      	cmp	r3, #18
 8000708:	d82a      	bhi.n	8000760 <HAL_GPIO_Init+0xcc>
 800070a:	2b12      	cmp	r3, #18
 800070c:	d859      	bhi.n	80007c2 <HAL_GPIO_Init+0x12e>
 800070e:	a201      	add	r2, pc, #4	@ (adr r2, 8000714 <HAL_GPIO_Init+0x80>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	0800078f 	.word	0x0800078f
 8000718:	08000769 	.word	0x08000769
 800071c:	0800077b 	.word	0x0800077b
 8000720:	080007bd 	.word	0x080007bd
 8000724:	080007c3 	.word	0x080007c3
 8000728:	080007c3 	.word	0x080007c3
 800072c:	080007c3 	.word	0x080007c3
 8000730:	080007c3 	.word	0x080007c3
 8000734:	080007c3 	.word	0x080007c3
 8000738:	080007c3 	.word	0x080007c3
 800073c:	080007c3 	.word	0x080007c3
 8000740:	080007c3 	.word	0x080007c3
 8000744:	080007c3 	.word	0x080007c3
 8000748:	080007c3 	.word	0x080007c3
 800074c:	080007c3 	.word	0x080007c3
 8000750:	080007c3 	.word	0x080007c3
 8000754:	080007c3 	.word	0x080007c3
 8000758:	08000771 	.word	0x08000771
 800075c:	08000785 	.word	0x08000785
 8000760:	4a79      	ldr	r2, [pc, #484]	@ (8000948 <HAL_GPIO_Init+0x2b4>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d013      	beq.n	800078e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000766:	e02c      	b.n	80007c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	623b      	str	r3, [r7, #32]
          break;
 800076e:	e029      	b.n	80007c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	3304      	adds	r3, #4
 8000776:	623b      	str	r3, [r7, #32]
          break;
 8000778:	e024      	b.n	80007c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	3308      	adds	r3, #8
 8000780:	623b      	str	r3, [r7, #32]
          break;
 8000782:	e01f      	b.n	80007c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	330c      	adds	r3, #12
 800078a:	623b      	str	r3, [r7, #32]
          break;
 800078c:	e01a      	b.n	80007c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d102      	bne.n	800079c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000796:	2304      	movs	r3, #4
 8000798:	623b      	str	r3, [r7, #32]
          break;
 800079a:	e013      	b.n	80007c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d105      	bne.n	80007b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007a4:	2308      	movs	r3, #8
 80007a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	69fa      	ldr	r2, [r7, #28]
 80007ac:	611a      	str	r2, [r3, #16]
          break;
 80007ae:	e009      	b.n	80007c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007b0:	2308      	movs	r3, #8
 80007b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	69fa      	ldr	r2, [r7, #28]
 80007b8:	615a      	str	r2, [r3, #20]
          break;
 80007ba:	e003      	b.n	80007c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
          break;
 80007c0:	e000      	b.n	80007c4 <HAL_GPIO_Init+0x130>
          break;
 80007c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	2bff      	cmp	r3, #255	@ 0xff
 80007c8:	d801      	bhi.n	80007ce <HAL_GPIO_Init+0x13a>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	e001      	b.n	80007d2 <HAL_GPIO_Init+0x13e>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3304      	adds	r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	2bff      	cmp	r3, #255	@ 0xff
 80007d8:	d802      	bhi.n	80007e0 <HAL_GPIO_Init+0x14c>
 80007da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	e002      	b.n	80007e6 <HAL_GPIO_Init+0x152>
 80007e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e2:	3b08      	subs	r3, #8
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	210f      	movs	r1, #15
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	401a      	ands	r2, r3
 80007f8:	6a39      	ldr	r1, [r7, #32]
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	431a      	orrs	r2, r3
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	2b00      	cmp	r3, #0
 8000810:	f000 80b1 	beq.w	8000976 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000814:	4b4d      	ldr	r3, [pc, #308]	@ (800094c <HAL_GPIO_Init+0x2b8>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a4c      	ldr	r2, [pc, #304]	@ (800094c <HAL_GPIO_Init+0x2b8>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b4a      	ldr	r3, [pc, #296]	@ (800094c <HAL_GPIO_Init+0x2b8>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800082c:	4a48      	ldr	r2, [pc, #288]	@ (8000950 <HAL_GPIO_Init+0x2bc>)
 800082e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000830:	089b      	lsrs	r3, r3, #2
 8000832:	3302      	adds	r3, #2
 8000834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000838:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800083a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083c:	f003 0303 	and.w	r3, r3, #3
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	220f      	movs	r2, #15
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	43db      	mvns	r3, r3
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	4013      	ands	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a40      	ldr	r2, [pc, #256]	@ (8000954 <HAL_GPIO_Init+0x2c0>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d013      	beq.n	8000880 <HAL_GPIO_Init+0x1ec>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a3f      	ldr	r2, [pc, #252]	@ (8000958 <HAL_GPIO_Init+0x2c4>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d00d      	beq.n	800087c <HAL_GPIO_Init+0x1e8>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a3e      	ldr	r2, [pc, #248]	@ (800095c <HAL_GPIO_Init+0x2c8>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d007      	beq.n	8000878 <HAL_GPIO_Init+0x1e4>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a3d      	ldr	r2, [pc, #244]	@ (8000960 <HAL_GPIO_Init+0x2cc>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d101      	bne.n	8000874 <HAL_GPIO_Init+0x1e0>
 8000870:	2303      	movs	r3, #3
 8000872:	e006      	b.n	8000882 <HAL_GPIO_Init+0x1ee>
 8000874:	2304      	movs	r3, #4
 8000876:	e004      	b.n	8000882 <HAL_GPIO_Init+0x1ee>
 8000878:	2302      	movs	r3, #2
 800087a:	e002      	b.n	8000882 <HAL_GPIO_Init+0x1ee>
 800087c:	2301      	movs	r3, #1
 800087e:	e000      	b.n	8000882 <HAL_GPIO_Init+0x1ee>
 8000880:	2300      	movs	r3, #0
 8000882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000884:	f002 0203 	and.w	r2, r2, #3
 8000888:	0092      	lsls	r2, r2, #2
 800088a:	4093      	lsls	r3, r2
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	4313      	orrs	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000892:	492f      	ldr	r1, [pc, #188]	@ (8000950 <HAL_GPIO_Init+0x2bc>)
 8000894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	3302      	adds	r3, #2
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d006      	beq.n	80008ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	492c      	ldr	r1, [pc, #176]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	608b      	str	r3, [r1, #8]
 80008b8:	e006      	b.n	80008c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	43db      	mvns	r3, r3
 80008c2:	4928      	ldr	r1, [pc, #160]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 80008c4:	4013      	ands	r3, r2
 80008c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d006      	beq.n	80008e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008d4:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	4922      	ldr	r1, [pc, #136]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	4313      	orrs	r3, r2
 80008de:	60cb      	str	r3, [r1, #12]
 80008e0:	e006      	b.n	80008f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008e2:	4b20      	ldr	r3, [pc, #128]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 80008e4:	68da      	ldr	r2, [r3, #12]
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	43db      	mvns	r3, r3
 80008ea:	491e      	ldr	r1, [pc, #120]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 80008ec:	4013      	ands	r3, r2
 80008ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d006      	beq.n	800090a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008fc:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	4918      	ldr	r1, [pc, #96]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	4313      	orrs	r3, r2
 8000906:	604b      	str	r3, [r1, #4]
 8000908:	e006      	b.n	8000918 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 800090c:	685a      	ldr	r2, [r3, #4]
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	43db      	mvns	r3, r3
 8000912:	4914      	ldr	r1, [pc, #80]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 8000914:	4013      	ands	r3, r2
 8000916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d021      	beq.n	8000968 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	490e      	ldr	r1, [pc, #56]	@ (8000964 <HAL_GPIO_Init+0x2d0>)
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	4313      	orrs	r3, r2
 800092e:	600b      	str	r3, [r1, #0]
 8000930:	e021      	b.n	8000976 <HAL_GPIO_Init+0x2e2>
 8000932:	bf00      	nop
 8000934:	10320000 	.word	0x10320000
 8000938:	10310000 	.word	0x10310000
 800093c:	10220000 	.word	0x10220000
 8000940:	10210000 	.word	0x10210000
 8000944:	10120000 	.word	0x10120000
 8000948:	10110000 	.word	0x10110000
 800094c:	40021000 	.word	0x40021000
 8000950:	40010000 	.word	0x40010000
 8000954:	40010800 	.word	0x40010800
 8000958:	40010c00 	.word	0x40010c00
 800095c:	40011000 	.word	0x40011000
 8000960:	40011400 	.word	0x40011400
 8000964:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000968:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <HAL_GPIO_Init+0x304>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	43db      	mvns	r3, r3
 8000970:	4909      	ldr	r1, [pc, #36]	@ (8000998 <HAL_GPIO_Init+0x304>)
 8000972:	4013      	ands	r3, r2
 8000974:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000978:	3301      	adds	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000982:	fa22 f303 	lsr.w	r3, r2, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	f47f ae8e 	bne.w	80006a8 <HAL_GPIO_Init+0x14>
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	372c      	adds	r7, #44	@ 0x2c
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40010400 	.word	0x40010400

0800099c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
 80009a8:	4613      	mov	r3, r2
 80009aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009ac:	787b      	ldrb	r3, [r7, #1]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009b2:	887a      	ldrh	r2, [r7, #2]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009b8:	e003      	b.n	80009c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009ba:	887b      	ldrh	r3, [r7, #2]
 80009bc:	041a      	lsls	r2, r3, #16
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	611a      	str	r2, [r3, #16]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80009de:	887a      	ldrh	r2, [r7, #2]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4013      	ands	r3, r2
 80009e4:	041a      	lsls	r2, r3, #16
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	43d9      	mvns	r1, r3
 80009ea:	887b      	ldrh	r3, [r7, #2]
 80009ec:	400b      	ands	r3, r1
 80009ee:	431a      	orrs	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	611a      	str	r2, [r3, #16]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
	...

08000a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e272      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 8087 	beq.w	8000b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a20:	4b92      	ldr	r3, [pc, #584]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 030c 	and.w	r3, r3, #12
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d00c      	beq.n	8000a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a2c:	4b8f      	ldr	r3, [pc, #572]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 030c 	and.w	r3, r3, #12
 8000a34:	2b08      	cmp	r3, #8
 8000a36:	d112      	bne.n	8000a5e <HAL_RCC_OscConfig+0x5e>
 8000a38:	4b8c      	ldr	r3, [pc, #560]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a44:	d10b      	bne.n	8000a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a46:	4b89      	ldr	r3, [pc, #548]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d06c      	beq.n	8000b2c <HAL_RCC_OscConfig+0x12c>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d168      	bne.n	8000b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e24c      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a66:	d106      	bne.n	8000a76 <HAL_RCC_OscConfig+0x76>
 8000a68:	4b80      	ldr	r3, [pc, #512]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a7f      	ldr	r2, [pc, #508]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	e02e      	b.n	8000ad4 <HAL_RCC_OscConfig+0xd4>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10c      	bne.n	8000a98 <HAL_RCC_OscConfig+0x98>
 8000a7e:	4b7b      	ldr	r3, [pc, #492]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a7a      	ldr	r2, [pc, #488]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	4b78      	ldr	r3, [pc, #480]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a77      	ldr	r2, [pc, #476]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000a90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	e01d      	b.n	8000ad4 <HAL_RCC_OscConfig+0xd4>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000aa0:	d10c      	bne.n	8000abc <HAL_RCC_OscConfig+0xbc>
 8000aa2:	4b72      	ldr	r3, [pc, #456]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a71      	ldr	r2, [pc, #452]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4b6f      	ldr	r3, [pc, #444]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a6e      	ldr	r2, [pc, #440]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e00b      	b.n	8000ad4 <HAL_RCC_OscConfig+0xd4>
 8000abc:	4b6b      	ldr	r3, [pc, #428]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a6a      	ldr	r2, [pc, #424]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b68      	ldr	r3, [pc, #416]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a67      	ldr	r2, [pc, #412]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d013      	beq.n	8000b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000adc:	f7ff fcec 	bl	80004b8 <HAL_GetTick>
 8000ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae2:	e008      	b.n	8000af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ae4:	f7ff fce8 	bl	80004b8 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b64      	cmp	r3, #100	@ 0x64
 8000af0:	d901      	bls.n	8000af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000af2:	2303      	movs	r3, #3
 8000af4:	e200      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af6:	4b5d      	ldr	r3, [pc, #372]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f0      	beq.n	8000ae4 <HAL_RCC_OscConfig+0xe4>
 8000b02:	e014      	b.n	8000b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b04:	f7ff fcd8 	bl	80004b8 <HAL_GetTick>
 8000b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b0a:	e008      	b.n	8000b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b0c:	f7ff fcd4 	bl	80004b8 <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b64      	cmp	r3, #100	@ 0x64
 8000b18:	d901      	bls.n	8000b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	e1ec      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b1e:	4b53      	ldr	r3, [pc, #332]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f0      	bne.n	8000b0c <HAL_RCC_OscConfig+0x10c>
 8000b2a:	e000      	b.n	8000b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d063      	beq.n	8000c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00b      	beq.n	8000b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b46:	4b49      	ldr	r3, [pc, #292]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 030c 	and.w	r3, r3, #12
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	d11c      	bne.n	8000b8c <HAL_RCC_OscConfig+0x18c>
 8000b52:	4b46      	ldr	r3, [pc, #280]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d116      	bne.n	8000b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b5e:	4b43      	ldr	r3, [pc, #268]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <HAL_RCC_OscConfig+0x176>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d001      	beq.n	8000b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e1c0      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b76:	4b3d      	ldr	r3, [pc, #244]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	4939      	ldr	r1, [pc, #228]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000b86:	4313      	orrs	r3, r2
 8000b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b8a:	e03a      	b.n	8000c02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d020      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b94:	4b36      	ldr	r3, [pc, #216]	@ (8000c70 <HAL_RCC_OscConfig+0x270>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b9a:	f7ff fc8d 	bl	80004b8 <HAL_GetTick>
 8000b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba0:	e008      	b.n	8000bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ba2:	f7ff fc89 	bl	80004b8 <HAL_GetTick>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d901      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e1a1      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f0      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4927      	ldr	r1, [pc, #156]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	600b      	str	r3, [r1, #0]
 8000bd4:	e015      	b.n	8000c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bd6:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <HAL_RCC_OscConfig+0x270>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fc6c 	bl	80004b8 <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000be4:	f7ff fc68 	bl	80004b8 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e180      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f0      	bne.n	8000be4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d03a      	beq.n	8000c84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d019      	beq.n	8000c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c16:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <HAL_RCC_OscConfig+0x274>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c1c:	f7ff fc4c 	bl	80004b8 <HAL_GetTick>
 8000c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c24:	f7ff fc48 	bl	80004b8 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e160      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c36:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <HAL_RCC_OscConfig+0x26c>)
 8000c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f0      	beq.n	8000c24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c42:	2001      	movs	r0, #1
 8000c44:	f000 fa9c 	bl	8001180 <RCC_Delay>
 8000c48:	e01c      	b.n	8000c84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_RCC_OscConfig+0x274>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c50:	f7ff fc32 	bl	80004b8 <HAL_GetTick>
 8000c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c56:	e00f      	b.n	8000c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c58:	f7ff fc2e 	bl	80004b8 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d908      	bls.n	8000c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e146      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	42420000 	.word	0x42420000
 8000c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c78:	4b92      	ldr	r3, [pc, #584]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1e9      	bne.n	8000c58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f000 80a6 	beq.w	8000dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c96:	4b8b      	ldr	r3, [pc, #556]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10d      	bne.n	8000cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b88      	ldr	r3, [pc, #544]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a87      	ldr	r2, [pc, #540]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b85      	ldr	r3, [pc, #532]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cbe:	4b82      	ldr	r3, [pc, #520]	@ (8000ec8 <HAL_RCC_OscConfig+0x4c8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d118      	bne.n	8000cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cca:	4b7f      	ldr	r3, [pc, #508]	@ (8000ec8 <HAL_RCC_OscConfig+0x4c8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a7e      	ldr	r2, [pc, #504]	@ (8000ec8 <HAL_RCC_OscConfig+0x4c8>)
 8000cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fbef 	bl	80004b8 <HAL_GetTick>
 8000cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cdc:	e008      	b.n	8000cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cde:	f7ff fbeb 	bl	80004b8 <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b64      	cmp	r3, #100	@ 0x64
 8000cea:	d901      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e103      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf0:	4b75      	ldr	r3, [pc, #468]	@ (8000ec8 <HAL_RCC_OscConfig+0x4c8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f0      	beq.n	8000cde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d106      	bne.n	8000d12 <HAL_RCC_OscConfig+0x312>
 8000d04:	4b6f      	ldr	r3, [pc, #444]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	4a6e      	ldr	r2, [pc, #440]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6213      	str	r3, [r2, #32]
 8000d10:	e02d      	b.n	8000d6e <HAL_RCC_OscConfig+0x36e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10c      	bne.n	8000d34 <HAL_RCC_OscConfig+0x334>
 8000d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	4a69      	ldr	r2, [pc, #420]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d20:	f023 0301 	bic.w	r3, r3, #1
 8000d24:	6213      	str	r3, [r2, #32]
 8000d26:	4b67      	ldr	r3, [pc, #412]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	4a66      	ldr	r2, [pc, #408]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d2c:	f023 0304 	bic.w	r3, r3, #4
 8000d30:	6213      	str	r3, [r2, #32]
 8000d32:	e01c      	b.n	8000d6e <HAL_RCC_OscConfig+0x36e>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	2b05      	cmp	r3, #5
 8000d3a:	d10c      	bne.n	8000d56 <HAL_RCC_OscConfig+0x356>
 8000d3c:	4b61      	ldr	r3, [pc, #388]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	4a60      	ldr	r2, [pc, #384]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	6213      	str	r3, [r2, #32]
 8000d48:	4b5e      	ldr	r3, [pc, #376]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6213      	str	r3, [r2, #32]
 8000d54:	e00b      	b.n	8000d6e <HAL_RCC_OscConfig+0x36e>
 8000d56:	4b5b      	ldr	r3, [pc, #364]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d58:	6a1b      	ldr	r3, [r3, #32]
 8000d5a:	4a5a      	ldr	r2, [pc, #360]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d5c:	f023 0301 	bic.w	r3, r3, #1
 8000d60:	6213      	str	r3, [r2, #32]
 8000d62:	4b58      	ldr	r3, [pc, #352]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	4a57      	ldr	r2, [pc, #348]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d68:	f023 0304 	bic.w	r3, r3, #4
 8000d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d015      	beq.n	8000da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d76:	f7ff fb9f 	bl	80004b8 <HAL_GetTick>
 8000d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7c:	e00a      	b.n	8000d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d7e:	f7ff fb9b 	bl	80004b8 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e0b1      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d94:	4b4b      	ldr	r3, [pc, #300]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0ee      	beq.n	8000d7e <HAL_RCC_OscConfig+0x37e>
 8000da0:	e014      	b.n	8000dcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da2:	f7ff fb89 	bl	80004b8 <HAL_GetTick>
 8000da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000da8:	e00a      	b.n	8000dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000daa:	f7ff fb85 	bl	80004b8 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e09b      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc0:	4b40      	ldr	r3, [pc, #256]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1ee      	bne.n	8000daa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d105      	bne.n	8000dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 8087 	beq.w	8000ef6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000de8:	4b36      	ldr	r3, [pc, #216]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d061      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d146      	bne.n	8000e8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dfc:	4b33      	ldr	r3, [pc, #204]	@ (8000ecc <HAL_RCC_OscConfig+0x4cc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fb59 	bl	80004b8 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e0a:	f7ff fb55 	bl	80004b8 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e06d      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f0      	bne.n	8000e0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e30:	d108      	bne.n	8000e44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e32:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	4921      	ldr	r1, [pc, #132]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a19      	ldr	r1, [r3, #32]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e54:	430b      	orrs	r3, r1
 8000e56:	491b      	ldr	r1, [pc, #108]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <HAL_RCC_OscConfig+0x4cc>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e62:	f7ff fb29 	bl	80004b8 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e6a:	f7ff fb25 	bl	80004b8 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e03d      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0x46a>
 8000e88:	e035      	b.n	8000ef6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <HAL_RCC_OscConfig+0x4cc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fb12 	bl	80004b8 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e98:	f7ff fb0e 	bl	80004b8 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e026      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0x498>
 8000eb6:	e01e      	b.n	8000ef6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d107      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e019      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40007000 	.word	0x40007000
 8000ecc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <HAL_RCC_OscConfig+0x500>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d001      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40021000 	.word	0x40021000

08000f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e0d0      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f18:	4b6a      	ldr	r3, [pc, #424]	@ (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d910      	bls.n	8000f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f26:	4b67      	ldr	r3, [pc, #412]	@ (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 0207 	bic.w	r2, r3, #7
 8000f2e:	4965      	ldr	r1, [pc, #404]	@ (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f36:	4b63      	ldr	r3, [pc, #396]	@ (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d001      	beq.n	8000f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e0b8      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d020      	beq.n	8000f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f60:	4b59      	ldr	r3, [pc, #356]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4a58      	ldr	r2, [pc, #352]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f78:	4b53      	ldr	r3, [pc, #332]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a52      	ldr	r2, [pc, #328]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f84:	4b50      	ldr	r3, [pc, #320]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	494d      	ldr	r1, [pc, #308]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d040      	beq.n	8001024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d107      	bne.n	8000fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	4b47      	ldr	r3, [pc, #284]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d115      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e07f      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d107      	bne.n	8000fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc2:	4b41      	ldr	r3, [pc, #260]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d109      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e073      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e06b      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe2:	4b39      	ldr	r3, [pc, #228]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f023 0203 	bic.w	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4936      	ldr	r1, [pc, #216]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ff4:	f7ff fa60 	bl	80004b8 <HAL_GetTick>
 8000ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffa:	e00a      	b.n	8001012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffc:	f7ff fa5c 	bl	80004b8 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800100a:	4293      	cmp	r3, r2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e053      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001012:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 020c 	and.w	r2, r3, #12
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	429a      	cmp	r2, r3
 8001022:	d1eb      	bne.n	8000ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001024:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d210      	bcs.n	8001054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001032:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 0207 	bic.w	r2, r3, #7
 800103a:	4922      	ldr	r1, [pc, #136]	@ (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	4313      	orrs	r3, r2
 8001040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d001      	beq.n	8001054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e032      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001060:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	4916      	ldr	r1, [pc, #88]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	4313      	orrs	r3, r2
 8001070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d009      	beq.n	8001092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800107e:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	490e      	ldr	r1, [pc, #56]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	4313      	orrs	r3, r2
 8001090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001092:	f000 f821 	bl	80010d8 <HAL_RCC_GetSysClockFreq>
 8001096:	4602      	mov	r2, r0
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	091b      	lsrs	r3, r3, #4
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	490a      	ldr	r1, [pc, #40]	@ (80010cc <HAL_RCC_ClockConfig+0x1c8>)
 80010a4:	5ccb      	ldrb	r3, [r1, r3]
 80010a6:	fa22 f303 	lsr.w	r3, r2, r3
 80010aa:	4a09      	ldr	r2, [pc, #36]	@ (80010d0 <HAL_RCC_ClockConfig+0x1cc>)
 80010ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <HAL_RCC_ClockConfig+0x1d0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f9be 	bl	8000434 <HAL_InitTick>

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000
 80010c8:	40021000 	.word	0x40021000
 80010cc:	08003f00 	.word	0x08003f00
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <HAL_RCC_GetSysClockFreq+0x94>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d002      	beq.n	8001108 <HAL_RCC_GetSysClockFreq+0x30>
 8001102:	2b08      	cmp	r3, #8
 8001104:	d003      	beq.n	800110e <HAL_RCC_GetSysClockFreq+0x36>
 8001106:	e027      	b.n	8001158 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001108:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <HAL_RCC_GetSysClockFreq+0x98>)
 800110a:	613b      	str	r3, [r7, #16]
      break;
 800110c:	e027      	b.n	800115e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	0c9b      	lsrs	r3, r3, #18
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001118:	5cd3      	ldrb	r3, [r2, r3]
 800111a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d010      	beq.n	8001148 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <HAL_RCC_GetSysClockFreq+0x94>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	0c5b      	lsrs	r3, r3, #17
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	4a11      	ldr	r2, [pc, #68]	@ (8001178 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001132:	5cd3      	ldrb	r3, [r2, r3]
 8001134:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <HAL_RCC_GetSysClockFreq+0x98>)
 800113a:	fb03 f202 	mul.w	r2, r3, r2
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	fbb2 f3f3 	udiv	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e004      	b.n	8001152 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a0c      	ldr	r2, [pc, #48]	@ (800117c <HAL_RCC_GetSysClockFreq+0xa4>)
 800114c:	fb02 f303 	mul.w	r3, r2, r3
 8001150:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	613b      	str	r3, [r7, #16]
      break;
 8001156:	e002      	b.n	800115e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <HAL_RCC_GetSysClockFreq+0x98>)
 800115a:	613b      	str	r3, [r7, #16]
      break;
 800115c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800115e:	693b      	ldr	r3, [r7, #16]
}
 8001160:	4618      	mov	r0, r3
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	007a1200 	.word	0x007a1200
 8001174:	08003f10 	.word	0x08003f10
 8001178:	08003f20 	.word	0x08003f20
 800117c:	003d0900 	.word	0x003d0900

08001180 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <RCC_Delay+0x34>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <RCC_Delay+0x38>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0a5b      	lsrs	r3, r3, #9
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800119c:	bf00      	nop
  }
  while (Delay --);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	60fa      	str	r2, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f9      	bne.n	800119c <RCC_Delay+0x1c>
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000000 	.word	0x20000000
 80011b8:	10624dd3 	.word	0x10624dd3

080011bc <__NVIC_SetPriority>:
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	@ (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	@ (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001214:	2100      	movs	r1, #0
 8001216:	f06f 0004 	mvn.w	r0, #4
 800121a:	f7ff ffcf 	bl	80011bc <__NVIC_SetPriority>
#endif
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800122a:	f3ef 8305 	mrs	r3, IPSR
 800122e:	603b      	str	r3, [r7, #0]
  return(result);
 8001230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001236:	f06f 0305 	mvn.w	r3, #5
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	e00c      	b.n	8001258 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <osKernelInitialize+0x40>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d105      	bne.n	8001252 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <osKernelInitialize+0x40>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	e002      	b.n	8001258 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001258:	687b      	ldr	r3, [r7, #4]
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000088 	.word	0x20000088

08001268 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800126e:	f3ef 8305 	mrs	r3, IPSR
 8001272:	603b      	str	r3, [r7, #0]
  return(result);
 8001274:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <osKernelStart+0x1a>
    stat = osErrorISR;
 800127a:	f06f 0305 	mvn.w	r3, #5
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	e010      	b.n	80012a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <osKernelStart+0x48>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d109      	bne.n	800129e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800128a:	f7ff ffc1 	bl	8001210 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <osKernelStart+0x48>)
 8001290:	2202      	movs	r2, #2
 8001292:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001294:	f001 f88a 	bl	80023ac <vTaskStartScheduler>
      stat = osOK;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	e002      	b.n	80012a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000088 	.word	0x20000088

080012b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08e      	sub	sp, #56	@ 0x38
 80012b8:	af04      	add	r7, sp, #16
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012c4:	f3ef 8305 	mrs	r3, IPSR
 80012c8:	617b      	str	r3, [r7, #20]
  return(result);
 80012ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d17e      	bne.n	80013ce <osThreadNew+0x11a>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d07b      	beq.n	80013ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80012d6:	2380      	movs	r3, #128	@ 0x80
 80012d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80012da:	2318      	movs	r3, #24
 80012dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d045      	beq.n	800137a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <osThreadNew+0x48>
        name = attr->name;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <osThreadNew+0x6e>
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	2b38      	cmp	r3, #56	@ 0x38
 8001314:	d805      	bhi.n	8001322 <osThreadNew+0x6e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <osThreadNew+0x72>
        return (NULL);
 8001322:	2300      	movs	r3, #0
 8001324:	e054      	b.n	80013d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00e      	beq.n	800135c <osThreadNew+0xa8>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2ba7      	cmp	r3, #167	@ 0xa7
 8001344:	d90a      	bls.n	800135c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <osThreadNew+0xa8>
        mem = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	e010      	b.n	800137e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10c      	bne.n	800137e <osThreadNew+0xca>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d108      	bne.n	800137e <osThreadNew+0xca>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d104      	bne.n	800137e <osThreadNew+0xca>
          mem = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	e001      	b.n	800137e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d110      	bne.n	80013a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800138c:	9202      	str	r2, [sp, #8]
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	6a3a      	ldr	r2, [r7, #32]
 8001398:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 fe12 	bl	8001fc4 <xTaskCreateStatic>
 80013a0:	4603      	mov	r3, r0
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	e013      	b.n	80013ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d110      	bne.n	80013ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 fe60 	bl	8002084 <xTaskCreate>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d001      	beq.n	80013ce <osThreadNew+0x11a>
            hTask = NULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80013ce:	693b      	ldr	r3, [r7, #16]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3728      	adds	r7, #40	@ 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013e0:	f3ef 8305 	mrs	r3, IPSR
 80013e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80013e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <osDelay+0x1c>
    stat = osErrorISR;
 80013ec:	f06f 0305 	mvn.w	r3, #5
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e007      	b.n	8001404 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <osDelay+0x2c>
      vTaskDelay(ticks);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 ff9e 	bl	8002340 <vTaskDelay>
    }
  }

  return (stat);
 8001404:	68fb      	ldr	r3, [r7, #12]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4a06      	ldr	r2, [pc, #24]	@ (8001438 <vApplicationGetIdleTaskMemory+0x28>)
 8001420:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4a05      	ldr	r2, [pc, #20]	@ (800143c <vApplicationGetIdleTaskMemory+0x2c>)
 8001426:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2280      	movs	r2, #128	@ 0x80
 800142c:	601a      	str	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	2000008c 	.word	0x2000008c
 800143c:	20000134 	.word	0x20000134

08001440 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a07      	ldr	r2, [pc, #28]	@ (800146c <vApplicationGetTimerTaskMemory+0x2c>)
 8001450:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <vApplicationGetTimerTaskMemory+0x30>)
 8001456:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000334 	.word	0x20000334
 8001470:	200003dc 	.word	0x200003dc

08001474 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f103 0208 	add.w	r2, r3, #8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f103 0208 	add.w	r2, r3, #8
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f103 0208 	add.w	r2, r3, #8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80014ca:	b480      	push	{r7}
 80014cc:	b085      	sub	sp, #20
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001526:	d103      	bne.n	8001530 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e00c      	b.n	800154a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3308      	adds	r3, #8
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e002      	b.n	800153e <vListInsert+0x2e>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	429a      	cmp	r2, r3
 8001548:	d2f6      	bcs.n	8001538 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6892      	ldr	r2, [r2, #8]
 8001596:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6852      	ldr	r2, [r2, #4]
 80015a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d103      	bne.n	80015b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1e5a      	subs	r2, r3, #1
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
	...

080015d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10b      	bne.n	8001600 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80015e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015ec:	f383 8811 	msr	BASEPRI, r3
 80015f0:	f3bf 8f6f 	isb	sy
 80015f4:	f3bf 8f4f 	dsb	sy
 80015f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001600:	f002 f85c 	bl	80036bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800160c:	68f9      	ldr	r1, [r7, #12]
 800160e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	441a      	add	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001630:	3b01      	subs	r3, #1
 8001632:	68f9      	ldr	r1, [r7, #12]
 8001634:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	441a      	add	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	22ff      	movs	r2, #255	@ 0xff
 8001644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	22ff      	movs	r2, #255	@ 0xff
 800164c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d114      	bne.n	8001680 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01a      	beq.n	8001694 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3310      	adds	r3, #16
 8001662:	4618      	mov	r0, r3
 8001664:	f001 f93c 	bl	80028e0 <xTaskRemoveFromEventList>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d012      	beq.n	8001694 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800166e:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <xQueueGenericReset+0xd0>)
 8001670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	f3bf 8f4f 	dsb	sy
 800167a:	f3bf 8f6f 	isb	sy
 800167e:	e009      	b.n	8001694 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3310      	adds	r3, #16
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fef5 	bl	8001474 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3324      	adds	r3, #36	@ 0x24
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fef0 	bl	8001474 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001694:	f002 f842 	bl	800371c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000ed04 	.word	0xe000ed04

080016a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	@ 0x38
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10b      	bne.n	80016d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80016bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016c0:	f383 8811 	msr	BASEPRI, r3
 80016c4:	f3bf 8f6f 	isb	sy
 80016c8:	f3bf 8f4f 	dsb	sy
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10b      	bne.n	80016f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80016da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016de:	f383 8811 	msr	BASEPRI, r3
 80016e2:	f3bf 8f6f 	isb	sy
 80016e6:	f3bf 8f4f 	dsb	sy
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	e7fd      	b.n	80016ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <xQueueGenericCreateStatic+0x56>
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <xQueueGenericCreateStatic+0x5a>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <xQueueGenericCreateStatic+0x5c>
 8001702:	2300      	movs	r3, #0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10b      	bne.n	8001720 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800170c:	f383 8811 	msr	BASEPRI, r3
 8001710:	f3bf 8f6f 	isb	sy
 8001714:	f3bf 8f4f 	dsb	sy
 8001718:	623b      	str	r3, [r7, #32]
}
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <xQueueGenericCreateStatic+0x84>
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <xQueueGenericCreateStatic+0x88>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <xQueueGenericCreateStatic+0x8a>
 8001730:	2300      	movs	r3, #0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10b      	bne.n	800174e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800173a:	f383 8811 	msr	BASEPRI, r3
 800173e:	f3bf 8f6f 	isb	sy
 8001742:	f3bf 8f4f 	dsb	sy
 8001746:	61fb      	str	r3, [r7, #28]
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	e7fd      	b.n	800174a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800174e:	2350      	movs	r3, #80	@ 0x50
 8001750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2b50      	cmp	r3, #80	@ 0x50
 8001756:	d00b      	beq.n	8001770 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800175c:	f383 8811 	msr	BASEPRI, r3
 8001760:	f3bf 8f6f 	isb	sy
 8001764:	f3bf 8f4f 	dsb	sy
 8001768:	61bb      	str	r3, [r7, #24]
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001770:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00d      	beq.n	8001798 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800177c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001784:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	4613      	mov	r3, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f805 	bl	80017a2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800179a:	4618      	mov	r0, r3
 800179c:	3730      	adds	r7, #48	@ 0x30
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e002      	b.n	80017c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80017d0:	2101      	movs	r1, #1
 80017d2:	69b8      	ldr	r0, [r7, #24]
 80017d4:	f7ff fefe 	bl	80015d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	@ 0x38
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80017f6:	2300      	movs	r3, #0
 80017f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80017fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10b      	bne.n	800181c <xQueueGenericSend+0x34>
	__asm volatile
 8001804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	f3bf 8f6f 	isb	sy
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <xQueueGenericSend+0x42>
 8001822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <xQueueGenericSend+0x46>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <xQueueGenericSend+0x48>
 800182e:	2300      	movs	r3, #0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10b      	bne.n	800184c <xQueueGenericSend+0x64>
	__asm volatile
 8001834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001838:	f383 8811 	msr	BASEPRI, r3
 800183c:	f3bf 8f6f 	isb	sy
 8001840:	f3bf 8f4f 	dsb	sy
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d103      	bne.n	800185a <xQueueGenericSend+0x72>
 8001852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <xQueueGenericSend+0x76>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <xQueueGenericSend+0x78>
 800185e:	2300      	movs	r3, #0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10b      	bne.n	800187c <xQueueGenericSend+0x94>
	__asm volatile
 8001864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001868:	f383 8811 	msr	BASEPRI, r3
 800186c:	f3bf 8f6f 	isb	sy
 8001870:	f3bf 8f4f 	dsb	sy
 8001874:	623b      	str	r3, [r7, #32]
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800187c:	f001 f9f6 	bl	8002c6c <xTaskGetSchedulerState>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <xQueueGenericSend+0xa4>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <xQueueGenericSend+0xa8>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <xQueueGenericSend+0xaa>
 8001890:	2300      	movs	r3, #0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10b      	bne.n	80018ae <xQueueGenericSend+0xc6>
	__asm volatile
 8001896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800189a:	f383 8811 	msr	BASEPRI, r3
 800189e:	f3bf 8f6f 	isb	sy
 80018a2:	f3bf 8f4f 	dsb	sy
 80018a6:	61fb      	str	r3, [r7, #28]
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	e7fd      	b.n	80018aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80018ae:	f001 ff05 	bl	80036bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80018b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d302      	bcc.n	80018c4 <xQueueGenericSend+0xdc>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d129      	bne.n	8001918 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018ca:	f000 fa0f 	bl	8001cec <prvCopyDataToQueue>
 80018ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d010      	beq.n	80018fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018da:	3324      	adds	r3, #36	@ 0x24
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 ffff 	bl	80028e0 <xTaskRemoveFromEventList>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80018e8:	4b3f      	ldr	r3, [pc, #252]	@ (80019e8 <xQueueGenericSend+0x200>)
 80018ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	f3bf 8f4f 	dsb	sy
 80018f4:	f3bf 8f6f 	isb	sy
 80018f8:	e00a      	b.n	8001910 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80018fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001900:	4b39      	ldr	r3, [pc, #228]	@ (80019e8 <xQueueGenericSend+0x200>)
 8001902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	f3bf 8f4f 	dsb	sy
 800190c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001910:	f001 ff04 	bl	800371c <vPortExitCritical>
				return pdPASS;
 8001914:	2301      	movs	r3, #1
 8001916:	e063      	b.n	80019e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d103      	bne.n	8001926 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800191e:	f001 fefd 	bl	800371c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001922:	2300      	movs	r3, #0
 8001924:	e05c      	b.n	80019e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001928:	2b00      	cmp	r3, #0
 800192a:	d106      	bne.n	800193a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4618      	mov	r0, r3
 8001932:	f001 f839 	bl	80029a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001936:	2301      	movs	r3, #1
 8001938:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800193a:	f001 feef 	bl	800371c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800193e:	f000 fda5 	bl	800248c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001942:	f001 febb 	bl	80036bc <vPortEnterCritical>
 8001946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001948:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800194c:	b25b      	sxtb	r3, r3
 800194e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001952:	d103      	bne.n	800195c <xQueueGenericSend+0x174>
 8001954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800195c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800195e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d103      	bne.n	8001972 <xQueueGenericSend+0x18a>
 800196a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001972:	f001 fed3 	bl	800371c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001976:	1d3a      	adds	r2, r7, #4
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f001 f828 	bl	80029d4 <xTaskCheckForTimeOut>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d124      	bne.n	80019d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800198a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800198c:	f000 faa6 	bl	8001edc <prvIsQueueFull>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d018      	beq.n	80019c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001998:	3310      	adds	r3, #16
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 ff4c 	bl	800283c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80019a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80019a6:	f000 fa31 	bl	8001e0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80019aa:	f000 fd7d 	bl	80024a8 <xTaskResumeAll>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f47f af7c 	bne.w	80018ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <xQueueGenericSend+0x200>)
 80019b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f3bf 8f4f 	dsb	sy
 80019c2:	f3bf 8f6f 	isb	sy
 80019c6:	e772      	b.n	80018ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80019c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80019ca:	f000 fa1f 	bl	8001e0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80019ce:	f000 fd6b 	bl	80024a8 <xTaskResumeAll>
 80019d2:	e76c      	b.n	80018ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80019d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80019d6:	f000 fa19 	bl	8001e0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80019da:	f000 fd65 	bl	80024a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80019de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3738      	adds	r7, #56	@ 0x38
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	e000ed04 	.word	0xe000ed04

080019ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b090      	sub	sp, #64	@ 0x40
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80019fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10b      	bne.n	8001a1c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a08:	f383 8811 	msr	BASEPRI, r3
 8001a0c:	f3bf 8f6f 	isb	sy
 8001a10:	f3bf 8f4f 	dsb	sy
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <xQueueGenericSendFromISR+0x3e>
 8001a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <xQueueGenericSendFromISR+0x42>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <xQueueGenericSendFromISR+0x44>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10b      	bne.n	8001a4c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a38:	f383 8811 	msr	BASEPRI, r3
 8001a3c:	f3bf 8f6f 	isb	sy
 8001a40:	f3bf 8f4f 	dsb	sy
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d103      	bne.n	8001a5a <xQueueGenericSendFromISR+0x6e>
 8001a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <xQueueGenericSendFromISR+0x72>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <xQueueGenericSendFromISR+0x74>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10b      	bne.n	8001a7c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a68:	f383 8811 	msr	BASEPRI, r3
 8001a6c:	f3bf 8f6f 	isb	sy
 8001a70:	f3bf 8f4f 	dsb	sy
 8001a74:	623b      	str	r3, [r7, #32]
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001a7c:	f001 fee0 	bl	8003840 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001a80:	f3ef 8211 	mrs	r2, BASEPRI
 8001a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a88:	f383 8811 	msr	BASEPRI, r3
 8001a8c:	f3bf 8f6f 	isb	sy
 8001a90:	f3bf 8f4f 	dsb	sy
 8001a94:	61fa      	str	r2, [r7, #28]
 8001a96:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001a98:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001a9a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d302      	bcc.n	8001aae <xQueueGenericSendFromISR+0xc2>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d12f      	bne.n	8001b0e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ab4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001ac4:	f000 f912 	bl	8001cec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001ac8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d112      	bne.n	8001af8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d016      	beq.n	8001b08 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001adc:	3324      	adds	r3, #36	@ 0x24
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fefe 	bl	80028e0 <xTaskRemoveFromEventList>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00e      	beq.n	8001b08 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e007      	b.n	8001b08 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001af8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	b25a      	sxtb	r2, r3
 8001b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8001b0c:	e001      	b.n	8001b12 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b14:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001b1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3740      	adds	r7, #64	@ 0x40
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	@ 0x30
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <xQueueReceive+0x32>
	__asm volatile
 8001b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b46:	f383 8811 	msr	BASEPRI, r3
 8001b4a:	f3bf 8f6f 	isb	sy
 8001b4e:	f3bf 8f4f 	dsb	sy
 8001b52:	623b      	str	r3, [r7, #32]
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	e7fd      	b.n	8001b56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <xQueueReceive+0x40>
 8001b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <xQueueReceive+0x44>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <xQueueReceive+0x46>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10b      	bne.n	8001b8a <xQueueReceive+0x62>
	__asm volatile
 8001b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b76:	f383 8811 	msr	BASEPRI, r3
 8001b7a:	f3bf 8f6f 	isb	sy
 8001b7e:	f3bf 8f4f 	dsb	sy
 8001b82:	61fb      	str	r3, [r7, #28]
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	e7fd      	b.n	8001b86 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b8a:	f001 f86f 	bl	8002c6c <xTaskGetSchedulerState>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <xQueueReceive+0x72>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <xQueueReceive+0x76>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <xQueueReceive+0x78>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10b      	bne.n	8001bbc <xQueueReceive+0x94>
	__asm volatile
 8001ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ba8:	f383 8811 	msr	BASEPRI, r3
 8001bac:	f3bf 8f6f 	isb	sy
 8001bb0:	f3bf 8f4f 	dsb	sy
 8001bb4:	61bb      	str	r3, [r7, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001bbc:	f001 fd7e 	bl	80036bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01f      	beq.n	8001c0c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bd0:	f000 f8f6 	bl	8001dc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	1e5a      	subs	r2, r3, #1
 8001bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bda:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00f      	beq.n	8001c04 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be6:	3310      	adds	r3, #16
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fe79 	bl	80028e0 <xTaskRemoveFromEventList>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce8 <xQueueReceive+0x1c0>)
 8001bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001c04:	f001 fd8a 	bl	800371c <vPortExitCritical>
				return pdPASS;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e069      	b.n	8001ce0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d103      	bne.n	8001c1a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c12:	f001 fd83 	bl	800371c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e062      	b.n	8001ce0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d106      	bne.n	8001c2e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 febf 	bl	80029a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c2e:	f001 fd75 	bl	800371c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c32:	f000 fc2b 	bl	800248c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c36:	f001 fd41 	bl	80036bc <vPortEnterCritical>
 8001c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c46:	d103      	bne.n	8001c50 <xQueueReceive+0x128>
 8001c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d103      	bne.n	8001c66 <xQueueReceive+0x13e>
 8001c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c66:	f001 fd59 	bl	800371c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c6a:	1d3a      	adds	r2, r7, #4
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 feae 	bl	80029d4 <xTaskCheckForTimeOut>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d123      	bne.n	8001cc6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c80:	f000 f916 	bl	8001eb0 <prvIsQueueEmpty>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d017      	beq.n	8001cba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8c:	3324      	adds	r3, #36	@ 0x24
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fdd2 	bl	800283c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c9a:	f000 f8b7 	bl	8001e0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c9e:	f000 fc03 	bl	80024a8 <xTaskResumeAll>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d189      	bne.n	8001bbc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <xQueueReceive+0x1c0>)
 8001caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	f3bf 8f6f 	isb	sy
 8001cb8:	e780      	b.n	8001bbc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001cba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001cbc:	f000 f8a6 	bl	8001e0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001cc0:	f000 fbf2 	bl	80024a8 <xTaskResumeAll>
 8001cc4:	e77a      	b.n	8001bbc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001cc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001cc8:	f000 f8a0 	bl	8001e0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ccc:	f000 fbec 	bl	80024a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001cd2:	f000 f8ed 	bl	8001eb0 <prvIsQueueEmpty>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f43f af6f 	beq.w	8001bbc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001cde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3730      	adds	r7, #48	@ 0x30
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	e000ed04 	.word	0xe000ed04

08001cec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d14d      	bne.n	8001dae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 ffc6 	bl	8002ca8 <xTaskPriorityDisinherit>
 8001d1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	e043      	b.n	8001dae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d119      	bne.n	8001d60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6858      	ldr	r0, [r3, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	461a      	mov	r2, r3
 8001d36:	68b9      	ldr	r1, [r7, #8]
 8001d38:	f002 f83a 	bl	8003db0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	441a      	add	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d32b      	bcc.n	8001dae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	e026      	b.n	8001dae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	68d8      	ldr	r0, [r3, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	f002 f820 	bl	8003db0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	425b      	negs	r3, r3
 8001d7a:	441a      	add	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	425b      	negs	r3, r3
 8001d96:	441a      	add	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d105      	bne.n	8001dae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001db6:	697b      	ldr	r3, [r7, #20]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d018      	beq.n	8001e04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	441a      	add	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d303      	bcc.n	8001df4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68d9      	ldr	r1, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6838      	ldr	r0, [r7, #0]
 8001e00:	f001 ffd6 	bl	8003db0 <memcpy>
	}
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001e14:	f001 fc52 	bl	80036bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e20:	e011      	b.n	8001e46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3324      	adds	r3, #36	@ 0x24
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fd56 	bl	80028e0 <xTaskRemoveFromEventList>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001e3a:	f000 fe2f 	bl	8002a9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	dce9      	bgt.n	8001e22 <prvUnlockQueue+0x16>
 8001e4e:	e000      	b.n	8001e52 <prvUnlockQueue+0x46>
					break;
 8001e50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	22ff      	movs	r2, #255	@ 0xff
 8001e56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8001e5a:	f001 fc5f 	bl	800371c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001e5e:	f001 fc2d 	bl	80036bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e6a:	e011      	b.n	8001e90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d012      	beq.n	8001e9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3310      	adds	r3, #16
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fd31 	bl	80028e0 <xTaskRemoveFromEventList>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001e84:	f000 fe0a 	bl	8002a9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	dce9      	bgt.n	8001e6c <prvUnlockQueue+0x60>
 8001e98:	e000      	b.n	8001e9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001e9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	22ff      	movs	r2, #255	@ 0xff
 8001ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8001ea4:	f001 fc3a 	bl	800371c <vPortExitCritical>
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001eb8:	f001 fc00 	bl	80036bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e001      	b.n	8001ece <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001ece:	f001 fc25 	bl	800371c <vPortExitCritical>

	return xReturn;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001ee4:	f001 fbea 	bl	80036bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d102      	bne.n	8001efa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	e001      	b.n	8001efe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001efe:	f001 fc0d 	bl	800371c <vPortExitCritical>

	return xReturn;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e014      	b.n	8001f46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f58 <vQueueAddToRegistry+0x4c>)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10b      	bne.n	8001f40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001f28:	490b      	ldr	r1, [pc, #44]	@ (8001f58 <vQueueAddToRegistry+0x4c>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001f32:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <vQueueAddToRegistry+0x4c>)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001f3e:	e006      	b.n	8001f4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3301      	adds	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b07      	cmp	r3, #7
 8001f4a:	d9e7      	bls.n	8001f1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	200007dc 	.word	0x200007dc

08001f5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001f6c:	f001 fba6 	bl	80036bc <vPortEnterCritical>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d103      	bne.n	8001f86 <vQueueWaitForMessageRestricted+0x2a>
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f92:	d103      	bne.n	8001f9c <vQueueWaitForMessageRestricted+0x40>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f9c:	f001 fbbe 	bl	800371c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d106      	bne.n	8001fb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3324      	adds	r3, #36	@ 0x24
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fc69 	bl	8002888 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7ff ff28 	bl	8001e0c <prvUnlockQueue>
	}
 8001fbc:	bf00      	nop
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08e      	sub	sp, #56	@ 0x38
 8001fc8:	af04      	add	r7, sp, #16
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10b      	bne.n	8001ff0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8001fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fdc:	f383 8811 	msr	BASEPRI, r3
 8001fe0:	f3bf 8f6f 	isb	sy
 8001fe4:	f3bf 8f4f 	dsb	sy
 8001fe8:	623b      	str	r3, [r7, #32]
}
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10b      	bne.n	800200e <xTaskCreateStatic+0x4a>
	__asm volatile
 8001ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ffa:	f383 8811 	msr	BASEPRI, r3
 8001ffe:	f3bf 8f6f 	isb	sy
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	61fb      	str	r3, [r7, #28]
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	e7fd      	b.n	800200a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800200e:	23a8      	movs	r3, #168	@ 0xa8
 8002010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2ba8      	cmp	r3, #168	@ 0xa8
 8002016:	d00b      	beq.n	8002030 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800201c:	f383 8811 	msr	BASEPRI, r3
 8002020:	f3bf 8f6f 	isb	sy
 8002024:	f3bf 8f4f 	dsb	sy
 8002028:	61bb      	str	r3, [r7, #24]
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002030:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01e      	beq.n	8002076 <xTaskCreateStatic+0xb2>
 8002038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01b      	beq.n	8002076 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800203e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002046:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	2202      	movs	r2, #2
 800204c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002050:	2300      	movs	r3, #0
 8002052:	9303      	str	r3, [sp, #12]
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	9302      	str	r3, [sp, #8]
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f851 	bl	8002110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800206e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002070:	f000 f8f6 	bl	8002260 <prvAddNewTaskToReadyList>
 8002074:	e001      	b.n	800207a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800207a:	697b      	ldr	r3, [r7, #20]
	}
 800207c:	4618      	mov	r0, r3
 800207e:	3728      	adds	r7, #40	@ 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	@ 0x30
 8002088:	af04      	add	r7, sp, #16
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4618      	mov	r0, r3
 800209a:	f001 fc11 	bl	80038c0 <pvPortMalloc>
 800209e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00e      	beq.n	80020c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80020a6:	20a8      	movs	r0, #168	@ 0xa8
 80020a8:	f001 fc0a 	bl	80038c0 <pvPortMalloc>
 80020ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80020ba:	e005      	b.n	80020c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80020bc:	6978      	ldr	r0, [r7, #20]
 80020be:	f001 fccd 	bl	8003a5c <vPortFree>
 80020c2:	e001      	b.n	80020c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d017      	beq.n	80020fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020d6:	88fa      	ldrh	r2, [r7, #6]
 80020d8:	2300      	movs	r3, #0
 80020da:	9303      	str	r3, [sp, #12]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	9302      	str	r3, [sp, #8]
 80020e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f80f 	bl	8002110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020f2:	69f8      	ldr	r0, [r7, #28]
 80020f4:	f000 f8b4 	bl	8002260 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80020f8:	2301      	movs	r3, #1
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	e002      	b.n	8002104 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002104:	69bb      	ldr	r3, [r7, #24]
	}
 8002106:	4618      	mov	r0, r3
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800211e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002120:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	461a      	mov	r2, r3
 8002128:	21a5      	movs	r1, #165	@ 0xa5
 800212a:	f001 fdb5 	bl	8003c98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800212e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002138:	3b01      	subs	r3, #1
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f023 0307 	bic.w	r3, r3, #7
 8002146:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	617b      	str	r3, [r7, #20]
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	e7fd      	b.n	8002166 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01f      	beq.n	80021b0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	e012      	b.n	800219c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	7819      	ldrb	r1, [r3, #0]
 800217e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	3334      	adds	r3, #52	@ 0x34
 8002186:	460a      	mov	r2, r1
 8002188:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3301      	adds	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	2b0f      	cmp	r3, #15
 80021a0:	d9e9      	bls.n	8002176 <prvInitialiseNewTask+0x66>
 80021a2:	e000      	b.n	80021a6 <prvInitialiseNewTask+0x96>
			{
				break;
 80021a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021ae:	e003      	b.n	80021b8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ba:	2b37      	cmp	r3, #55	@ 0x37
 80021bc:	d901      	bls.n	80021c2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021be:	2337      	movs	r3, #55	@ 0x37
 80021c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80021c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80021c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80021ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d0:	2200      	movs	r2, #0
 80021d2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d6:	3304      	adds	r3, #4
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f96a 	bl	80014b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e0:	3318      	adds	r3, #24
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f965 	bl	80014b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80021f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80021fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002200:	2200      	movs	r2, #0
 8002202:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002208:	2200      	movs	r2, #0
 800220a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800220e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002210:	3354      	adds	r3, #84	@ 0x54
 8002212:	224c      	movs	r2, #76	@ 0x4c
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f001 fd3e 	bl	8003c98 <memset>
 800221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221e:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <prvInitialiseNewTask+0x144>)
 8002220:	659a      	str	r2, [r3, #88]	@ 0x58
 8002222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002224:	4a0c      	ldr	r2, [pc, #48]	@ (8002258 <prvInitialiseNewTask+0x148>)
 8002226:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222a:	4a0c      	ldr	r2, [pc, #48]	@ (800225c <prvInitialiseNewTask+0x14c>)
 800222c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	68f9      	ldr	r1, [r7, #12]
 8002232:	69b8      	ldr	r0, [r7, #24]
 8002234:	f001 f954 	bl	80034e0 <pxPortInitialiseStack>
 8002238:	4602      	mov	r2, r0
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800223e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800224a:	bf00      	nop
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20001a70 	.word	0x20001a70
 8002258:	20001ad8 	.word	0x20001ad8
 800225c:	20001b40 	.word	0x20001b40

08002260 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002268:	f001 fa28 	bl	80036bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800226c:	4b2d      	ldr	r3, [pc, #180]	@ (8002324 <prvAddNewTaskToReadyList+0xc4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	4a2c      	ldr	r2, [pc, #176]	@ (8002324 <prvAddNewTaskToReadyList+0xc4>)
 8002274:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002276:	4b2c      	ldr	r3, [pc, #176]	@ (8002328 <prvAddNewTaskToReadyList+0xc8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800227e:	4a2a      	ldr	r2, [pc, #168]	@ (8002328 <prvAddNewTaskToReadyList+0xc8>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002284:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <prvAddNewTaskToReadyList+0xc4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d110      	bne.n	80022ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800228c:	f000 fc2a 	bl	8002ae4 <prvInitialiseTaskLists>
 8002290:	e00d      	b.n	80022ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002292:	4b26      	ldr	r3, [pc, #152]	@ (800232c <prvAddNewTaskToReadyList+0xcc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800229a:	4b23      	ldr	r3, [pc, #140]	@ (8002328 <prvAddNewTaskToReadyList+0xc8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d802      	bhi.n	80022ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80022a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002328 <prvAddNewTaskToReadyList+0xc8>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80022ae:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <prvAddNewTaskToReadyList+0xd0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3301      	adds	r3, #1
 80022b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002330 <prvAddNewTaskToReadyList+0xd0>)
 80022b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80022b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <prvAddNewTaskToReadyList+0xd0>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002334 <prvAddNewTaskToReadyList+0xd4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d903      	bls.n	80022d4 <prvAddNewTaskToReadyList+0x74>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d0:	4a18      	ldr	r2, [pc, #96]	@ (8002334 <prvAddNewTaskToReadyList+0xd4>)
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4a15      	ldr	r2, [pc, #84]	@ (8002338 <prvAddNewTaskToReadyList+0xd8>)
 80022e2:	441a      	add	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3304      	adds	r3, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	4610      	mov	r0, r2
 80022ec:	f7ff f8ed 	bl	80014ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80022f0:	f001 fa14 	bl	800371c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80022f4:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <prvAddNewTaskToReadyList+0xcc>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00e      	beq.n	800231a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80022fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <prvAddNewTaskToReadyList+0xc8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	429a      	cmp	r2, r3
 8002308:	d207      	bcs.n	800231a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <prvAddNewTaskToReadyList+0xdc>)
 800230c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000cf0 	.word	0x20000cf0
 8002328:	2000081c 	.word	0x2000081c
 800232c:	20000cfc 	.word	0x20000cfc
 8002330:	20000d0c 	.word	0x20000d0c
 8002334:	20000cf8 	.word	0x20000cf8
 8002338:	20000820 	.word	0x20000820
 800233c:	e000ed04 	.word	0xe000ed04

08002340 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d018      	beq.n	8002384 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002352:	4b14      	ldr	r3, [pc, #80]	@ (80023a4 <vTaskDelay+0x64>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <vTaskDelay+0x32>
	__asm volatile
 800235a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800235e:	f383 8811 	msr	BASEPRI, r3
 8002362:	f3bf 8f6f 	isb	sy
 8002366:	f3bf 8f4f 	dsb	sy
 800236a:	60bb      	str	r3, [r7, #8]
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	e7fd      	b.n	800236e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002372:	f000 f88b 	bl	800248c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002376:	2100      	movs	r1, #0
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fd05 	bl	8002d88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800237e:	f000 f893 	bl	80024a8 <xTaskResumeAll>
 8002382:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d107      	bne.n	800239a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800238a:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <vTaskDelay+0x68>)
 800238c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000d18 	.word	0x20000d18
 80023a8:	e000ed04 	.word	0xe000ed04

080023ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80023ba:	463a      	mov	r2, r7
 80023bc:	1d39      	adds	r1, r7, #4
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f824 	bl	8001410 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80023c8:	6839      	ldr	r1, [r7, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	9202      	str	r2, [sp, #8]
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	2300      	movs	r3, #0
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	2300      	movs	r3, #0
 80023d8:	460a      	mov	r2, r1
 80023da:	4924      	ldr	r1, [pc, #144]	@ (800246c <vTaskStartScheduler+0xc0>)
 80023dc:	4824      	ldr	r0, [pc, #144]	@ (8002470 <vTaskStartScheduler+0xc4>)
 80023de:	f7ff fdf1 	bl	8001fc4 <xTaskCreateStatic>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a23      	ldr	r2, [pc, #140]	@ (8002474 <vTaskStartScheduler+0xc8>)
 80023e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80023e8:	4b22      	ldr	r3, [pc, #136]	@ (8002474 <vTaskStartScheduler+0xc8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80023f0:	2301      	movs	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e001      	b.n	80023fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d102      	bne.n	8002406 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002400:	f000 fd16 	bl	8002e30 <xTimerCreateTimerTask>
 8002404:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d11b      	bne.n	8002444 <vTaskStartScheduler+0x98>
	__asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	613b      	str	r3, [r7, #16]
}
 800241e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002420:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <vTaskStartScheduler+0xcc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3354      	adds	r3, #84	@ 0x54
 8002426:	4a15      	ldr	r2, [pc, #84]	@ (800247c <vTaskStartScheduler+0xd0>)
 8002428:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800242a:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <vTaskStartScheduler+0xd4>)
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002432:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <vTaskStartScheduler+0xd8>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002438:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <vTaskStartScheduler+0xdc>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800243e:	f001 f8cb 	bl	80035d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002442:	e00f      	b.n	8002464 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244a:	d10b      	bne.n	8002464 <vTaskStartScheduler+0xb8>
	__asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	60fb      	str	r3, [r7, #12]
}
 800245e:	bf00      	nop
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <vTaskStartScheduler+0xb4>
}
 8002464:	bf00      	nop
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	08003ea0 	.word	0x08003ea0
 8002470:	08002ab5 	.word	0x08002ab5
 8002474:	20000d14 	.word	0x20000d14
 8002478:	2000081c 	.word	0x2000081c
 800247c:	20000010 	.word	0x20000010
 8002480:	20000d10 	.word	0x20000d10
 8002484:	20000cfc 	.word	0x20000cfc
 8002488:	20000cf4 	.word	0x20000cf4

0800248c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002490:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <vTaskSuspendAll+0x18>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	4a03      	ldr	r2, [pc, #12]	@ (80024a4 <vTaskSuspendAll+0x18>)
 8002498:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000d18 	.word	0x20000d18

080024a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80024b6:	4b42      	ldr	r3, [pc, #264]	@ (80025c0 <xTaskResumeAll+0x118>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10b      	bne.n	80024d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80024be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	603b      	str	r3, [r7, #0]
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	e7fd      	b.n	80024d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80024d6:	f001 f8f1 	bl	80036bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80024da:	4b39      	ldr	r3, [pc, #228]	@ (80025c0 <xTaskResumeAll+0x118>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3b01      	subs	r3, #1
 80024e0:	4a37      	ldr	r2, [pc, #220]	@ (80025c0 <xTaskResumeAll+0x118>)
 80024e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024e4:	4b36      	ldr	r3, [pc, #216]	@ (80025c0 <xTaskResumeAll+0x118>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d162      	bne.n	80025b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024ec:	4b35      	ldr	r3, [pc, #212]	@ (80025c4 <xTaskResumeAll+0x11c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d05e      	beq.n	80025b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024f4:	e02f      	b.n	8002556 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024f6:	4b34      	ldr	r3, [pc, #208]	@ (80025c8 <xTaskResumeAll+0x120>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3318      	adds	r3, #24
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f83c 	bl	8001580 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3304      	adds	r3, #4
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f837 	bl	8001580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002516:	4b2d      	ldr	r3, [pc, #180]	@ (80025cc <xTaskResumeAll+0x124>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d903      	bls.n	8002526 <xTaskResumeAll+0x7e>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002522:	4a2a      	ldr	r2, [pc, #168]	@ (80025cc <xTaskResumeAll+0x124>)
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4a27      	ldr	r2, [pc, #156]	@ (80025d0 <xTaskResumeAll+0x128>)
 8002534:	441a      	add	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3304      	adds	r3, #4
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f7fe ffc4 	bl	80014ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002546:	4b23      	ldr	r3, [pc, #140]	@ (80025d4 <xTaskResumeAll+0x12c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	429a      	cmp	r2, r3
 800254e:	d302      	bcc.n	8002556 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002550:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <xTaskResumeAll+0x130>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002556:	4b1c      	ldr	r3, [pc, #112]	@ (80025c8 <xTaskResumeAll+0x120>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1cb      	bne.n	80024f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002564:	f000 fb62 	bl	8002c2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002568:	4b1c      	ldr	r3, [pc, #112]	@ (80025dc <xTaskResumeAll+0x134>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d010      	beq.n	8002596 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002574:	f000 f844 	bl	8002600 <xTaskIncrementTick>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800257e:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <xTaskResumeAll+0x130>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f1      	bne.n	8002574 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002590:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <xTaskResumeAll+0x134>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <xTaskResumeAll+0x130>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800259e:	2301      	movs	r3, #1
 80025a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80025a2:	4b0f      	ldr	r3, [pc, #60]	@ (80025e0 <xTaskResumeAll+0x138>)
 80025a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80025b2:	f001 f8b3 	bl	800371c <vPortExitCritical>

	return xAlreadyYielded;
 80025b6:	68bb      	ldr	r3, [r7, #8]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000d18 	.word	0x20000d18
 80025c4:	20000cf0 	.word	0x20000cf0
 80025c8:	20000cb0 	.word	0x20000cb0
 80025cc:	20000cf8 	.word	0x20000cf8
 80025d0:	20000820 	.word	0x20000820
 80025d4:	2000081c 	.word	0x2000081c
 80025d8:	20000d04 	.word	0x20000d04
 80025dc:	20000d00 	.word	0x20000d00
 80025e0:	e000ed04 	.word	0xe000ed04

080025e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80025ea:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <xTaskGetTickCount+0x18>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80025f0:	687b      	ldr	r3, [r7, #4]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	20000cf4 	.word	0x20000cf4

08002600 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800260a:	4b4f      	ldr	r3, [pc, #316]	@ (8002748 <xTaskIncrementTick+0x148>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 8090 	bne.w	8002734 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002614:	4b4d      	ldr	r3, [pc, #308]	@ (800274c <xTaskIncrementTick+0x14c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800261c:	4a4b      	ldr	r2, [pc, #300]	@ (800274c <xTaskIncrementTick+0x14c>)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d121      	bne.n	800266c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002628:	4b49      	ldr	r3, [pc, #292]	@ (8002750 <xTaskIncrementTick+0x150>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <xTaskIncrementTick+0x4a>
	__asm volatile
 8002632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	603b      	str	r3, [r7, #0]
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	e7fd      	b.n	8002646 <xTaskIncrementTick+0x46>
 800264a:	4b41      	ldr	r3, [pc, #260]	@ (8002750 <xTaskIncrementTick+0x150>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	4b40      	ldr	r3, [pc, #256]	@ (8002754 <xTaskIncrementTick+0x154>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a3e      	ldr	r2, [pc, #248]	@ (8002750 <xTaskIncrementTick+0x150>)
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4a3e      	ldr	r2, [pc, #248]	@ (8002754 <xTaskIncrementTick+0x154>)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b3e      	ldr	r3, [pc, #248]	@ (8002758 <xTaskIncrementTick+0x158>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	4a3c      	ldr	r2, [pc, #240]	@ (8002758 <xTaskIncrementTick+0x158>)
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	f000 fae0 	bl	8002c2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800266c:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <xTaskIncrementTick+0x15c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	429a      	cmp	r2, r3
 8002674:	d349      	bcc.n	800270a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002676:	4b36      	ldr	r3, [pc, #216]	@ (8002750 <xTaskIncrementTick+0x150>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d104      	bne.n	800268a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002680:	4b36      	ldr	r3, [pc, #216]	@ (800275c <xTaskIncrementTick+0x15c>)
 8002682:	f04f 32ff 	mov.w	r2, #4294967295
 8002686:	601a      	str	r2, [r3, #0]
					break;
 8002688:	e03f      	b.n	800270a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800268a:	4b31      	ldr	r3, [pc, #196]	@ (8002750 <xTaskIncrementTick+0x150>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d203      	bcs.n	80026aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80026a2:	4a2e      	ldr	r2, [pc, #184]	@ (800275c <xTaskIncrementTick+0x15c>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026a8:	e02f      	b.n	800270a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3304      	adds	r3, #4
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe ff66 	bl	8001580 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d004      	beq.n	80026c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	3318      	adds	r3, #24
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe ff5d 	bl	8001580 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ca:	4b25      	ldr	r3, [pc, #148]	@ (8002760 <xTaskIncrementTick+0x160>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d903      	bls.n	80026da <xTaskIncrementTick+0xda>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d6:	4a22      	ldr	r2, [pc, #136]	@ (8002760 <xTaskIncrementTick+0x160>)
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002764 <xTaskIncrementTick+0x164>)
 80026e8:	441a      	add	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3304      	adds	r3, #4
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f7fe feea 	bl	80014ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <xTaskIncrementTick+0x168>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	429a      	cmp	r2, r3
 8002702:	d3b8      	bcc.n	8002676 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002704:	2301      	movs	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002708:	e7b5      	b.n	8002676 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800270a:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <xTaskIncrementTick+0x168>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002710:	4914      	ldr	r1, [pc, #80]	@ (8002764 <xTaskIncrementTick+0x164>)
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d901      	bls.n	8002726 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002726:	4b11      	ldr	r3, [pc, #68]	@ (800276c <xTaskIncrementTick+0x16c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800272e:	2301      	movs	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e004      	b.n	800273e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002734:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <xTaskIncrementTick+0x170>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	4a0d      	ldr	r2, [pc, #52]	@ (8002770 <xTaskIncrementTick+0x170>)
 800273c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800273e:	697b      	ldr	r3, [r7, #20]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000d18 	.word	0x20000d18
 800274c:	20000cf4 	.word	0x20000cf4
 8002750:	20000ca8 	.word	0x20000ca8
 8002754:	20000cac 	.word	0x20000cac
 8002758:	20000d08 	.word	0x20000d08
 800275c:	20000d10 	.word	0x20000d10
 8002760:	20000cf8 	.word	0x20000cf8
 8002764:	20000820 	.word	0x20000820
 8002768:	2000081c 	.word	0x2000081c
 800276c:	20000d04 	.word	0x20000d04
 8002770:	20000d00 	.word	0x20000d00

08002774 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800277a:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <vTaskSwitchContext+0xb0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002782:	4b29      	ldr	r3, [pc, #164]	@ (8002828 <vTaskSwitchContext+0xb4>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002788:	e047      	b.n	800281a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800278a:	4b27      	ldr	r3, [pc, #156]	@ (8002828 <vTaskSwitchContext+0xb4>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002790:	4b26      	ldr	r3, [pc, #152]	@ (800282c <vTaskSwitchContext+0xb8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	e011      	b.n	80027bc <vTaskSwitchContext+0x48>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	607b      	str	r3, [r7, #4]
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	e7fd      	b.n	80027b2 <vTaskSwitchContext+0x3e>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	491c      	ldr	r1, [pc, #112]	@ (8002830 <vTaskSwitchContext+0xbc>)
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0e3      	beq.n	8002798 <vTaskSwitchContext+0x24>
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4a15      	ldr	r2, [pc, #84]	@ (8002830 <vTaskSwitchContext+0xbc>)
 80027dc:	4413      	add	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3308      	adds	r3, #8
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d104      	bne.n	8002800 <vTaskSwitchContext+0x8c>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	4a0b      	ldr	r2, [pc, #44]	@ (8002834 <vTaskSwitchContext+0xc0>)
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4a08      	ldr	r2, [pc, #32]	@ (800282c <vTaskSwitchContext+0xb8>)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002810:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <vTaskSwitchContext+0xc0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3354      	adds	r3, #84	@ 0x54
 8002816:	4a08      	ldr	r2, [pc, #32]	@ (8002838 <vTaskSwitchContext+0xc4>)
 8002818:	6013      	str	r3, [r2, #0]
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	20000d18 	.word	0x20000d18
 8002828:	20000d04 	.word	0x20000d04
 800282c:	20000cf8 	.word	0x20000cf8
 8002830:	20000820 	.word	0x20000820
 8002834:	2000081c 	.word	0x2000081c
 8002838:	20000010 	.word	0x20000010

0800283c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	60fb      	str	r3, [r7, #12]
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002864:	4b07      	ldr	r3, [pc, #28]	@ (8002884 <vTaskPlaceOnEventList+0x48>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3318      	adds	r3, #24
 800286a:	4619      	mov	r1, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7fe fe4f 	bl	8001510 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002872:	2101      	movs	r1, #1
 8002874:	6838      	ldr	r0, [r7, #0]
 8002876:	f000 fa87 	bl	8002d88 <prvAddCurrentTaskToDelayedList>
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000081c 	.word	0x2000081c

08002888 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10b      	bne.n	80028b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800289a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	617b      	str	r3, [r7, #20]
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	e7fd      	b.n	80028ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028b2:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <vTaskPlaceOnEventListRestricted+0x54>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3318      	adds	r3, #24
 80028b8:	4619      	mov	r1, r3
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f7fe fe05 	bl	80014ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	68b8      	ldr	r0, [r7, #8]
 80028d0:	f000 fa5a 	bl	8002d88 <prvAddCurrentTaskToDelayedList>
	}
 80028d4:	bf00      	nop
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	2000081c 	.word	0x2000081c

080028e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10b      	bne.n	800290e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	60fb      	str	r3, [r7, #12]
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	e7fd      	b.n	800290a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	3318      	adds	r3, #24
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fe34 	bl	8001580 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002918:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <xTaskRemoveFromEventList+0xb0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d11d      	bne.n	800295c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	3304      	adds	r3, #4
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fe2b 	bl	8001580 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800292e:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <xTaskRemoveFromEventList+0xb4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d903      	bls.n	800293e <xTaskRemoveFromEventList+0x5e>
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	4a16      	ldr	r2, [pc, #88]	@ (8002994 <xTaskRemoveFromEventList+0xb4>)
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4a13      	ldr	r2, [pc, #76]	@ (8002998 <xTaskRemoveFromEventList+0xb8>)
 800294c:	441a      	add	r2, r3
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	3304      	adds	r3, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f7fe fdb8 	bl	80014ca <vListInsertEnd>
 800295a:	e005      	b.n	8002968 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	3318      	adds	r3, #24
 8002960:	4619      	mov	r1, r3
 8002962:	480e      	ldr	r0, [pc, #56]	@ (800299c <xTaskRemoveFromEventList+0xbc>)
 8002964:	f7fe fdb1 	bl	80014ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <xTaskRemoveFromEventList+0xc0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	429a      	cmp	r2, r3
 8002974:	d905      	bls.n	8002982 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002976:	2301      	movs	r3, #1
 8002978:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800297a:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <xTaskRemoveFromEventList+0xc4>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e001      	b.n	8002986 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002986:	697b      	ldr	r3, [r7, #20]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000d18 	.word	0x20000d18
 8002994:	20000cf8 	.word	0x20000cf8
 8002998:	20000820 	.word	0x20000820
 800299c:	20000cb0 	.word	0x20000cb0
 80029a0:	2000081c 	.word	0x2000081c
 80029a4:	20000d04 	.word	0x20000d04

080029a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80029b0:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <vTaskInternalSetTimeOutState+0x24>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80029b8:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <vTaskInternalSetTimeOutState+0x28>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	605a      	str	r2, [r3, #4]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000d08 	.word	0x20000d08
 80029d0:	20000cf4 	.word	0x20000cf4

080029d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	613b      	str	r3, [r7, #16]
}
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10b      	bne.n	8002a1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	60fb      	str	r3, [r7, #12]
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	e7fd      	b.n	8002a16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002a1a:	f000 fe4f 	bl	80036bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <xTaskCheckForTimeOut+0xc0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a36:	d102      	bne.n	8002a3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	e023      	b.n	8002a86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <xTaskCheckForTimeOut+0xc4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d007      	beq.n	8002a5a <xTaskCheckForTimeOut+0x86>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d302      	bcc.n	8002a5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002a54:	2301      	movs	r3, #1
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	e015      	b.n	8002a86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d20b      	bcs.n	8002a7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	1ad2      	subs	r2, r2, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff99 	bl	80029a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	e004      	b.n	8002a86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002a86:	f000 fe49 	bl	800371c <vPortExitCritical>

	return xReturn;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000cf4 	.word	0x20000cf4
 8002a98:	20000d08 	.word	0x20000d08

08002a9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <vTaskMissedYield+0x14>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000d04 	.word	0x20000d04

08002ab4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002abc:	f000 f852 	bl	8002b64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <prvIdleTask+0x28>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d9f9      	bls.n	8002abc <prvIdleTask+0x8>
			{
				taskYIELD();
 8002ac8:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <prvIdleTask+0x2c>)
 8002aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ad8:	e7f0      	b.n	8002abc <prvIdleTask+0x8>
 8002ada:	bf00      	nop
 8002adc:	20000820 	.word	0x20000820
 8002ae0:	e000ed04 	.word	0xe000ed04

08002ae4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	e00c      	b.n	8002b0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <prvInitialiseTaskLists+0x60>)
 8002afc:	4413      	add	r3, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fcb8 	bl	8001474 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3301      	adds	r3, #1
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b37      	cmp	r3, #55	@ 0x37
 8002b0e:	d9ef      	bls.n	8002af0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b10:	480d      	ldr	r0, [pc, #52]	@ (8002b48 <prvInitialiseTaskLists+0x64>)
 8002b12:	f7fe fcaf 	bl	8001474 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b16:	480d      	ldr	r0, [pc, #52]	@ (8002b4c <prvInitialiseTaskLists+0x68>)
 8002b18:	f7fe fcac 	bl	8001474 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b1c:	480c      	ldr	r0, [pc, #48]	@ (8002b50 <prvInitialiseTaskLists+0x6c>)
 8002b1e:	f7fe fca9 	bl	8001474 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b22:	480c      	ldr	r0, [pc, #48]	@ (8002b54 <prvInitialiseTaskLists+0x70>)
 8002b24:	f7fe fca6 	bl	8001474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b28:	480b      	ldr	r0, [pc, #44]	@ (8002b58 <prvInitialiseTaskLists+0x74>)
 8002b2a:	f7fe fca3 	bl	8001474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <prvInitialiseTaskLists+0x78>)
 8002b30:	4a05      	ldr	r2, [pc, #20]	@ (8002b48 <prvInitialiseTaskLists+0x64>)
 8002b32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b34:	4b0a      	ldr	r3, [pc, #40]	@ (8002b60 <prvInitialiseTaskLists+0x7c>)
 8002b36:	4a05      	ldr	r2, [pc, #20]	@ (8002b4c <prvInitialiseTaskLists+0x68>)
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000820 	.word	0x20000820
 8002b48:	20000c80 	.word	0x20000c80
 8002b4c:	20000c94 	.word	0x20000c94
 8002b50:	20000cb0 	.word	0x20000cb0
 8002b54:	20000cc4 	.word	0x20000cc4
 8002b58:	20000cdc 	.word	0x20000cdc
 8002b5c:	20000ca8 	.word	0x20000ca8
 8002b60:	20000cac 	.word	0x20000cac

08002b64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b6a:	e019      	b.n	8002ba0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002b6c:	f000 fda6 	bl	80036bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b70:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <prvCheckTasksWaitingTermination+0x50>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe fcff 	bl	8001580 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b82:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <prvCheckTasksWaitingTermination+0x54>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb8 <prvCheckTasksWaitingTermination+0x54>)
 8002b8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <prvCheckTasksWaitingTermination+0x58>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <prvCheckTasksWaitingTermination+0x58>)
 8002b94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b96:	f000 fdc1 	bl	800371c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f810 	bl	8002bc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <prvCheckTasksWaitingTermination+0x58>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e1      	bne.n	8002b6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000cc4 	.word	0x20000cc4
 8002bb8:	20000cf0 	.word	0x20000cf0
 8002bbc:	20000cd8 	.word	0x20000cd8

08002bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3354      	adds	r3, #84	@ 0x54
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 f86b 	bl	8003ca8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d108      	bne.n	8002bee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 ff3b 	bl	8003a5c <vPortFree>
				vPortFree( pxTCB );
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 ff38 	bl	8003a5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002bec:	e019      	b.n	8002c22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d103      	bne.n	8002c00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 ff2f 	bl	8003a5c <vPortFree>
	}
 8002bfe:	e010      	b.n	8002c22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d00b      	beq.n	8002c22 <prvDeleteTCB+0x62>
	__asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	60fb      	str	r3, [r7, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	e7fd      	b.n	8002c1e <prvDeleteTCB+0x5e>
	}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c32:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <prvResetNextTaskUnblockTime+0x38>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <prvResetNextTaskUnblockTime+0x3c>)
 8002c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c44:	e008      	b.n	8002c58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c46:	4b07      	ldr	r3, [pc, #28]	@ (8002c64 <prvResetNextTaskUnblockTime+0x38>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a04      	ldr	r2, [pc, #16]	@ (8002c68 <prvResetNextTaskUnblockTime+0x3c>)
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000ca8 	.word	0x20000ca8
 8002c68:	20000d10 	.word	0x20000d10

08002c6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002c72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <xTaskGetSchedulerState+0x34>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	e008      	b.n	8002c92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c80:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <xTaskGetSchedulerState+0x38>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	e001      	b.n	8002c92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002c92:	687b      	ldr	r3, [r7, #4]
	}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000cfc 	.word	0x20000cfc
 8002ca4:	20000d18 	.word	0x20000d18

08002ca8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d058      	beq.n	8002d70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8002d7c <xTaskPriorityDisinherit+0xd4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d00b      	beq.n	8002ce0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	60fb      	str	r3, [r7, #12]
}
 8002cda:	bf00      	nop
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10b      	bne.n	8002d00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	60bb      	str	r3, [r7, #8]
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d04:	1e5a      	subs	r2, r3, #1
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d02c      	beq.n	8002d70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d128      	bne.n	8002d70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	3304      	adds	r3, #4
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fc2c 	bl	8001580 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <xTaskPriorityDisinherit+0xd8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d903      	bls.n	8002d50 <xTaskPriorityDisinherit+0xa8>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d80 <xTaskPriorityDisinherit+0xd8>)
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4a09      	ldr	r2, [pc, #36]	@ (8002d84 <xTaskPriorityDisinherit+0xdc>)
 8002d5e:	441a      	add	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	3304      	adds	r3, #4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f7fe fbaf 	bl	80014ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002d70:	697b      	ldr	r3, [r7, #20]
	}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2000081c 	.word	0x2000081c
 8002d80:	20000cf8 	.word	0x20000cf8
 8002d84:	20000820 	.word	0x20000820

08002d88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d92:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <prvAddCurrentTaskToDelayedList+0x90>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d98:	4b20      	ldr	r3, [pc, #128]	@ (8002e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fbee 	bl	8001580 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d10a      	bne.n	8002dc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002db2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4819      	ldr	r0, [pc, #100]	@ (8002e20 <prvAddCurrentTaskToDelayedList+0x98>)
 8002dbc:	f7fe fb85 	bl	80014ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002dc0:	e026      	b.n	8002e10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002dca:	4b14      	ldr	r3, [pc, #80]	@ (8002e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d209      	bcs.n	8002dee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dda:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b0f      	ldr	r3, [pc, #60]	@ (8002e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3304      	adds	r3, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	4610      	mov	r0, r2
 8002de8:	f7fe fb92 	bl	8001510 <vListInsert>
}
 8002dec:	e010      	b.n	8002e10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dee:	4b0e      	ldr	r3, [pc, #56]	@ (8002e28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f7fe fb88 	bl	8001510 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d202      	bcs.n	8002e10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002e0a:	4a08      	ldr	r2, [pc, #32]	@ (8002e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000cf4 	.word	0x20000cf4
 8002e1c:	2000081c 	.word	0x2000081c
 8002e20:	20000cdc 	.word	0x20000cdc
 8002e24:	20000cac 	.word	0x20000cac
 8002e28:	20000ca8 	.word	0x20000ca8
 8002e2c:	20000d10 	.word	0x20000d10

08002e30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	@ 0x28
 8002e34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002e3a:	f000 fb11 	bl	8003460 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb4 <xTimerCreateTimerTask+0x84>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d021      	beq.n	8002e8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002e4e:	1d3a      	adds	r2, r7, #4
 8002e50:	f107 0108 	add.w	r1, r7, #8
 8002e54:	f107 030c 	add.w	r3, r7, #12
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe faf1 	bl	8001440 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	9202      	str	r2, [sp, #8]
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	2302      	movs	r3, #2
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	460a      	mov	r2, r1
 8002e70:	4911      	ldr	r1, [pc, #68]	@ (8002eb8 <xTimerCreateTimerTask+0x88>)
 8002e72:	4812      	ldr	r0, [pc, #72]	@ (8002ebc <xTimerCreateTimerTask+0x8c>)
 8002e74:	f7ff f8a6 	bl	8001fc4 <xTaskCreateStatic>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <xTimerCreateTimerTask+0x90>)
 8002e7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002e7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <xTimerCreateTimerTask+0x90>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002e86:	2301      	movs	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	613b      	str	r3, [r7, #16]
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002ea8:	697b      	ldr	r3, [r7, #20]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000d4c 	.word	0x20000d4c
 8002eb8:	08003ea8 	.word	0x08003ea8
 8002ebc:	08002ffd 	.word	0x08002ffd
 8002ec0:	20000d50 	.word	0x20000d50

08002ec4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <xTimerGenericCommand+0x30>
	__asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	623b      	str	r3, [r7, #32]
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	e7fd      	b.n	8002ef0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002ef4:	4b19      	ldr	r3, [pc, #100]	@ (8002f5c <xTimerGenericCommand+0x98>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02a      	beq.n	8002f52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b05      	cmp	r3, #5
 8002f0c:	dc18      	bgt.n	8002f40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002f0e:	f7ff fead 	bl	8002c6c <xTaskGetSchedulerState>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d109      	bne.n	8002f2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002f18:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <xTimerGenericCommand+0x98>)
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	f107 0110 	add.w	r1, r7, #16
 8002f20:	2300      	movs	r3, #0
 8002f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f24:	f7fe fc60 	bl	80017e8 <xQueueGenericSend>
 8002f28:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f2a:	e012      	b.n	8002f52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <xTimerGenericCommand+0x98>)
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	f107 0110 	add.w	r1, r7, #16
 8002f34:	2300      	movs	r3, #0
 8002f36:	2200      	movs	r2, #0
 8002f38:	f7fe fc56 	bl	80017e8 <xQueueGenericSend>
 8002f3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f3e:	e008      	b.n	8002f52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002f40:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <xTimerGenericCommand+0x98>)
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	f107 0110 	add.w	r1, r7, #16
 8002f48:	2300      	movs	r3, #0
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	f7fe fd4e 	bl	80019ec <xQueueGenericSendFromISR>
 8002f50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3728      	adds	r7, #40	@ 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000d4c 	.word	0x20000d4c

08002f60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f6a:	4b23      	ldr	r3, [pc, #140]	@ (8002ff8 <prvProcessExpiredTimer+0x98>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe fb01 	bl	8001580 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d023      	beq.n	8002fd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	18d1      	adds	r1, r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	6978      	ldr	r0, [r7, #20]
 8002f9a:	f000 f8d3 	bl	8003144 <prvInsertTimerInActiveList>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	2100      	movs	r1, #0
 8002fae:	6978      	ldr	r0, [r7, #20]
 8002fb0:	f7ff ff88 	bl	8002ec4 <xTimerGenericCommand>
 8002fb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d114      	bne.n	8002fe6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8002fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	60fb      	str	r3, [r7, #12]
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	e7fd      	b.n	8002fd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002fda:	f023 0301 	bic.w	r3, r3, #1
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	4798      	blx	r3
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000d44 	.word	0x20000d44

08002ffc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003004:	f107 0308 	add.w	r3, r7, #8
 8003008:	4618      	mov	r0, r3
 800300a:	f000 f859 	bl	80030c0 <prvGetNextExpireTime>
 800300e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4619      	mov	r1, r3
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f805 	bl	8003024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800301a:	f000 f8d5 	bl	80031c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800301e:	bf00      	nop
 8003020:	e7f0      	b.n	8003004 <prvTimerTask+0x8>
	...

08003024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800302e:	f7ff fa2d 	bl	800248c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f864 	bl	8003104 <prvSampleTimeNow>
 800303c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d130      	bne.n	80030a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <prvProcessTimerOrBlockTask+0x3c>
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	429a      	cmp	r2, r3
 8003050:	d806      	bhi.n	8003060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003052:	f7ff fa29 	bl	80024a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff81 	bl	8002f60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800305e:	e024      	b.n	80030aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003066:	4b13      	ldr	r3, [pc, #76]	@ (80030b4 <prvProcessTimerOrBlockTask+0x90>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <prvProcessTimerOrBlockTask+0x50>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <prvProcessTimerOrBlockTask+0x52>
 8003074:	2300      	movs	r3, #0
 8003076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003078:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <prvProcessTimerOrBlockTask+0x94>)
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	f7fe ff69 	bl	8001f5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800308a:	f7ff fa0d 	bl	80024a8 <xTaskResumeAll>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003094:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <prvProcessTimerOrBlockTask+0x98>)
 8003096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	f3bf 8f6f 	isb	sy
}
 80030a4:	e001      	b.n	80030aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80030a6:	f7ff f9ff 	bl	80024a8 <xTaskResumeAll>
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000d48 	.word	0x20000d48
 80030b8:	20000d4c 	.word	0x20000d4c
 80030bc:	e000ed04 	.word	0xe000ed04

080030c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80030c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003100 <prvGetNextExpireTime+0x40>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <prvGetNextExpireTime+0x16>
 80030d2:	2201      	movs	r2, #1
 80030d4:	e000      	b.n	80030d8 <prvGetNextExpireTime+0x18>
 80030d6:	2200      	movs	r2, #0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030e4:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <prvGetNextExpireTime+0x40>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	e001      	b.n	80030f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80030f4:	68fb      	ldr	r3, [r7, #12]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	20000d44 	.word	0x20000d44

08003104 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800310c:	f7ff fa6a 	bl	80025e4 <xTaskGetTickCount>
 8003110:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003112:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <prvSampleTimeNow+0x3c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	429a      	cmp	r2, r3
 800311a:	d205      	bcs.n	8003128 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800311c:	f000 f93a 	bl	8003394 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e002      	b.n	800312e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800312e:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <prvSampleTimeNow+0x3c>)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003134:	68fb      	ldr	r3, [r7, #12]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000d54 	.word	0x20000d54

08003144 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	429a      	cmp	r2, r3
 8003168:	d812      	bhi.n	8003190 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	1ad2      	subs	r2, r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	429a      	cmp	r2, r3
 8003176:	d302      	bcc.n	800317e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003178:	2301      	movs	r3, #1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	e01b      	b.n	80031b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800317e:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <prvInsertTimerInActiveList+0x7c>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3304      	adds	r3, #4
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f7fe f9c1 	bl	8001510 <vListInsert>
 800318e:	e012      	b.n	80031b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d206      	bcs.n	80031a6 <prvInsertTimerInActiveList+0x62>
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d302      	bcc.n	80031a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e007      	b.n	80031b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80031a6:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <prvInsertTimerInActiveList+0x80>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3304      	adds	r3, #4
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f7fe f9ad 	bl	8001510 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80031b6:	697b      	ldr	r3, [r7, #20]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000d48 	.word	0x20000d48
 80031c4:	20000d44 	.word	0x20000d44

080031c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08e      	sub	sp, #56	@ 0x38
 80031cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80031ce:	e0ce      	b.n	800336e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	da19      	bge.n	800320a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80031d6:	1d3b      	adds	r3, r7, #4
 80031d8:	3304      	adds	r3, #4
 80031da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80031dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	61fb      	str	r3, [r7, #28]
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	e7fd      	b.n	80031f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80031fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003200:	6850      	ldr	r0, [r2, #4]
 8003202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003204:	6892      	ldr	r2, [r2, #8]
 8003206:	4611      	mov	r1, r2
 8003208:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	f2c0 80ae 	blt.w	800336e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800321e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003220:	3304      	adds	r3, #4
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe f9ac 	bl	8001580 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003228:	463b      	mov	r3, r7
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff6a 	bl	8003104 <prvSampleTimeNow>
 8003230:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b09      	cmp	r3, #9
 8003236:	f200 8097 	bhi.w	8003368 <prvProcessReceivedCommands+0x1a0>
 800323a:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <prvProcessReceivedCommands+0x78>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	08003269 	.word	0x08003269
 8003244:	08003269 	.word	0x08003269
 8003248:	08003269 	.word	0x08003269
 800324c:	080032df 	.word	0x080032df
 8003250:	080032f3 	.word	0x080032f3
 8003254:	0800333f 	.word	0x0800333f
 8003258:	08003269 	.word	0x08003269
 800325c:	08003269 	.word	0x08003269
 8003260:	080032df 	.word	0x080032df
 8003264:	080032f3 	.word	0x080032f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	b2da      	uxtb	r2, r3
 8003274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	18d1      	adds	r1, r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003288:	f7ff ff5c 	bl	8003144 <prvInsertTimerInActiveList>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d06c      	beq.n	800336c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003298:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800329a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d061      	beq.n	800336c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	441a      	add	r2, r3
 80032b0:	2300      	movs	r3, #0
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2300      	movs	r3, #0
 80032b6:	2100      	movs	r1, #0
 80032b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032ba:	f7ff fe03 	bl	8002ec4 <xTimerGenericCommand>
 80032be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d152      	bne.n	800336c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	61bb      	str	r3, [r7, #24]
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80032de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80032f0:	e03d      	b.n	800336e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80032f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003300:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003308:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800330a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10b      	bne.n	800332a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	617b      	str	r3, [r7, #20]
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	e7fd      	b.n	8003326 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800332a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	18d1      	adds	r1, r2, r3
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003338:	f7ff ff04 	bl	8003144 <prvInsertTimerInActiveList>
					break;
 800333c:	e017      	b.n	800336e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800333e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d103      	bne.n	8003354 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800334c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800334e:	f000 fb85 	bl	8003a5c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003352:	e00c      	b.n	800336e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003356:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	b2da      	uxtb	r2, r3
 8003360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003362:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003366:	e002      	b.n	800336e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <prvProcessReceivedCommands+0x1a6>
					break;
 800336c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800336e:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <prvProcessReceivedCommands+0x1c8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	1d39      	adds	r1, r7, #4
 8003374:	2200      	movs	r2, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fbd6 	bl	8001b28 <xQueueReceive>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	f47f af26 	bne.w	80031d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3730      	adds	r7, #48	@ 0x30
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000d4c 	.word	0x20000d4c

08003394 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800339a:	e049      	b.n	8003430 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800339c:	4b2e      	ldr	r3, [pc, #184]	@ (8003458 <prvSwitchTimerLists+0xc4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003458 <prvSwitchTimerLists+0xc4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe f8e3 	bl	8001580 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d02f      	beq.n	8003430 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d90e      	bls.n	8003400 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003458 <prvSwitchTimerLists+0xc4>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f7fe f889 	bl	8001510 <vListInsert>
 80033fe:	e017      	b.n	8003430 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003400:	2300      	movs	r3, #0
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	2100      	movs	r1, #0
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f7ff fd5a 	bl	8002ec4 <xTimerGenericCommand>
 8003410:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	603b      	str	r3, [r7, #0]
}
 800342a:	bf00      	nop
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003430:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <prvSwitchTimerLists+0xc4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1b0      	bne.n	800339c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800343a:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <prvSwitchTimerLists+0xc4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <prvSwitchTimerLists+0xc8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a04      	ldr	r2, [pc, #16]	@ (8003458 <prvSwitchTimerLists+0xc4>)
 8003446:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003448:	4a04      	ldr	r2, [pc, #16]	@ (800345c <prvSwitchTimerLists+0xc8>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	6013      	str	r3, [r2, #0]
}
 800344e:	bf00      	nop
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000d44 	.word	0x20000d44
 800345c:	20000d48 	.word	0x20000d48

08003460 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003466:	f000 f929 	bl	80036bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800346a:	4b15      	ldr	r3, [pc, #84]	@ (80034c0 <prvCheckForValidListAndQueue+0x60>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d120      	bne.n	80034b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003472:	4814      	ldr	r0, [pc, #80]	@ (80034c4 <prvCheckForValidListAndQueue+0x64>)
 8003474:	f7fd fffe 	bl	8001474 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003478:	4813      	ldr	r0, [pc, #76]	@ (80034c8 <prvCheckForValidListAndQueue+0x68>)
 800347a:	f7fd fffb 	bl	8001474 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800347e:	4b13      	ldr	r3, [pc, #76]	@ (80034cc <prvCheckForValidListAndQueue+0x6c>)
 8003480:	4a10      	ldr	r2, [pc, #64]	@ (80034c4 <prvCheckForValidListAndQueue+0x64>)
 8003482:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003484:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <prvCheckForValidListAndQueue+0x70>)
 8003486:	4a10      	ldr	r2, [pc, #64]	@ (80034c8 <prvCheckForValidListAndQueue+0x68>)
 8003488:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800348a:	2300      	movs	r3, #0
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <prvCheckForValidListAndQueue+0x74>)
 8003490:	4a11      	ldr	r2, [pc, #68]	@ (80034d8 <prvCheckForValidListAndQueue+0x78>)
 8003492:	2110      	movs	r1, #16
 8003494:	200a      	movs	r0, #10
 8003496:	f7fe f907 	bl	80016a8 <xQueueGenericCreateStatic>
 800349a:	4603      	mov	r3, r0
 800349c:	4a08      	ldr	r2, [pc, #32]	@ (80034c0 <prvCheckForValidListAndQueue+0x60>)
 800349e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80034a0:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <prvCheckForValidListAndQueue+0x60>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <prvCheckForValidListAndQueue+0x60>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	490b      	ldr	r1, [pc, #44]	@ (80034dc <prvCheckForValidListAndQueue+0x7c>)
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fd2c 	bl	8001f0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034b4:	f000 f932 	bl	800371c <vPortExitCritical>
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000d4c 	.word	0x20000d4c
 80034c4:	20000d1c 	.word	0x20000d1c
 80034c8:	20000d30 	.word	0x20000d30
 80034cc:	20000d44 	.word	0x20000d44
 80034d0:	20000d48 	.word	0x20000d48
 80034d4:	20000df8 	.word	0x20000df8
 80034d8:	20000d58 	.word	0x20000d58
 80034dc:	08003eb0 	.word	0x08003eb0

080034e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3b04      	subs	r3, #4
 80034f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3b04      	subs	r3, #4
 80034fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f023 0201 	bic.w	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3b04      	subs	r3, #4
 800350e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003510:	4a08      	ldr	r2, [pc, #32]	@ (8003534 <pxPortInitialiseStack+0x54>)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3b14      	subs	r3, #20
 800351a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3b20      	subs	r3, #32
 8003526:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	08003539 	.word	0x08003539

08003538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003542:	4b12      	ldr	r3, [pc, #72]	@ (800358c <prvTaskExitError+0x54>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	d00b      	beq.n	8003564 <prvTaskExitError+0x2c>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	60fb      	str	r3, [r7, #12]
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <prvTaskExitError+0x28>
	__asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	60bb      	str	r3, [r7, #8]
}
 8003576:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003578:	bf00      	nop
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0fc      	beq.n	800357a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	2000000c 	.word	0x2000000c

08003590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003590:	4b07      	ldr	r3, [pc, #28]	@ (80035b0 <pxCurrentTCBConst2>)
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	6808      	ldr	r0, [r1, #0]
 8003596:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800359a:	f380 8809 	msr	PSP, r0
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f380 8811 	msr	BASEPRI, r0
 80035aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80035ae:	4770      	bx	lr

080035b0 <pxCurrentTCBConst2>:
 80035b0:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop

080035b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80035b8:	4806      	ldr	r0, [pc, #24]	@ (80035d4 <prvPortStartFirstTask+0x1c>)
 80035ba:	6800      	ldr	r0, [r0, #0]
 80035bc:	6800      	ldr	r0, [r0, #0]
 80035be:	f380 8808 	msr	MSP, r0
 80035c2:	b662      	cpsie	i
 80035c4:	b661      	cpsie	f
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	df00      	svc	0
 80035d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80035d2:	bf00      	nop
 80035d4:	e000ed08 	.word	0xe000ed08

080035d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035de:	4b32      	ldr	r3, [pc, #200]	@ (80036a8 <xPortStartScheduler+0xd0>)
 80035e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	22ff      	movs	r2, #255	@ 0xff
 80035ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4b2a      	ldr	r3, [pc, #168]	@ (80036ac <xPortStartScheduler+0xd4>)
 8003604:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003606:	4b2a      	ldr	r3, [pc, #168]	@ (80036b0 <xPortStartScheduler+0xd8>)
 8003608:	2207      	movs	r2, #7
 800360a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800360c:	e009      	b.n	8003622 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800360e:	4b28      	ldr	r3, [pc, #160]	@ (80036b0 <xPortStartScheduler+0xd8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3b01      	subs	r3, #1
 8003614:	4a26      	ldr	r2, [pc, #152]	@ (80036b0 <xPortStartScheduler+0xd8>)
 8003616:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	b2db      	uxtb	r3, r3
 8003620:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003622:	78fb      	ldrb	r3, [r7, #3]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	2b80      	cmp	r3, #128	@ 0x80
 800362c:	d0ef      	beq.n	800360e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800362e:	4b20      	ldr	r3, [pc, #128]	@ (80036b0 <xPortStartScheduler+0xd8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	d00b      	beq.n	8003652 <xPortStartScheduler+0x7a>
	__asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	60bb      	str	r3, [r7, #8]
}
 800364c:	bf00      	nop
 800364e:	bf00      	nop
 8003650:	e7fd      	b.n	800364e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003652:	4b17      	ldr	r3, [pc, #92]	@ (80036b0 <xPortStartScheduler+0xd8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	4a15      	ldr	r2, [pc, #84]	@ (80036b0 <xPortStartScheduler+0xd8>)
 800365a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800365c:	4b14      	ldr	r3, [pc, #80]	@ (80036b0 <xPortStartScheduler+0xd8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003664:	4a12      	ldr	r2, [pc, #72]	@ (80036b0 <xPortStartScheduler+0xd8>)
 8003666:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003670:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <xPortStartScheduler+0xdc>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0f      	ldr	r2, [pc, #60]	@ (80036b4 <xPortStartScheduler+0xdc>)
 8003676:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800367a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800367c:	4b0d      	ldr	r3, [pc, #52]	@ (80036b4 <xPortStartScheduler+0xdc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0c      	ldr	r2, [pc, #48]	@ (80036b4 <xPortStartScheduler+0xdc>)
 8003682:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003686:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003688:	f000 f8b8 	bl	80037fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <xPortStartScheduler+0xe0>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003692:	f7ff ff91 	bl	80035b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003696:	f7ff f86d 	bl	8002774 <vTaskSwitchContext>
	prvTaskExitError();
 800369a:	f7ff ff4d 	bl	8003538 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	e000e400 	.word	0xe000e400
 80036ac:	20000e48 	.word	0x20000e48
 80036b0:	20000e4c 	.word	0x20000e4c
 80036b4:	e000ed20 	.word	0xe000ed20
 80036b8:	2000000c 	.word	0x2000000c

080036bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	607b      	str	r3, [r7, #4]
}
 80036d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003714 <vPortEnterCritical+0x58>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003714 <vPortEnterCritical+0x58>)
 80036de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003714 <vPortEnterCritical+0x58>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d110      	bne.n	800370a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <vPortEnterCritical+0x5c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <vPortEnterCritical+0x4e>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	603b      	str	r3, [r7, #0]
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	e7fd      	b.n	8003706 <vPortEnterCritical+0x4a>
	}
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	2000000c 	.word	0x2000000c
 8003718:	e000ed04 	.word	0xe000ed04

0800371c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003722:	4b12      	ldr	r3, [pc, #72]	@ (800376c <vPortExitCritical+0x50>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <vPortExitCritical+0x26>
	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	607b      	str	r3, [r7, #4]
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	e7fd      	b.n	800373e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003742:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <vPortExitCritical+0x50>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3b01      	subs	r3, #1
 8003748:	4a08      	ldr	r2, [pc, #32]	@ (800376c <vPortExitCritical+0x50>)
 800374a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800374c:	4b07      	ldr	r3, [pc, #28]	@ (800376c <vPortExitCritical+0x50>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <vPortExitCritical+0x44>
 8003754:	2300      	movs	r3, #0
 8003756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f383 8811 	msr	BASEPRI, r3
}
 800375e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	2000000c 	.word	0x2000000c

08003770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003770:	f3ef 8009 	mrs	r0, PSP
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	4b0d      	ldr	r3, [pc, #52]	@ (80037b0 <pxCurrentTCBConst>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003780:	6010      	str	r0, [r2, #0]
 8003782:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003786:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800378a:	f380 8811 	msr	BASEPRI, r0
 800378e:	f7fe fff1 	bl	8002774 <vTaskSwitchContext>
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f380 8811 	msr	BASEPRI, r0
 800379a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	6808      	ldr	r0, [r1, #0]
 80037a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037a6:	f380 8809 	msr	PSP, r0
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	4770      	bx	lr

080037b0 <pxCurrentTCBConst>:
 80037b0:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop

080037b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	607b      	str	r3, [r7, #4]
}
 80037d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037d2:	f7fe ff15 	bl	8002600 <xTaskIncrementTick>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <xPortSysTickHandler+0x40>)
 80037de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	2300      	movs	r3, #0
 80037e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f383 8811 	msr	BASEPRI, r3
}
 80037ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	e000ed04 	.word	0xe000ed04

080037fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003800:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <vPortSetupTimerInterrupt+0x30>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003806:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <vPortSetupTimerInterrupt+0x34>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800380c:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <vPortSetupTimerInterrupt+0x38>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a09      	ldr	r2, [pc, #36]	@ (8003838 <vPortSetupTimerInterrupt+0x3c>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	4a08      	ldr	r2, [pc, #32]	@ (800383c <vPortSetupTimerInterrupt+0x40>)
 800381a:	3b01      	subs	r3, #1
 800381c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800381e:	4b03      	ldr	r3, [pc, #12]	@ (800382c <vPortSetupTimerInterrupt+0x30>)
 8003820:	2207      	movs	r2, #7
 8003822:	601a      	str	r2, [r3, #0]
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	e000e010 	.word	0xe000e010
 8003830:	e000e018 	.word	0xe000e018
 8003834:	20000000 	.word	0x20000000
 8003838:	10624dd3 	.word	0x10624dd3
 800383c:	e000e014 	.word	0xe000e014

08003840 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003846:	f3ef 8305 	mrs	r3, IPSR
 800384a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b0f      	cmp	r3, #15
 8003850:	d915      	bls.n	800387e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003852:	4a17      	ldr	r2, [pc, #92]	@ (80038b0 <vPortValidateInterruptPriority+0x70>)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800385c:	4b15      	ldr	r3, [pc, #84]	@ (80038b4 <vPortValidateInterruptPriority+0x74>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	7afa      	ldrb	r2, [r7, #11]
 8003862:	429a      	cmp	r2, r3
 8003864:	d20b      	bcs.n	800387e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	607b      	str	r3, [r7, #4]
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	e7fd      	b.n	800387a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800387e:	4b0e      	ldr	r3, [pc, #56]	@ (80038b8 <vPortValidateInterruptPriority+0x78>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003886:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <vPortValidateInterruptPriority+0x7c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d90b      	bls.n	80038a6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	603b      	str	r3, [r7, #0]
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	e7fd      	b.n	80038a2 <vPortValidateInterruptPriority+0x62>
	}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	e000e3f0 	.word	0xe000e3f0
 80038b4:	20000e48 	.word	0x20000e48
 80038b8:	e000ed0c 	.word	0xe000ed0c
 80038bc:	20000e4c 	.word	0x20000e4c

080038c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	@ 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038cc:	f7fe fdde 	bl	800248c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038d0:	4b5c      	ldr	r3, [pc, #368]	@ (8003a44 <pvPortMalloc+0x184>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038d8:	f000 f924 	bl	8003b24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003a48 <pvPortMalloc+0x188>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f040 8095 	bne.w	8003a14 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01e      	beq.n	800392e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80038f0:	2208      	movs	r2, #8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d015      	beq.n	800392e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f023 0307 	bic.w	r3, r3, #7
 8003908:	3308      	adds	r3, #8
 800390a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <pvPortMalloc+0x6e>
	__asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	617b      	str	r3, [r7, #20]
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	e7fd      	b.n	800392a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d06f      	beq.n	8003a14 <pvPortMalloc+0x154>
 8003934:	4b45      	ldr	r3, [pc, #276]	@ (8003a4c <pvPortMalloc+0x18c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	429a      	cmp	r2, r3
 800393c:	d86a      	bhi.n	8003a14 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800393e:	4b44      	ldr	r3, [pc, #272]	@ (8003a50 <pvPortMalloc+0x190>)
 8003940:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003942:	4b43      	ldr	r3, [pc, #268]	@ (8003a50 <pvPortMalloc+0x190>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003948:	e004      	b.n	8003954 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	429a      	cmp	r2, r3
 800395c:	d903      	bls.n	8003966 <pvPortMalloc+0xa6>
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f1      	bne.n	800394a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003966:	4b37      	ldr	r3, [pc, #220]	@ (8003a44 <pvPortMalloc+0x184>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396c:	429a      	cmp	r2, r3
 800396e:	d051      	beq.n	8003a14 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2208      	movs	r2, #8
 8003976:	4413      	add	r3, r2
 8003978:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	1ad2      	subs	r2, r2, r3
 800398a:	2308      	movs	r3, #8
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	429a      	cmp	r2, r3
 8003990:	d920      	bls.n	80039d4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <pvPortMalloc+0xfc>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	613b      	str	r3, [r7, #16]
}
 80039b6:	bf00      	nop
 80039b8:	bf00      	nop
 80039ba:	e7fd      	b.n	80039b8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	1ad2      	subs	r2, r2, r3
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039ce:	69b8      	ldr	r0, [r7, #24]
 80039d0:	f000 f90a 	bl	8003be8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039d4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a4c <pvPortMalloc+0x18c>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <pvPortMalloc+0x18c>)
 80039e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039e2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a4c <pvPortMalloc+0x18c>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a54 <pvPortMalloc+0x194>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d203      	bcs.n	80039f6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039ee:	4b17      	ldr	r3, [pc, #92]	@ (8003a4c <pvPortMalloc+0x18c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a18      	ldr	r2, [pc, #96]	@ (8003a54 <pvPortMalloc+0x194>)
 80039f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	4b13      	ldr	r3, [pc, #76]	@ (8003a48 <pvPortMalloc+0x188>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003a0a:	4b13      	ldr	r3, [pc, #76]	@ (8003a58 <pvPortMalloc+0x198>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	4a11      	ldr	r2, [pc, #68]	@ (8003a58 <pvPortMalloc+0x198>)
 8003a12:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a14:	f7fe fd48 	bl	80024a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <pvPortMalloc+0x17a>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	60fb      	str	r3, [r7, #12]
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	e7fd      	b.n	8003a36 <pvPortMalloc+0x176>
	return pvReturn;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3728      	adds	r7, #40	@ 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20001a58 	.word	0x20001a58
 8003a48:	20001a6c 	.word	0x20001a6c
 8003a4c:	20001a5c 	.word	0x20001a5c
 8003a50:	20001a50 	.word	0x20001a50
 8003a54:	20001a60 	.word	0x20001a60
 8003a58:	20001a64 	.word	0x20001a64

08003a5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d04f      	beq.n	8003b0e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a6e:	2308      	movs	r3, #8
 8003a70:	425b      	negs	r3, r3
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4413      	add	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	4b25      	ldr	r3, [pc, #148]	@ (8003b18 <vPortFree+0xbc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <vPortFree+0x46>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	60fb      	str	r3, [r7, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	e7fd      	b.n	8003a9e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <vPortFree+0x66>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	60bb      	str	r3, [r7, #8]
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	e7fd      	b.n	8003abe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	4b14      	ldr	r3, [pc, #80]	@ (8003b18 <vPortFree+0xbc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01e      	beq.n	8003b0e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d11a      	bne.n	8003b0e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b18 <vPortFree+0xbc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ae8:	f7fe fcd0 	bl	800248c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <vPortFree+0xc0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	4a09      	ldr	r2, [pc, #36]	@ (8003b1c <vPortFree+0xc0>)
 8003af8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003afa:	6938      	ldr	r0, [r7, #16]
 8003afc:	f000 f874 	bl	8003be8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003b00:	4b07      	ldr	r3, [pc, #28]	@ (8003b20 <vPortFree+0xc4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	4a06      	ldr	r2, [pc, #24]	@ (8003b20 <vPortFree+0xc4>)
 8003b08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003b0a:	f7fe fccd 	bl	80024a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b0e:	bf00      	nop
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20001a6c 	.word	0x20001a6c
 8003b1c:	20001a5c 	.word	0x20001a5c
 8003b20:	20001a68 	.word	0x20001a68

08003b24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003b2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b30:	4b27      	ldr	r3, [pc, #156]	@ (8003bd0 <prvHeapInit+0xac>)
 8003b32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00c      	beq.n	8003b58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3307      	adds	r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0307 	bic.w	r3, r3, #7
 8003b4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd0 <prvHeapInit+0xac>)
 8003b54:	4413      	add	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd4 <prvHeapInit+0xb0>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd4 <prvHeapInit+0xb0>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b70:	2208      	movs	r2, #8
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0307 	bic.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a15      	ldr	r2, [pc, #84]	@ (8003bd8 <prvHeapInit+0xb4>)
 8003b84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b86:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <prvHeapInit+0xb4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b8e:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <prvHeapInit+0xb4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	1ad2      	subs	r2, r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <prvHeapInit+0xb4>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bdc <prvHeapInit+0xb8>)
 8003bb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a09      	ldr	r2, [pc, #36]	@ (8003be0 <prvHeapInit+0xbc>)
 8003bba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003bbc:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <prvHeapInit+0xc0>)
 8003bbe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003bc2:	601a      	str	r2, [r3, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000e50 	.word	0x20000e50
 8003bd4:	20001a50 	.word	0x20001a50
 8003bd8:	20001a58 	.word	0x20001a58
 8003bdc:	20001a60 	.word	0x20001a60
 8003be0:	20001a5c 	.word	0x20001a5c
 8003be4:	20001a6c 	.word	0x20001a6c

08003be8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bf0:	4b27      	ldr	r3, [pc, #156]	@ (8003c90 <prvInsertBlockIntoFreeList+0xa8>)
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e002      	b.n	8003bfc <prvInsertBlockIntoFreeList+0x14>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d8f7      	bhi.n	8003bf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4413      	add	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d108      	bne.n	8003c2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	441a      	add	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	441a      	add	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d118      	bne.n	8003c70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b14      	ldr	r3, [pc, #80]	@ (8003c94 <prvInsertBlockIntoFreeList+0xac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d00d      	beq.n	8003c66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	441a      	add	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e008      	b.n	8003c78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c66:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <prvInsertBlockIntoFreeList+0xac>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e003      	b.n	8003c78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d002      	beq.n	8003c86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	20001a50 	.word	0x20001a50
 8003c94:	20001a58 	.word	0x20001a58

08003c98 <memset>:
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4402      	add	r2, r0
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d100      	bne.n	8003ca2 <memset+0xa>
 8003ca0:	4770      	bx	lr
 8003ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca6:	e7f9      	b.n	8003c9c <memset+0x4>

08003ca8 <_reclaim_reent>:
 8003ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8003d60 <_reclaim_reent+0xb8>)
 8003caa:	b570      	push	{r4, r5, r6, lr}
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4604      	mov	r4, r0
 8003cb0:	4283      	cmp	r3, r0
 8003cb2:	d053      	beq.n	8003d5c <_reclaim_reent+0xb4>
 8003cb4:	69c3      	ldr	r3, [r0, #28]
 8003cb6:	b31b      	cbz	r3, 8003d00 <_reclaim_reent+0x58>
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	b163      	cbz	r3, 8003cd6 <_reclaim_reent+0x2e>
 8003cbc:	2500      	movs	r5, #0
 8003cbe:	69e3      	ldr	r3, [r4, #28]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	5959      	ldr	r1, [r3, r5]
 8003cc4:	b9b1      	cbnz	r1, 8003cf4 <_reclaim_reent+0x4c>
 8003cc6:	3504      	adds	r5, #4
 8003cc8:	2d80      	cmp	r5, #128	@ 0x80
 8003cca:	d1f8      	bne.n	8003cbe <_reclaim_reent+0x16>
 8003ccc:	69e3      	ldr	r3, [r4, #28]
 8003cce:	4620      	mov	r0, r4
 8003cd0:	68d9      	ldr	r1, [r3, #12]
 8003cd2:	f000 f87b 	bl	8003dcc <_free_r>
 8003cd6:	69e3      	ldr	r3, [r4, #28]
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	b111      	cbz	r1, 8003ce2 <_reclaim_reent+0x3a>
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f000 f875 	bl	8003dcc <_free_r>
 8003ce2:	69e3      	ldr	r3, [r4, #28]
 8003ce4:	689d      	ldr	r5, [r3, #8]
 8003ce6:	b15d      	cbz	r5, 8003d00 <_reclaim_reent+0x58>
 8003ce8:	4629      	mov	r1, r5
 8003cea:	4620      	mov	r0, r4
 8003cec:	682d      	ldr	r5, [r5, #0]
 8003cee:	f000 f86d 	bl	8003dcc <_free_r>
 8003cf2:	e7f8      	b.n	8003ce6 <_reclaim_reent+0x3e>
 8003cf4:	680e      	ldr	r6, [r1, #0]
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f000 f868 	bl	8003dcc <_free_r>
 8003cfc:	4631      	mov	r1, r6
 8003cfe:	e7e1      	b.n	8003cc4 <_reclaim_reent+0x1c>
 8003d00:	6961      	ldr	r1, [r4, #20]
 8003d02:	b111      	cbz	r1, 8003d0a <_reclaim_reent+0x62>
 8003d04:	4620      	mov	r0, r4
 8003d06:	f000 f861 	bl	8003dcc <_free_r>
 8003d0a:	69e1      	ldr	r1, [r4, #28]
 8003d0c:	b111      	cbz	r1, 8003d14 <_reclaim_reent+0x6c>
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f000 f85c 	bl	8003dcc <_free_r>
 8003d14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003d16:	b111      	cbz	r1, 8003d1e <_reclaim_reent+0x76>
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f000 f857 	bl	8003dcc <_free_r>
 8003d1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d20:	b111      	cbz	r1, 8003d28 <_reclaim_reent+0x80>
 8003d22:	4620      	mov	r0, r4
 8003d24:	f000 f852 	bl	8003dcc <_free_r>
 8003d28:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003d2a:	b111      	cbz	r1, 8003d32 <_reclaim_reent+0x8a>
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f000 f84d 	bl	8003dcc <_free_r>
 8003d32:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003d34:	b111      	cbz	r1, 8003d3c <_reclaim_reent+0x94>
 8003d36:	4620      	mov	r0, r4
 8003d38:	f000 f848 	bl	8003dcc <_free_r>
 8003d3c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003d3e:	b111      	cbz	r1, 8003d46 <_reclaim_reent+0x9e>
 8003d40:	4620      	mov	r0, r4
 8003d42:	f000 f843 	bl	8003dcc <_free_r>
 8003d46:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003d48:	b111      	cbz	r1, 8003d50 <_reclaim_reent+0xa8>
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f000 f83e 	bl	8003dcc <_free_r>
 8003d50:	6a23      	ldr	r3, [r4, #32]
 8003d52:	b11b      	cbz	r3, 8003d5c <_reclaim_reent+0xb4>
 8003d54:	4620      	mov	r0, r4
 8003d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003d5a:	4718      	bx	r3
 8003d5c:	bd70      	pop	{r4, r5, r6, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000010 	.word	0x20000010

08003d64 <__libc_init_array>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	2600      	movs	r6, #0
 8003d68:	4d0c      	ldr	r5, [pc, #48]	@ (8003d9c <__libc_init_array+0x38>)
 8003d6a:	4c0d      	ldr	r4, [pc, #52]	@ (8003da0 <__libc_init_array+0x3c>)
 8003d6c:	1b64      	subs	r4, r4, r5
 8003d6e:	10a4      	asrs	r4, r4, #2
 8003d70:	42a6      	cmp	r6, r4
 8003d72:	d109      	bne.n	8003d88 <__libc_init_array+0x24>
 8003d74:	f000 f87e 	bl	8003e74 <_init>
 8003d78:	2600      	movs	r6, #0
 8003d7a:	4d0a      	ldr	r5, [pc, #40]	@ (8003da4 <__libc_init_array+0x40>)
 8003d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8003da8 <__libc_init_array+0x44>)
 8003d7e:	1b64      	subs	r4, r4, r5
 8003d80:	10a4      	asrs	r4, r4, #2
 8003d82:	42a6      	cmp	r6, r4
 8003d84:	d105      	bne.n	8003d92 <__libc_init_array+0x2e>
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8c:	4798      	blx	r3
 8003d8e:	3601      	adds	r6, #1
 8003d90:	e7ee      	b.n	8003d70 <__libc_init_array+0xc>
 8003d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d96:	4798      	blx	r3
 8003d98:	3601      	adds	r6, #1
 8003d9a:	e7f2      	b.n	8003d82 <__libc_init_array+0x1e>
 8003d9c:	08003f24 	.word	0x08003f24
 8003da0:	08003f24 	.word	0x08003f24
 8003da4:	08003f24 	.word	0x08003f24
 8003da8:	08003f28 	.word	0x08003f28

08003dac <__retarget_lock_acquire_recursive>:
 8003dac:	4770      	bx	lr

08003dae <__retarget_lock_release_recursive>:
 8003dae:	4770      	bx	lr

08003db0 <memcpy>:
 8003db0:	440a      	add	r2, r1
 8003db2:	4291      	cmp	r1, r2
 8003db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003db8:	d100      	bne.n	8003dbc <memcpy+0xc>
 8003dba:	4770      	bx	lr
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dc2:	4291      	cmp	r1, r2
 8003dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dc8:	d1f9      	bne.n	8003dbe <memcpy+0xe>
 8003dca:	bd10      	pop	{r4, pc}

08003dcc <_free_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4605      	mov	r5, r0
 8003dd0:	2900      	cmp	r1, #0
 8003dd2:	d040      	beq.n	8003e56 <_free_r+0x8a>
 8003dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dd8:	1f0c      	subs	r4, r1, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bfb8      	it	lt
 8003dde:	18e4      	addlt	r4, r4, r3
 8003de0:	f000 f83c 	bl	8003e5c <__malloc_lock>
 8003de4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e58 <_free_r+0x8c>)
 8003de6:	6813      	ldr	r3, [r2, #0]
 8003de8:	b933      	cbnz	r3, 8003df8 <_free_r+0x2c>
 8003dea:	6063      	str	r3, [r4, #4]
 8003dec:	6014      	str	r4, [r2, #0]
 8003dee:	4628      	mov	r0, r5
 8003df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003df4:	f000 b838 	b.w	8003e68 <__malloc_unlock>
 8003df8:	42a3      	cmp	r3, r4
 8003dfa:	d908      	bls.n	8003e0e <_free_r+0x42>
 8003dfc:	6820      	ldr	r0, [r4, #0]
 8003dfe:	1821      	adds	r1, r4, r0
 8003e00:	428b      	cmp	r3, r1
 8003e02:	bf01      	itttt	eq
 8003e04:	6819      	ldreq	r1, [r3, #0]
 8003e06:	685b      	ldreq	r3, [r3, #4]
 8003e08:	1809      	addeq	r1, r1, r0
 8003e0a:	6021      	streq	r1, [r4, #0]
 8003e0c:	e7ed      	b.n	8003dea <_free_r+0x1e>
 8003e0e:	461a      	mov	r2, r3
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	b10b      	cbz	r3, 8003e18 <_free_r+0x4c>
 8003e14:	42a3      	cmp	r3, r4
 8003e16:	d9fa      	bls.n	8003e0e <_free_r+0x42>
 8003e18:	6811      	ldr	r1, [r2, #0]
 8003e1a:	1850      	adds	r0, r2, r1
 8003e1c:	42a0      	cmp	r0, r4
 8003e1e:	d10b      	bne.n	8003e38 <_free_r+0x6c>
 8003e20:	6820      	ldr	r0, [r4, #0]
 8003e22:	4401      	add	r1, r0
 8003e24:	1850      	adds	r0, r2, r1
 8003e26:	4283      	cmp	r3, r0
 8003e28:	6011      	str	r1, [r2, #0]
 8003e2a:	d1e0      	bne.n	8003dee <_free_r+0x22>
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4408      	add	r0, r1
 8003e32:	6010      	str	r0, [r2, #0]
 8003e34:	6053      	str	r3, [r2, #4]
 8003e36:	e7da      	b.n	8003dee <_free_r+0x22>
 8003e38:	d902      	bls.n	8003e40 <_free_r+0x74>
 8003e3a:	230c      	movs	r3, #12
 8003e3c:	602b      	str	r3, [r5, #0]
 8003e3e:	e7d6      	b.n	8003dee <_free_r+0x22>
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	1821      	adds	r1, r4, r0
 8003e44:	428b      	cmp	r3, r1
 8003e46:	bf01      	itttt	eq
 8003e48:	6819      	ldreq	r1, [r3, #0]
 8003e4a:	685b      	ldreq	r3, [r3, #4]
 8003e4c:	1809      	addeq	r1, r1, r0
 8003e4e:	6021      	streq	r1, [r4, #0]
 8003e50:	6063      	str	r3, [r4, #4]
 8003e52:	6054      	str	r4, [r2, #4]
 8003e54:	e7cb      	b.n	8003dee <_free_r+0x22>
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	20001bac 	.word	0x20001bac

08003e5c <__malloc_lock>:
 8003e5c:	4801      	ldr	r0, [pc, #4]	@ (8003e64 <__malloc_lock+0x8>)
 8003e5e:	f7ff bfa5 	b.w	8003dac <__retarget_lock_acquire_recursive>
 8003e62:	bf00      	nop
 8003e64:	20001ba8 	.word	0x20001ba8

08003e68 <__malloc_unlock>:
 8003e68:	4801      	ldr	r0, [pc, #4]	@ (8003e70 <__malloc_unlock+0x8>)
 8003e6a:	f7ff bfa0 	b.w	8003dae <__retarget_lock_release_recursive>
 8003e6e:	bf00      	nop
 8003e70:	20001ba8 	.word	0x20001ba8

08003e74 <_init>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr

08003e80 <_fini>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	bf00      	nop
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr
