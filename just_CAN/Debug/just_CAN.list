
just_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cfc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004e08  08004e08  00005e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e88  08004e88  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004e88  08004e88  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004e88  08004e88  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e88  08004e88  00005e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e8c  08004e8c  00005e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e90  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000068  08004ef8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004ef8  00006318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001216a  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003070  00000000  00000000  000181fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0001b270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000daf  00000000  00000000  0001c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f4b  00000000  00000000  0001d1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015742  00000000  00000000  00021122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096199  00000000  00000000  00036864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc9fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005078  00000000  00000000  000cca40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d1ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004df0 	.word	0x08004df0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004df0 	.word	0x08004df0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_ADC1_Init+0x74>)
 8000752:	4a19      	ldr	r2, [pc, #100]	@ (80007b8 <MX_ADC1_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_ADC1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_ADC1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_ADC1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_ADC1_Init+0x74>)
 800076a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800076e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_ADC1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_ADC1_Init+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077c:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <MX_ADC1_Init+0x74>)
 800077e:	f000 fde5 	bl	800134c <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 faa8 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800078c:	230a      	movs	r3, #10
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000790:	2301      	movs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000794:	2307      	movs	r3, #7
 8000796:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_ADC1_Init+0x74>)
 800079e:	f001 f96b 	bl	8001a78 <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007a8:	f000 fa98 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000084 	.word	0x20000084
 80007b8:	40012400 	.word	0x40012400

080007bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a18      	ldr	r2, [pc, #96]	@ (8000838 <HAL_ADC_MspInit+0x7c>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d129      	bne.n	8000830 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007dc:	4b17      	ldr	r3, [pc, #92]	@ (800083c <HAL_ADC_MspInit+0x80>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a16      	ldr	r2, [pc, #88]	@ (800083c <HAL_ADC_MspInit+0x80>)
 80007e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <HAL_ADC_MspInit+0x80>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <HAL_ADC_MspInit+0x80>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a10      	ldr	r2, [pc, #64]	@ (800083c <HAL_ADC_MspInit+0x80>)
 80007fa:	f043 0310 	orr.w	r3, r3, #16
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <HAL_ADC_MspInit+0x80>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0310 	and.w	r3, r3, #16
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = X_axis_Pin|Y_axis_Pin|Z_axis_Pin;
 800080c:	2307      	movs	r3, #7
 800080e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	4809      	ldr	r0, [pc, #36]	@ (8000840 <HAL_ADC_MspInit+0x84>)
 800081c:	f002 f8da 	bl	80029d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2012      	movs	r0, #18
 8000826:	f002 f89e 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800082a:	2012      	movs	r0, #18
 800082c:	f002 f8b7 	bl	800299e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40012400 	.word	0x40012400
 800083c:	40021000 	.word	0x40021000
 8000840:	40011000 	.word	0x40011000

08000844 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000848:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <MX_CAN_Init+0x64>)
 800084a:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <MX_CAN_Init+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800084e:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <MX_CAN_Init+0x64>)
 8000850:	2209      	movs	r2, #9
 8000852:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_CAN_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800085a:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <MX_CAN_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_CAN_Init+0x64>)
 8000862:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000866:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_CAN_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_CAN_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_CAN_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_CAN_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_CAN_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_CAN_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_CAN_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_CAN_Init+0x64>)
 8000894:	f001 fa8c 	bl	8001db0 <HAL_CAN_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800089e:	f000 fa1d 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000b4 	.word	0x200000b4
 80008ac:	40006400 	.word	0x40006400

080008b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a29      	ldr	r2, [pc, #164]	@ (8000970 <HAL_CAN_MspInit+0xc0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d14b      	bne.n	8000968 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008d0:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <HAL_CAN_MspInit+0xc4>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	4a27      	ldr	r2, [pc, #156]	@ (8000974 <HAL_CAN_MspInit+0xc4>)
 80008d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008da:	61d3      	str	r3, [r2, #28]
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <HAL_CAN_MspInit+0xc4>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <HAL_CAN_MspInit+0xc4>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a21      	ldr	r2, [pc, #132]	@ (8000974 <HAL_CAN_MspInit+0xc4>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <HAL_CAN_MspInit+0xc4>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0308 	and.w	r3, r3, #8
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000900:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4818      	ldr	r0, [pc, #96]	@ (8000978 <HAL_CAN_MspInit+0xc8>)
 8000916:	f002 f85d 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800091a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	4812      	ldr	r0, [pc, #72]	@ (8000978 <HAL_CAN_MspInit+0xc8>)
 8000930:	f002 f850 	bl	80029d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <HAL_CAN_MspInit+0xcc>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
 800093a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
 8000942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000944:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
 800094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <HAL_CAN_MspInit+0xcc>)
 8000954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000956:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2014      	movs	r0, #20
 800095e:	f002 f802 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000962:	2014      	movs	r0, #20
 8000964:	f002 f81b 	bl	800299e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	@ 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40006400 	.word	0x40006400
 8000974:	40021000 	.word	0x40021000
 8000978:	40010c00 	.word	0x40010c00
 800097c:	40010000 	.word	0x40010000

08000980 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a23      	ldr	r2, [pc, #140]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0310 	and.w	r3, r3, #16
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a11      	ldr	r2, [pc, #68]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin_Pin|CE_Pin_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f240 1101 	movw	r1, #257	@ 0x101
 80009fa:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <MX_GPIO_Init+0xac>)
 80009fc:	f002 f96e 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin_Pin CE_Pin_Pin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin|CE_Pin_Pin;
 8000a00:	f240 1301 	movw	r3, #257	@ 0x101
 8000a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	4619      	mov	r1, r3
 8000a18:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <MX_GPIO_Init+0xac>)
 8000a1a:	f001 ffdb 	bl	80029d4 <HAL_GPIO_Init>

}
 8000a1e:	bf00      	nop
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010800 	.word	0x40010800

08000a30 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000a38:	1d39      	adds	r1, r7, #4
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4803      	ldr	r0, [pc, #12]	@ (8000a50 <__io_putchar+0x20>)
 8000a42:	f003 fb5b 	bl	80040fc <HAL_UART_Transmit>
    return ch;
 8000a46:	687b      	ldr	r3, [r7, #4]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000180 	.word	0x20000180

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	@ 0x38
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5a:	f000 fbf1 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5e:	f000 f873 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a62:	f7ff ff8d 	bl	8000980 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a66:	f000 f93f 	bl	8000ce8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000a6a:	f000 fb4f 	bl	800110c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a6e:	f7ff fe67 	bl	8000740 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a72:	f000 fadb 	bl	800102c <MX_TIM2_Init>
  MX_CAN_Init();
 8000a76:	f7ff fee5 	bl	8000844 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef can_filter;
  can_filter.FilterBank = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61fb      	str	r3, [r7, #28]
  can_filter.FilterIdHigh = 0x0000;
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
  can_filter.FilterIdLow = 0x0000;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  can_filter.FilterMaskIdHigh = 0x0000;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  can_filter.FilterMaskIdLow = 0x0000;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  can_filter.FilterActivation = ENABLE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  if (HAL_CAN_ConfigFilter(&hcan, &can_filter) != HAL_OK) {
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4824      	ldr	r0, [pc, #144]	@ (8000b34 <main+0xe0>)
 8000aa4:	f001 fa7f 	bl	8001fa6 <HAL_CAN_ConfigFilter>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <main+0x5e>
      Error_Handler();
 8000aae:	f000 f915 	bl	8000cdc <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000ab2:	4820      	ldr	r0, [pc, #128]	@ (8000b34 <main+0xe0>)
 8000ab4:	f001 fb40 	bl	8002138 <HAL_CAN_Start>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <main+0x6e>
      Error_Handler();
 8000abe:	f000 f90d 	bl	8000cdc <Error_Handler>
  }

  // ★★★ HAL_ADC_Start(&hadc1); 이 라인을 여기서 제거합니다! ★★★

  printf("System Initialized. Starting ADC polling...\r\n");
 8000ac2:	481d      	ldr	r0, [pc, #116]	@ (8000b38 <main+0xe4>)
 8000ac4:	f003 fe06 	bl	80046d4 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // 1) ADC 한 번 읽기
	  HAL_ADC_Start(&hadc1);
 8000ac8:	481c      	ldr	r0, [pc, #112]	@ (8000b3c <main+0xe8>)
 8000aca:	f000 fd17 	bl	80014fc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000ace:	2164      	movs	r1, #100	@ 0x64
 8000ad0:	481a      	ldr	r0, [pc, #104]	@ (8000b3c <main+0xe8>)
 8000ad2:	f000 fded 	bl	80016b0 <HAL_ADC_PollForConversion>
	  uint16_t rawX = HAL_ADC_GetValue(&hadc1);
 8000ad6:	4819      	ldr	r0, [pc, #100]	@ (8000b3c <main+0xe8>)
 8000ad8:	f000 fef0 	bl	80018bc <HAL_ADC_GetValue>
 8000adc:	4603      	mov	r3, r0
 8000ade:	867b      	strh	r3, [r7, #50]	@ 0x32
	  HAL_ADC_Stop(&hadc1);
 8000ae0:	4816      	ldr	r0, [pc, #88]	@ (8000b3c <main+0xe8>)
 8000ae2:	f000 fdb9 	bl	8001658 <HAL_ADC_Stop>

	  // 2) -1.0~1.0 정규화 (데드존 포함)
	  float vx = NormalizeADC((int16_t)rawX);
 8000ae6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f888 	bl	8000c00 <NormalizeADC>
 8000af0:	62f8      	str	r0, [r7, #44]	@ 0x2c

	  // 3) ERPM 변환 + 최소치 차단
	  float erpm_f = vx * MAX_ERPM;
 8000af2:	4913      	ldr	r1, [pc, #76]	@ (8000b40 <main+0xec>)
 8000af4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000af6:	f7ff fc37 	bl	8000368 <__aeabi_fmul>
 8000afa:	4603      	mov	r3, r0
 8000afc:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (fabsf(erpm_f) < ERPM_MIN_ABS) erpm_f = 0.0f;
 8000afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b04:	490f      	ldr	r1, [pc, #60]	@ (8000b44 <main+0xf0>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fdcc 	bl	80006a4 <__aeabi_fcmplt>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <main+0xc4>
 8000b12:	f04f 0300 	mov.w	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
	  int32_t erpm_cmd = (int32_t)erpm_f;
 8000b18:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000b1a:	f7ff fdeb 	bl	80006f4 <__aeabi_f2iz>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28

	  // 4) CAN 전송
	  CAN_SetERPM(1, erpm_cmd);
 8000b22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b24:	2001      	movs	r0, #1
 8000b26:	f000 f8a3 	bl	8000c70 <CAN_SetERPM>

	  // 5) 디버그
	//  printf("RAW:%4u  vx:% .3f  ERPM:%ld\r\n", rawX, vx, erpm_cmd);

	  // 6) 50 Hz 주기
	  HAL_Delay(20);
 8000b2a:	2014      	movs	r0, #20
 8000b2c:	f000 fbea 	bl	8001304 <HAL_Delay>
  {
 8000b30:	e7ca      	b.n	8000ac8 <main+0x74>
 8000b32:	bf00      	nop
 8000b34:	200000b4 	.word	0x200000b4
 8000b38:	08004e08 	.word	0x08004e08
 8000b3c:	20000084 	.word	0x20000084
 8000b40:	461c4000 	.word	0x461c4000
 8000b44:	44480000 	.word	0x44480000

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b094      	sub	sp, #80	@ 0x50
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b52:	2228      	movs	r2, #40	@ 0x28
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f003 fe9c 	bl	8004894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b7c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b86:	2301      	movs	r3, #1
 8000b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b94:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 f8b4 	bl	8002d0c <HAL_RCC_OscConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000baa:	f000 f897 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bae:	230f      	movs	r3, #15
 8000bb0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 fb20 	bl	8003210 <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bd6:	f000 f881 	bl	8000cdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000be2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 fca0 	bl	800352c <HAL_RCCEx_PeriphCLKConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bf2:	f000 f873 	bl	8000cdc <Error_Handler>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3750      	adds	r7, #80	@ 0x50
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <NormalizeADC>:

/* USER CODE BEGIN 4 */
// --- nRF24 관련 함수(EXTI 콜백, nrf24_irq_service 등) 모두 제거 ---

float NormalizeADC(int16_t raw) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
    int16_t delta = raw - ADC_NEU;
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	81fb      	strh	r3, [r7, #14]
    if (abs(delta) < ADC_DEAD_ZONE) return 0.0f;
 8000c14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bfb8      	it	lt
 8000c1c:	425b      	neglt	r3, r3
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000c24:	d202      	bcs.n	8000c2c <NormalizeADC+0x2c>
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	e01b      	b.n	8000c64 <NormalizeADC+0x64>

    if (delta > 0) {
 8000c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	dd0b      	ble.n	8000c4c <NormalizeADC+0x4c>
        return (float)delta / (float)(ADC_MAX - ADC_NEU);
 8000c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fb41 	bl	80002c0 <__aeabi_i2f>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	490a      	ldr	r1, [pc, #40]	@ (8000c6c <NormalizeADC+0x6c>)
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fc44 	bl	80004d0 <__aeabi_fdiv>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	e00b      	b.n	8000c64 <NormalizeADC+0x64>
    } else {
        return (float)delta / (float)(ADC_NEU - ADC_MIN);
 8000c4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fb35 	bl	80002c0 <__aeabi_i2f>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fc37 	bl	80004d0 <__aeabi_fdiv>
 8000c62:	4603      	mov	r3, r0
    }
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	44ffe000 	.word	0x44ffe000

08000c70 <CAN_SetERPM>:

// VESC에 SET_RPM 보내기
void CAN_SetERPM(uint8_t vesc_id, int32_t erpm) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	@ 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef tx_header;
    uint8_t tx_data[4];
    uint32_t can_mailbox;

    tx_header.IDE = CAN_ID_EXT;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	61bb      	str	r3, [r7, #24]
    tx_header.ExtId = (0x00000300 | vesc_id); // CAN_PACKET_SET_RPM
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000c86:	617b      	str	r3, [r7, #20]
    tx_header.RTR = CAN_RTR_DATA;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
    tx_header.DLC = 4;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	623b      	str	r3, [r7, #32]

    tx_data[0] = (erpm >> 24) & 0xFF;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	0e1b      	lsrs	r3, r3, #24
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	733b      	strb	r3, [r7, #12]
    tx_data[1] = (erpm >> 16) & 0xFF;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	141b      	asrs	r3, r3, #16
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	737b      	strb	r3, [r7, #13]
    tx_data[2] = (erpm >> 8)  & 0xFF;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	121b      	asrs	r3, r3, #8
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	73bb      	strb	r3, [r7, #14]
    tx_data[3] =  erpm        & 0xFF;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	73fb      	strb	r3, [r7, #15]

    if (HAL_CAN_AddTxMessage(&hcan, &tx_header, tx_data, &can_mailbox) != HAL_OK) {
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	f107 020c 	add.w	r2, r7, #12
 8000cb6:	f107 0110 	add.w	r1, r7, #16
 8000cba:	4806      	ldr	r0, [pc, #24]	@ (8000cd4 <CAN_SetERPM+0x64>)
 8000cbc:	f001 fa80 	bl	80021c0 <HAL_CAN_AddTxMessage>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <CAN_SetERPM+0x5c>
        printf("CAN TX FAILED\r\n");
 8000cc6:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <CAN_SetERPM+0x68>)
 8000cc8:	f003 fd04 	bl	80046d4 <puts>
    }
}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	@ 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000b4 	.word	0x200000b4
 8000cd8:	08004e38 	.word	0x08004e38

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <Error_Handler+0x8>

08000ce8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000cee:	4a18      	ldr	r2, [pc, #96]	@ (8000d50 <MX_SPI1_Init+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000cf4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cf8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000d14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000d1c:	2218      	movs	r2, #24
 8000d1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000d34:	220a      	movs	r2, #10
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_SPI1_Init+0x64>)
 8000d3a:	f002 fd63 	bl	8003804 <HAL_SPI_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d44:	f7ff ffca 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200000dc 	.word	0x200000dc
 8000d50:	40013000 	.word	0x40013000

08000d54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <HAL_SPI_MspInit+0x88>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d12f      	bne.n	8000dd4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d74:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <HAL_SPI_MspInit+0x8c>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a19      	ldr	r2, [pc, #100]	@ (8000de0 <HAL_SPI_MspInit+0x8c>)
 8000d7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <HAL_SPI_MspInit+0x8c>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <HAL_SPI_MspInit+0x8c>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a13      	ldr	r2, [pc, #76]	@ (8000de0 <HAL_SPI_MspInit+0x8c>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <HAL_SPI_MspInit+0x8c>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000da4:	23a0      	movs	r3, #160	@ 0xa0
 8000da6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	4619      	mov	r1, r3
 8000db6:	480b      	ldr	r0, [pc, #44]	@ (8000de4 <HAL_SPI_MspInit+0x90>)
 8000db8:	f001 fe0c 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dbc:	2340      	movs	r3, #64	@ 0x40
 8000dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <HAL_SPI_MspInit+0x90>)
 8000dd0:	f001 fe00 	bl	80029d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40013000 	.word	0x40013000
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010800 	.word	0x40010800

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	4a14      	ldr	r2, [pc, #80]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6193      	str	r3, [r2, #24]
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e10:	61d3      	str	r3, [r2, #28]
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <HAL_MspInit+0x5c>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <HAL_MspInit+0x60>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <HAL_MspInit+0x60>)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <NMI_Handler+0x4>

08000e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <MemManage_Handler+0x4>

08000e64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 fa16 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <ADC1_2_IRQHandler+0x10>)
 8000eaa:	f000 fd13 	bl	80018d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000084 	.word	0x20000084

08000eb8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ebe:	f001 fa4e 	bl	800235e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000b4 	.word	0x200000b4

08000ecc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <TIM2_IRQHandler+0x10>)
 8000ed2:	f002 fd6a 	bl	80039aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000138 	.word	0x20000138

08000ee0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00a      	b.n	8000f08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ef2:	f3af 8000 	nop.w
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf0      	blt.n	8000ef2 <_read+0x12>
  }

  return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	e009      	b.n	8000f40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fd7b 	bl	8000a30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dbf1      	blt.n	8000f2c <_write+0x12>
  }
  return len;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_close>:

int _close(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f78:	605a      	str	r2, [r3, #4]
  return 0;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <_isatty>:

int _isatty(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
	...

08000fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fbc:	4a14      	ldr	r2, [pc, #80]	@ (8001010 <_sbrk+0x5c>)
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <_sbrk+0x60>)
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <_sbrk+0x64>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	@ (800101c <_sbrk+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d207      	bcs.n	8000ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe4:	f003 fca4 	bl	8004930 <__errno>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	220c      	movs	r2, #12
 8000fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e009      	b.n	8001008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	4a05      	ldr	r2, [pc, #20]	@ (8001018 <_sbrk+0x64>)
 8001004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20005000 	.word	0x20005000
 8001014:	00000400 	.word	0x00000400
 8001018:	20000134 	.word	0x20000134
 800101c:	20000318 	.word	0x20000318

08001020 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	463b      	mov	r3, r7
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001048:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <MX_TIM2_Init+0x94>)
 800104a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800104e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <MX_TIM2_Init+0x94>)
 8001052:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001056:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <MX_TIM2_Init+0x94>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <MX_TIM2_Init+0x94>)
 8001060:	22c7      	movs	r2, #199	@ 0xc7
 8001062:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <MX_TIM2_Init+0x94>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <MX_TIM2_Init+0x94>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001070:	4813      	ldr	r0, [pc, #76]	@ (80010c0 <MX_TIM2_Init+0x94>)
 8001072:	f002 fc4b 	bl	800390c <HAL_TIM_Base_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800107c:	f7ff fe2e 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001084:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	4619      	mov	r1, r3
 800108c:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <MX_TIM2_Init+0x94>)
 800108e:	f002 fd7c 	bl	8003b8a <HAL_TIM_ConfigClockSource>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001098:	f7ff fe20 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <MX_TIM2_Init+0x94>)
 80010aa:	f002 ff67 	bl	8003f7c <HAL_TIMEx_MasterConfigSynchronization>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010b4:	f7ff fe12 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000138 	.word	0x20000138

080010c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010d4:	d113      	bne.n	80010fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <HAL_TIM_Base_MspInit+0x44>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <HAL_TIM_Base_MspInit+0x44>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <HAL_TIM_Base_MspInit+0x44>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	201c      	movs	r0, #28
 80010f4:	f001 fc37 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f8:	201c      	movs	r0, #28
 80010fa:	f001 fc50 	bl	800299e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_USART2_UART_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	@ (800115c <MX_USART2_UART_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <MX_USART2_UART_Init+0x4c>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_USART2_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_USART2_UART_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_USART2_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_USART2_UART_Init+0x4c>)
 8001144:	f002 ff8a 	bl	800405c <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800114e:	f7ff fdc5 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000180 	.word	0x20000180
 800115c:	40004400 	.word	0x40004400

08001160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1b      	ldr	r2, [pc, #108]	@ (80011e8 <HAL_UART_MspInit+0x88>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d12f      	bne.n	80011e0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <HAL_UART_MspInit+0x8c>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	4a19      	ldr	r2, [pc, #100]	@ (80011ec <HAL_UART_MspInit+0x8c>)
 8001186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118a:	61d3      	str	r3, [r2, #28]
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <HAL_UART_MspInit+0x8c>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <HAL_UART_MspInit+0x8c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a13      	ldr	r2, [pc, #76]	@ (80011ec <HAL_UART_MspInit+0x8c>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <HAL_UART_MspInit+0x8c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011b0:	2304      	movs	r3, #4
 80011b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	480b      	ldr	r0, [pc, #44]	@ (80011f0 <HAL_UART_MspInit+0x90>)
 80011c4:	f001 fc06 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011c8:	2308      	movs	r3, #8
 80011ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <HAL_UART_MspInit+0x90>)
 80011dc:	f001 fbfa 	bl	80029d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40004400 	.word	0x40004400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010800 	.word	0x40010800

080011f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f4:	f7ff ff14 	bl	8001020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480b      	ldr	r0, [pc, #44]	@ (8001228 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011fa:	490c      	ldr	r1, [pc, #48]	@ (800122c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001230 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a09      	ldr	r2, [pc, #36]	@ (8001234 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001210:	4c09      	ldr	r4, [pc, #36]	@ (8001238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121e:	f003 fb8d 	bl	800493c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001222:	f7ff fc17 	bl	8000a54 <main>
  bx lr
 8001226:	4770      	bx	lr
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001230:	08004e90 	.word	0x08004e90
  ldr r2, =_sbss
 8001234:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001238:	20000318 	.word	0x20000318

0800123c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800123c:	e7fe      	b.n	800123c <CAN1_RX1_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_Init+0x28>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	@ (8001268 <HAL_Init+0x28>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f001 fb7d 	bl	8002950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fdc4 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40022000 	.word	0x40022000

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fb95 	bl	80029ba <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f001 fb5d 	bl	8002966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_IncTick+0x1c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_IncTick+0x20>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a03      	ldr	r2, [pc, #12]	@ (80012ec <HAL_IncTick+0x20>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000008 	.word	0x20000008
 80012ec:	200001c8 	.word	0x200001c8

080012f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b02      	ldr	r3, [pc, #8]	@ (8001300 <HAL_GetTick+0x10>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	200001c8 	.word	0x200001c8

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff fff0 	bl	80012f0 <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffe0 	bl	80012f0 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000008 	.word	0x20000008

0800134c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e0be      	b.n	80014ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fa16 	bl	80007bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 fcc3 	bl	8001d1c <ADC_ConversionStop_Disable>
 8001396:	4603      	mov	r3, r0
 8001398:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 8099 	bne.w	80014da <HAL_ADC_Init+0x18e>
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 8095 	bne.w	80014da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013b8:	f023 0302 	bic.w	r3, r3, #2
 80013bc:	f043 0202 	orr.w	r2, r3, #2
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7b1b      	ldrb	r3, [r3, #12]
 80013d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	4313      	orrs	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013e4:	d003      	beq.n	80013ee <HAL_ADC_Init+0xa2>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d102      	bne.n	80013f4 <HAL_ADC_Init+0xa8>
 80013ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f2:	e000      	b.n	80013f6 <HAL_ADC_Init+0xaa>
 80013f4:	2300      	movs	r3, #0
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7d1b      	ldrb	r3, [r3, #20]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d119      	bne.n	8001438 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7b1b      	ldrb	r3, [r3, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d109      	bne.n	8001420 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	3b01      	subs	r3, #1
 8001412:	035a      	lsls	r2, r3, #13
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	e00b      	b.n	8001438 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001424:	f043 0220 	orr.w	r2, r3, #32
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001430:	f043 0201 	orr.w	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <HAL_ADC_Init+0x1a8>)
 8001454:	4013      	ands	r3, r2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	430b      	orrs	r3, r1
 800145e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001468:	d003      	beq.n	8001472 <HAL_ADC_Init+0x126>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d104      	bne.n	800147c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	3b01      	subs	r3, #1
 8001478:	051b      	lsls	r3, r3, #20
 800147a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001482:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	430a      	orrs	r2, r1
 800148e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <HAL_ADC_Init+0x1ac>)
 8001498:	4013      	ands	r3, r2
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	429a      	cmp	r2, r3
 800149e:	d10b      	bne.n	80014b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014aa:	f023 0303 	bic.w	r3, r3, #3
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014b6:	e018      	b.n	80014ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014bc:	f023 0312 	bic.w	r3, r3, #18
 80014c0:	f043 0210 	orr.w	r2, r3, #16
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014cc:	f043 0201 	orr.w	r2, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014d8:	e007      	b.n	80014ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014de:	f043 0210 	orr.w	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	ffe1f7fd 	.word	0xffe1f7fd
 80014f8:	ff1f0efe 	.word	0xff1f0efe

080014fc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ADC_Start+0x1a>
 8001512:	2302      	movs	r3, #2
 8001514:	e098      	b.n	8001648 <HAL_ADC_Start+0x14c>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fba2 	bl	8001c68 <ADC_Enable>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f040 8087 	bne.w	800163e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a41      	ldr	r2, [pc, #260]	@ (8001650 <HAL_ADC_Start+0x154>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d105      	bne.n	800155a <HAL_ADC_Start+0x5e>
 800154e:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <HAL_ADC_Start+0x158>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d115      	bne.n	8001586 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d026      	beq.n	80015c2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001578:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800157c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001584:	e01d      	b.n	80015c2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a2f      	ldr	r2, [pc, #188]	@ (8001654 <HAL_ADC_Start+0x158>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d004      	beq.n	80015a6 <HAL_ADC_Start+0xaa>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001650 <HAL_ADC_Start+0x154>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d10d      	bne.n	80015c2 <HAL_ADC_Start+0xc6>
 80015a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001654 <HAL_ADC_Start+0x158>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d007      	beq.n	80015c2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d2:	f023 0206 	bic.w	r2, r3, #6
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015da:	e002      	b.n	80015e2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f06f 0202 	mvn.w	r2, #2
 80015f2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015fe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001602:	d113      	bne.n	800162c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001608:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <HAL_ADC_Start+0x154>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d105      	bne.n	800161a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_ADC_Start+0x158>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	e00c      	b.n	8001646 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e003      	b.n	8001646 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40012800 	.word	0x40012800
 8001654:	40012400 	.word	0x40012400

08001658 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Stop+0x1a>
 800166e:	2302      	movs	r3, #2
 8001670:	e01a      	b.n	80016a8 <HAL_ADC_Stop+0x50>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fb4e 	bl	8001d1c <ADC_ConversionStop_Disable>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80016c6:	f7ff fe13 	bl	80012f0 <HAL_GetTick>
 80016ca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016de:	f043 0220 	orr.w	r2, r3, #32
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0d3      	b.n	800189a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d131      	bne.n	8001764 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001706:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800170a:	2b00      	cmp	r3, #0
 800170c:	d12a      	bne.n	8001764 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800170e:	e021      	b.n	8001754 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001716:	d01d      	beq.n	8001754 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_ADC_PollForConversion+0x7e>
 800171e:	f7ff fde7 	bl	80012f0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d212      	bcs.n	8001754 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10b      	bne.n	8001754 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001740:	f043 0204 	orr.w	r2, r3, #4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0a2      	b.n	800189a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0d6      	beq.n	8001710 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001762:	e070      	b.n	8001846 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001764:	4b4f      	ldr	r3, [pc, #316]	@ (80018a4 <HAL_ADC_PollForConversion+0x1f4>)
 8001766:	681c      	ldr	r4, [r3, #0]
 8001768:	2002      	movs	r0, #2
 800176a:	f001 ff95 	bl	8003698 <HAL_RCCEx_GetPeriphCLKFreq>
 800176e:	4603      	mov	r3, r0
 8001770:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6919      	ldr	r1, [r3, #16]
 800177a:	4b4b      	ldr	r3, [pc, #300]	@ (80018a8 <HAL_ADC_PollForConversion+0x1f8>)
 800177c:	400b      	ands	r3, r1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d118      	bne.n	80017b4 <HAL_ADC_PollForConversion+0x104>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68d9      	ldr	r1, [r3, #12]
 8001788:	4b48      	ldr	r3, [pc, #288]	@ (80018ac <HAL_ADC_PollForConversion+0x1fc>)
 800178a:	400b      	ands	r3, r1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d111      	bne.n	80017b4 <HAL_ADC_PollForConversion+0x104>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6919      	ldr	r1, [r3, #16]
 8001796:	4b46      	ldr	r3, [pc, #280]	@ (80018b0 <HAL_ADC_PollForConversion+0x200>)
 8001798:	400b      	ands	r3, r1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d108      	bne.n	80017b0 <HAL_ADC_PollForConversion+0x100>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68d9      	ldr	r1, [r3, #12]
 80017a4:	4b43      	ldr	r3, [pc, #268]	@ (80018b4 <HAL_ADC_PollForConversion+0x204>)
 80017a6:	400b      	ands	r3, r1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_ADC_PollForConversion+0x100>
 80017ac:	2314      	movs	r3, #20
 80017ae:	e020      	b.n	80017f2 <HAL_ADC_PollForConversion+0x142>
 80017b0:	2329      	movs	r3, #41	@ 0x29
 80017b2:	e01e      	b.n	80017f2 <HAL_ADC_PollForConversion+0x142>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6919      	ldr	r1, [r3, #16]
 80017ba:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_ADC_PollForConversion+0x200>)
 80017bc:	400b      	ands	r3, r1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <HAL_ADC_PollForConversion+0x120>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68d9      	ldr	r1, [r3, #12]
 80017c8:	4b3a      	ldr	r3, [pc, #232]	@ (80018b4 <HAL_ADC_PollForConversion+0x204>)
 80017ca:	400b      	ands	r3, r1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00d      	beq.n	80017ec <HAL_ADC_PollForConversion+0x13c>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6919      	ldr	r1, [r3, #16]
 80017d6:	4b38      	ldr	r3, [pc, #224]	@ (80018b8 <HAL_ADC_PollForConversion+0x208>)
 80017d8:	400b      	ands	r3, r1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d108      	bne.n	80017f0 <HAL_ADC_PollForConversion+0x140>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68d9      	ldr	r1, [r3, #12]
 80017e4:	4b34      	ldr	r3, [pc, #208]	@ (80018b8 <HAL_ADC_PollForConversion+0x208>)
 80017e6:	400b      	ands	r3, r1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_PollForConversion+0x140>
 80017ec:	2354      	movs	r3, #84	@ 0x54
 80017ee:	e000      	b.n	80017f2 <HAL_ADC_PollForConversion+0x142>
 80017f0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017f8:	e021      	b.n	800183e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d01a      	beq.n	8001838 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d007      	beq.n	8001818 <HAL_ADC_PollForConversion+0x168>
 8001808:	f7ff fd72 	bl	80012f0 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d20f      	bcs.n	8001838 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	429a      	cmp	r2, r3
 800181e:	d90b      	bls.n	8001838 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001824:	f043 0204 	orr.w	r2, r3, #4
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e030      	b.n	800189a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	429a      	cmp	r2, r3
 8001844:	d8d9      	bhi.n	80017fa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f06f 0212 	mvn.w	r2, #18
 800184e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001866:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800186a:	d115      	bne.n	8001898 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001870:	2b00      	cmp	r3, #0
 8001872:	d111      	bne.n	8001898 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001878:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000000 	.word	0x20000000
 80018a8:	24924924 	.word	0x24924924
 80018ac:	00924924 	.word	0x00924924
 80018b0:	12492492 	.word	0x12492492
 80018b4:	00492492 	.word	0x00492492
 80018b8:	00249249 	.word	0x00249249

080018bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d03e      	beq.n	8001974 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d039      	beq.n	8001974 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001910:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001922:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001926:	d11d      	bne.n	8001964 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800192c:	2b00      	cmp	r3, #0
 800192e:	d119      	bne.n	8001964 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0220 	bic.w	r2, r2, #32
 800193e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001944:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f874 	bl	8001a52 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f06f 0212 	mvn.w	r2, #18
 8001972:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800197a:	2b00      	cmp	r3, #0
 800197c:	d04d      	beq.n	8001a1a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d048      	beq.n	8001a1a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001998:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80019aa:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80019ae:	d012      	beq.n	80019d6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d125      	bne.n	8001a0a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019c8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019cc:	d11d      	bne.n	8001a0a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d119      	bne.n	8001a0a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019e4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a02:	f043 0201 	orr.w	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f9c7 	bl	8001d9e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 020c 	mvn.w	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d012      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00d      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f812 	bl	8001a64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f06f 0201 	mvn.w	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x20>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e0dc      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1da>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b06      	cmp	r3, #6
 8001aa6:	d81c      	bhi.n	8001ae2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3b05      	subs	r3, #5
 8001aba:	221f      	movs	r2, #31
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4019      	ands	r1, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b05      	subs	r3, #5
 8001ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ae0:	e03c      	b.n	8001b5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d81c      	bhi.n	8001b24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3b23      	subs	r3, #35	@ 0x23
 8001afc:	221f      	movs	r2, #31
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4019      	ands	r1, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	3b23      	subs	r3, #35	@ 0x23
 8001b16:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b22:	e01b      	b.n	8001b5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	3b41      	subs	r3, #65	@ 0x41
 8001b36:	221f      	movs	r2, #31
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	4019      	ands	r1, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3b41      	subs	r3, #65	@ 0x41
 8001b50:	fa00 f203 	lsl.w	r2, r0, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b09      	cmp	r3, #9
 8001b62:	d91c      	bls.n	8001b9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68d9      	ldr	r1, [r3, #12]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	3b1e      	subs	r3, #30
 8001b76:	2207      	movs	r2, #7
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	4019      	ands	r1, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	6898      	ldr	r0, [r3, #8]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3b1e      	subs	r3, #30
 8001b90:	fa00 f203 	lsl.w	r2, r0, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	e019      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6919      	ldr	r1, [r3, #16]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	2207      	movs	r2, #7
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	4019      	ands	r1, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6898      	ldr	r0, [r3, #8]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d003      	beq.n	8001be2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bde:	2b11      	cmp	r3, #17
 8001be0:	d132      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c5c <HAL_ADC_ConfigChannel+0x1e4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d125      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d126      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b10      	cmp	r3, #16
 8001c10:	d11a      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a13      	ldr	r2, [pc, #76]	@ (8001c64 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	0c9a      	lsrs	r2, r3, #18
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c28:	e002      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f9      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x1b2>
 8001c36:	e007      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40012400 	.word	0x40012400
 8001c60:	20000000 	.word	0x20000000
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d040      	beq.n	8001d08 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0201 	orr.w	r2, r2, #1
 8001c94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c96:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <ADC_Enable+0xac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d18 <ADC_Enable+0xb0>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	0c9b      	lsrs	r3, r3, #18
 8001ca2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ca4:	e002      	b.n	8001cac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f9      	bne.n	8001ca6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cb2:	f7ff fb1d 	bl	80012f0 <HAL_GetTick>
 8001cb6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cb8:	e01f      	b.n	8001cfa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cba:	f7ff fb19 	bl	80012f0 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d918      	bls.n	8001cfa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d011      	beq.n	8001cfa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e007      	b.n	8001d0a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d1d8      	bne.n	8001cba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000
 8001d18:	431bde83 	.word	0x431bde83

08001d1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d12e      	bne.n	8001d94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d46:	f7ff fad3 	bl	80012f0 <HAL_GetTick>
 8001d4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d4c:	e01b      	b.n	8001d86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d4e:	f7ff facf 	bl	80012f0 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d914      	bls.n	8001d86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d10d      	bne.n	8001d86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6e:	f043 0210 	orr.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e007      	b.n	8001d96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d0dc      	beq.n	8001d4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0ed      	b.n	8001f9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe fd6e 	bl	80008b0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de4:	f7ff fa84 	bl	80012f0 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dea:	e012      	b.n	8001e12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dec:	f7ff fa80 	bl	80012f0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b0a      	cmp	r3, #10
 8001df8:	d90b      	bls.n	8001e12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2205      	movs	r2, #5
 8001e0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0c5      	b.n	8001f9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0e5      	beq.n	8001dec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0202 	bic.w	r2, r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e30:	f7ff fa5e 	bl	80012f0 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e36:	e012      	b.n	8001e5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e38:	f7ff fa5a 	bl	80012f0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b0a      	cmp	r3, #10
 8001e44:	d90b      	bls.n	8001e5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2205      	movs	r2, #5
 8001e56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e09f      	b.n	8001f9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e5      	bne.n	8001e38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7e1b      	ldrb	r3, [r3, #24]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d108      	bne.n	8001e86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e007      	b.n	8001e96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7e5b      	ldrb	r3, [r3, #25]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d108      	bne.n	8001eb0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e007      	b.n	8001ec0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7e9b      	ldrb	r3, [r3, #26]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d108      	bne.n	8001eda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0220 	orr.w	r2, r2, #32
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e007      	b.n	8001eea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0220 	bic.w	r2, r2, #32
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7edb      	ldrb	r3, [r3, #27]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d108      	bne.n	8001f04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0210 	bic.w	r2, r2, #16
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e007      	b.n	8001f14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0210 	orr.w	r2, r2, #16
 8001f12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	7f1b      	ldrb	r3, [r3, #28]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d108      	bne.n	8001f2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0208 	orr.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e007      	b.n	8001f3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0208 	bic.w	r2, r2, #8
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7f5b      	ldrb	r3, [r3, #29]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d108      	bne.n	8001f58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0204 	orr.w	r2, r2, #4
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e007      	b.n	8001f68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0204 	bic.w	r2, r2, #4
 8001f66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	ea42 0103 	orr.w	r1, r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	1e5a      	subs	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b087      	sub	sp, #28
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fbc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d003      	beq.n	8001fcc <HAL_CAN_ConfigFilter+0x26>
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	f040 80aa 	bne.w	8002120 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d123      	bne.n	800204e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43db      	mvns	r3, r3
 8002010:	401a      	ands	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002028:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	3248      	adds	r2, #72	@ 0x48
 800202e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002042:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002044:	6979      	ldr	r1, [r7, #20]
 8002046:	3348      	adds	r3, #72	@ 0x48
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d122      	bne.n	800209c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	431a      	orrs	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002076:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3248      	adds	r2, #72	@ 0x48
 800207c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002090:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002092:	6979      	ldr	r1, [r7, #20]
 8002094:	3348      	adds	r3, #72	@ 0x48
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80020b6:	e007      	b.n	80020c8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43db      	mvns	r3, r3
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80020e2:	e007      	b.n	80020f4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	431a      	orrs	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002112:	f023 0201 	bic.w	r2, r3, #1
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e006      	b.n	800212e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d12e      	bne.n	80021aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002164:	f7ff f8c4 	bl	80012f0 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800216a:	e012      	b.n	8002192 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800216c:	f7ff f8c0 	bl	80012f0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b0a      	cmp	r3, #10
 8002178:	d90b      	bls.n	8002192 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2205      	movs	r2, #5
 800218a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e012      	b.n	80021b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1e5      	bne.n	800216c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e006      	b.n	80021b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
  }
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	@ 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80021de:	7ffb      	ldrb	r3, [r7, #31]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d003      	beq.n	80021ec <HAL_CAN_AddTxMessage+0x2c>
 80021e4:	7ffb      	ldrb	r3, [r7, #31]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	f040 80ad 	bne.w	8002346 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8095 	beq.w	8002336 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	0e1b      	lsrs	r3, r3, #24
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002216:	2201      	movs	r2, #1
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10d      	bne.n	8002244 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	6809      	ldr	r1, [r1, #0]
 8002236:	431a      	orrs	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3318      	adds	r3, #24
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	440b      	add	r3, r1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e00f      	b.n	8002264 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800224e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002258:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3318      	adds	r3, #24
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	440b      	add	r3, r1
 8002262:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	3318      	adds	r3, #24
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	440b      	add	r3, r1
 8002274:	3304      	adds	r3, #4
 8002276:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	7d1b      	ldrb	r3, [r3, #20]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d111      	bne.n	80022a4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3318      	adds	r3, #24
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	6811      	ldr	r1, [r2, #0]
 8002294:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3318      	adds	r3, #24
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	440b      	add	r3, r1
 80022a0:	3304      	adds	r3, #4
 80022a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3307      	adds	r3, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	061a      	lsls	r2, r3, #24
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3306      	adds	r3, #6
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3305      	adds	r3, #5
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	4313      	orrs	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	3204      	adds	r2, #4
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	4610      	mov	r0, r2
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	6811      	ldr	r1, [r2, #0]
 80022cc:	ea43 0200 	orr.w	r2, r3, r0
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	440b      	add	r3, r1
 80022d6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80022da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3303      	adds	r3, #3
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	061a      	lsls	r2, r3, #24
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3302      	adds	r3, #2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3301      	adds	r3, #1
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	4313      	orrs	r3, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	7812      	ldrb	r2, [r2, #0]
 80022fc:	4610      	mov	r0, r2
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	6811      	ldr	r1, [r2, #0]
 8002302:	ea43 0200 	orr.w	r2, r3, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	440b      	add	r3, r1
 800230c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002310:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3318      	adds	r3, #24
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	4413      	add	r3, r2
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	6811      	ldr	r1, [r2, #0]
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3318      	adds	r3, #24
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	440b      	add	r3, r1
 8002330:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e00e      	b.n	8002354 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e006      	b.n	8002354 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
  }
}
 8002354:	4618      	mov	r0, r3
 8002356:	3724      	adds	r7, #36	@ 0x24
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b08a      	sub	sp, #40	@ 0x28
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d07c      	beq.n	800249e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d023      	beq.n	80023f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2201      	movs	r2, #1
 80023b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f983 	bl	80026cc <HAL_CAN_TxMailbox0CompleteCallback>
 80023c6:	e016      	b.n	80023f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d004      	beq.n	80023dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023da:	e00c      	b.n	80023f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ee:	e002      	b.n	80023f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f986 	bl	8002702 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d024      	beq.n	800244a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002408:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f962 	bl	80026de <HAL_CAN_TxMailbox1CompleteCallback>
 800241a:	e016      	b.n	800244a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
 800242e:	e00c      	b.n	800244a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
 8002442:	e002      	b.n	800244a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f965 	bl	8002714 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d024      	beq.n	800249e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800245c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f941 	bl	80026f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800246e:	e016      	b.n	800249e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
 8002482:	e00c      	b.n	800249e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d004      	beq.n	8002498 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
 8002496:	e002      	b.n	800249e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f944 	bl	8002726 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2210      	movs	r2, #16
 80024c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2208      	movs	r2, #8
 80024dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f933 	bl	800274a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f91b 	bl	8002738 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00c      	beq.n	8002526 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2210      	movs	r2, #16
 8002524:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d006      	beq.n	8002548 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2208      	movs	r2, #8
 8002540:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f913 	bl	800276e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f8fb 	bl	800275c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2210      	movs	r2, #16
 8002580:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8fc 	bl	8002780 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2208      	movs	r2, #8
 80025a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f8f4 	bl	8002792 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d07b      	beq.n	80026ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d072      	beq.n	80026a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002618:	2b00      	cmp	r3, #0
 800261a:	d043      	beq.n	80026a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002622:	2b00      	cmp	r3, #0
 8002624:	d03e      	beq.n	80026a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800262c:	2b60      	cmp	r3, #96	@ 0x60
 800262e:	d02b      	beq.n	8002688 <HAL_CAN_IRQHandler+0x32a>
 8002630:	2b60      	cmp	r3, #96	@ 0x60
 8002632:	d82e      	bhi.n	8002692 <HAL_CAN_IRQHandler+0x334>
 8002634:	2b50      	cmp	r3, #80	@ 0x50
 8002636:	d022      	beq.n	800267e <HAL_CAN_IRQHandler+0x320>
 8002638:	2b50      	cmp	r3, #80	@ 0x50
 800263a:	d82a      	bhi.n	8002692 <HAL_CAN_IRQHandler+0x334>
 800263c:	2b40      	cmp	r3, #64	@ 0x40
 800263e:	d019      	beq.n	8002674 <HAL_CAN_IRQHandler+0x316>
 8002640:	2b40      	cmp	r3, #64	@ 0x40
 8002642:	d826      	bhi.n	8002692 <HAL_CAN_IRQHandler+0x334>
 8002644:	2b30      	cmp	r3, #48	@ 0x30
 8002646:	d010      	beq.n	800266a <HAL_CAN_IRQHandler+0x30c>
 8002648:	2b30      	cmp	r3, #48	@ 0x30
 800264a:	d822      	bhi.n	8002692 <HAL_CAN_IRQHandler+0x334>
 800264c:	2b10      	cmp	r3, #16
 800264e:	d002      	beq.n	8002656 <HAL_CAN_IRQHandler+0x2f8>
 8002650:	2b20      	cmp	r3, #32
 8002652:	d005      	beq.n	8002660 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002654:	e01d      	b.n	8002692 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	f043 0308 	orr.w	r3, r3, #8
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800265e:	e019      	b.n	8002694 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	f043 0310 	orr.w	r3, r3, #16
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002668:	e014      	b.n	8002694 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	f043 0320 	orr.w	r3, r3, #32
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002672:	e00f      	b.n	8002694 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800267c:	e00a      	b.n	8002694 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002686:	e005      	b.n	8002694 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002690:	e000      	b.n	8002694 <HAL_CAN_IRQHandler+0x336>
            break;
 8002692:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80026a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2204      	movs	r2, #4
 80026aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f870 	bl	80027a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80026c4:	bf00      	nop
 80026c6:	3728      	adds	r7, #40	@ 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
	...

080027b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c8:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ea:	4a04      	ldr	r2, [pc, #16]	@ (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	60d3      	str	r3, [r2, #12]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <__NVIC_GetPriorityGrouping+0x18>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	f003 0307 	and.w	r3, r3, #7
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	2b00      	cmp	r3, #0
 800282c:	db0b      	blt.n	8002846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f003 021f 	and.w	r2, r3, #31
 8002834:	4906      	ldr	r1, [pc, #24]	@ (8002850 <__NVIC_EnableIRQ+0x34>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2001      	movs	r0, #1
 800283e:	fa00 f202 	lsl.w	r2, r0, r2
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100

08002854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	2b00      	cmp	r3, #0
 8002866:	db0a      	blt.n	800287e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	490c      	ldr	r1, [pc, #48]	@ (80028a0 <__NVIC_SetPriority+0x4c>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	0112      	lsls	r2, r2, #4
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	440b      	add	r3, r1
 8002878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800287c:	e00a      	b.n	8002894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4908      	ldr	r1, [pc, #32]	@ (80028a4 <__NVIC_SetPriority+0x50>)
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	3b04      	subs	r3, #4
 800288c:	0112      	lsls	r2, r2, #4
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	440b      	add	r3, r1
 8002892:	761a      	strb	r2, [r3, #24]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000e100 	.word	0xe000e100
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	@ 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f1c3 0307 	rsb	r3, r3, #7
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	bf28      	it	cs
 80028c6:	2304      	movcs	r3, #4
 80028c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3304      	adds	r3, #4
 80028ce:	2b06      	cmp	r3, #6
 80028d0:	d902      	bls.n	80028d8 <NVIC_EncodePriority+0x30>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3b03      	subs	r3, #3
 80028d6:	e000      	b.n	80028da <NVIC_EncodePriority+0x32>
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	401a      	ands	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	43d9      	mvns	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	4313      	orrs	r3, r2
         );
}
 8002902:	4618      	mov	r0, r3
 8002904:	3724      	adds	r7, #36	@ 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800291c:	d301      	bcc.n	8002922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291e:	2301      	movs	r3, #1
 8002920:	e00f      	b.n	8002942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002922:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <SysTick_Config+0x40>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292a:	210f      	movs	r1, #15
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f7ff ff90 	bl	8002854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002934:	4b05      	ldr	r3, [pc, #20]	@ (800294c <SysTick_Config+0x40>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293a:	4b04      	ldr	r3, [pc, #16]	@ (800294c <SysTick_Config+0x40>)
 800293c:	2207      	movs	r2, #7
 800293e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	e000e010 	.word	0xe000e010

08002950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff2d 	bl	80027b8 <__NVIC_SetPriorityGrouping>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002978:	f7ff ff42 	bl	8002800 <__NVIC_GetPriorityGrouping>
 800297c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	6978      	ldr	r0, [r7, #20]
 8002984:	f7ff ff90 	bl	80028a8 <NVIC_EncodePriority>
 8002988:	4602      	mov	r2, r0
 800298a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff5f 	bl	8002854 <__NVIC_SetPriority>
}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff35 	bl	800281c <__NVIC_EnableIRQ>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ffa2 	bl	800290c <SysTick_Config>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b08b      	sub	sp, #44	@ 0x2c
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e6:	e169      	b.n	8002cbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029e8:	2201      	movs	r2, #1
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f040 8158 	bne.w	8002cb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a9a      	ldr	r2, [pc, #616]	@ (8002c74 <HAL_GPIO_Init+0x2a0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d05e      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
 8002a10:	4a98      	ldr	r2, [pc, #608]	@ (8002c74 <HAL_GPIO_Init+0x2a0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d875      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a16:	4a98      	ldr	r2, [pc, #608]	@ (8002c78 <HAL_GPIO_Init+0x2a4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d058      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
 8002a1c:	4a96      	ldr	r2, [pc, #600]	@ (8002c78 <HAL_GPIO_Init+0x2a4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d86f      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a22:	4a96      	ldr	r2, [pc, #600]	@ (8002c7c <HAL_GPIO_Init+0x2a8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d052      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
 8002a28:	4a94      	ldr	r2, [pc, #592]	@ (8002c7c <HAL_GPIO_Init+0x2a8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d869      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a2e:	4a94      	ldr	r2, [pc, #592]	@ (8002c80 <HAL_GPIO_Init+0x2ac>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d04c      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
 8002a34:	4a92      	ldr	r2, [pc, #584]	@ (8002c80 <HAL_GPIO_Init+0x2ac>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d863      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a3a:	4a92      	ldr	r2, [pc, #584]	@ (8002c84 <HAL_GPIO_Init+0x2b0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d046      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
 8002a40:	4a90      	ldr	r2, [pc, #576]	@ (8002c84 <HAL_GPIO_Init+0x2b0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d85d      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a46:	2b12      	cmp	r3, #18
 8002a48:	d82a      	bhi.n	8002aa0 <HAL_GPIO_Init+0xcc>
 8002a4a:	2b12      	cmp	r3, #18
 8002a4c:	d859      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a54 <HAL_GPIO_Init+0x80>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002acf 	.word	0x08002acf
 8002a58:	08002aa9 	.word	0x08002aa9
 8002a5c:	08002abb 	.word	0x08002abb
 8002a60:	08002afd 	.word	0x08002afd
 8002a64:	08002b03 	.word	0x08002b03
 8002a68:	08002b03 	.word	0x08002b03
 8002a6c:	08002b03 	.word	0x08002b03
 8002a70:	08002b03 	.word	0x08002b03
 8002a74:	08002b03 	.word	0x08002b03
 8002a78:	08002b03 	.word	0x08002b03
 8002a7c:	08002b03 	.word	0x08002b03
 8002a80:	08002b03 	.word	0x08002b03
 8002a84:	08002b03 	.word	0x08002b03
 8002a88:	08002b03 	.word	0x08002b03
 8002a8c:	08002b03 	.word	0x08002b03
 8002a90:	08002b03 	.word	0x08002b03
 8002a94:	08002b03 	.word	0x08002b03
 8002a98:	08002ab1 	.word	0x08002ab1
 8002a9c:	08002ac5 	.word	0x08002ac5
 8002aa0:	4a79      	ldr	r2, [pc, #484]	@ (8002c88 <HAL_GPIO_Init+0x2b4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d013      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aa6:	e02c      	b.n	8002b02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	623b      	str	r3, [r7, #32]
          break;
 8002aae:	e029      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	623b      	str	r3, [r7, #32]
          break;
 8002ab8:	e024      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	3308      	adds	r3, #8
 8002ac0:	623b      	str	r3, [r7, #32]
          break;
 8002ac2:	e01f      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	330c      	adds	r3, #12
 8002aca:	623b      	str	r3, [r7, #32]
          break;
 8002acc:	e01a      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	623b      	str	r3, [r7, #32]
          break;
 8002ada:	e013      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	611a      	str	r2, [r3, #16]
          break;
 8002aee:	e009      	b.n	8002b04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af0:	2308      	movs	r3, #8
 8002af2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	615a      	str	r2, [r3, #20]
          break;
 8002afa:	e003      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002afc:	2300      	movs	r3, #0
 8002afe:	623b      	str	r3, [r7, #32]
          break;
 8002b00:	e000      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          break;
 8002b02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2bff      	cmp	r3, #255	@ 0xff
 8002b08:	d801      	bhi.n	8002b0e <HAL_GPIO_Init+0x13a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	e001      	b.n	8002b12 <HAL_GPIO_Init+0x13e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2bff      	cmp	r3, #255	@ 0xff
 8002b18:	d802      	bhi.n	8002b20 <HAL_GPIO_Init+0x14c>
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	e002      	b.n	8002b26 <HAL_GPIO_Init+0x152>
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	3b08      	subs	r3, #8
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	210f      	movs	r1, #15
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	401a      	ands	r2, r3
 8002b38:	6a39      	ldr	r1, [r7, #32]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	431a      	orrs	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80b1 	beq.w	8002cb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b54:	4b4d      	ldr	r3, [pc, #308]	@ (8002c8c <HAL_GPIO_Init+0x2b8>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4a4c      	ldr	r2, [pc, #304]	@ (8002c8c <HAL_GPIO_Init+0x2b8>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6193      	str	r3, [r2, #24]
 8002b60:	4b4a      	ldr	r3, [pc, #296]	@ (8002c8c <HAL_GPIO_Init+0x2b8>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b6c:	4a48      	ldr	r2, [pc, #288]	@ (8002c90 <HAL_GPIO_Init+0x2bc>)
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3302      	adds	r3, #2
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	220f      	movs	r2, #15
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a40      	ldr	r2, [pc, #256]	@ (8002c94 <HAL_GPIO_Init+0x2c0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d013      	beq.n	8002bc0 <HAL_GPIO_Init+0x1ec>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c98 <HAL_GPIO_Init+0x2c4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00d      	beq.n	8002bbc <HAL_GPIO_Init+0x1e8>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8002c9c <HAL_GPIO_Init+0x2c8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d007      	beq.n	8002bb8 <HAL_GPIO_Init+0x1e4>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a3d      	ldr	r2, [pc, #244]	@ (8002ca0 <HAL_GPIO_Init+0x2cc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d101      	bne.n	8002bb4 <HAL_GPIO_Init+0x1e0>
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e006      	b.n	8002bc2 <HAL_GPIO_Init+0x1ee>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	e004      	b.n	8002bc2 <HAL_GPIO_Init+0x1ee>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e002      	b.n	8002bc2 <HAL_GPIO_Init+0x1ee>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_GPIO_Init+0x1ee>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc4:	f002 0203 	and.w	r2, r2, #3
 8002bc8:	0092      	lsls	r2, r2, #2
 8002bca:	4093      	lsls	r3, r2
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bd2:	492f      	ldr	r1, [pc, #188]	@ (8002c90 <HAL_GPIO_Init+0x2bc>)
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	492c      	ldr	r1, [pc, #176]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	4928      	ldr	r1, [pc, #160]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d006      	beq.n	8002c22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c14:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4922      	ldr	r1, [pc, #136]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60cb      	str	r3, [r1, #12]
 8002c20:	e006      	b.n	8002c30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c22:	4b20      	ldr	r3, [pc, #128]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	491e      	ldr	r1, [pc, #120]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d006      	beq.n	8002c4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	4918      	ldr	r1, [pc, #96]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	4914      	ldr	r1, [pc, #80]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d021      	beq.n	8002ca8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	490e      	ldr	r1, [pc, #56]	@ (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
 8002c70:	e021      	b.n	8002cb6 <HAL_GPIO_Init+0x2e2>
 8002c72:	bf00      	nop
 8002c74:	10320000 	.word	0x10320000
 8002c78:	10310000 	.word	0x10310000
 8002c7c:	10220000 	.word	0x10220000
 8002c80:	10210000 	.word	0x10210000
 8002c84:	10120000 	.word	0x10120000
 8002c88:	10110000 	.word	0x10110000
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40010800 	.word	0x40010800
 8002c98:	40010c00 	.word	0x40010c00
 8002c9c:	40011000 	.word	0x40011000
 8002ca0:	40011400 	.word	0x40011400
 8002ca4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_GPIO_Init+0x304>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	4909      	ldr	r1, [pc, #36]	@ (8002cd8 <HAL_GPIO_Init+0x304>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	3301      	adds	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f47f ae8e 	bne.w	80029e8 <HAL_GPIO_Init+0x14>
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	372c      	adds	r7, #44	@ 0x2c
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	40010400 	.word	0x40010400

08002cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cec:	787b      	ldrb	r3, [r7, #1]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cf2:	887a      	ldrh	r2, [r7, #2]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cf8:	e003      	b.n	8002d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	041a      	lsls	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e272      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8087 	beq.w	8002e3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d2c:	4b92      	ldr	r3, [pc, #584]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d00c      	beq.n	8002d52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d38:	4b8f      	ldr	r3, [pc, #572]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d112      	bne.n	8002d6a <HAL_RCC_OscConfig+0x5e>
 8002d44:	4b8c      	ldr	r3, [pc, #560]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d50:	d10b      	bne.n	8002d6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d52:	4b89      	ldr	r3, [pc, #548]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d06c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x12c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d168      	bne.n	8002e38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e24c      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x76>
 8002d74:	4b80      	ldr	r3, [pc, #512]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a7f      	ldr	r2, [pc, #508]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	e02e      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x98>
 8002d8a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7a      	ldr	r2, [pc, #488]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b78      	ldr	r3, [pc, #480]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a77      	ldr	r2, [pc, #476]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e01d      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xbc>
 8002dae:	4b72      	ldr	r3, [pc, #456]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a71      	ldr	r2, [pc, #452]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b6f      	ldr	r3, [pc, #444]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6e      	ldr	r2, [pc, #440]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002dc8:	4b6b      	ldr	r3, [pc, #428]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4b68      	ldr	r3, [pc, #416]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a67      	ldr	r2, [pc, #412]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d013      	beq.n	8002e10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fa82 	bl	80012f0 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe fa7e 	bl	80012f0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	@ 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e200      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b5d      	ldr	r3, [pc, #372]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0xe4>
 8002e0e:	e014      	b.n	8002e3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe fa6e 	bl	80012f0 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7fe fa6a 	bl	80012f0 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	@ 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1ec      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	4b53      	ldr	r3, [pc, #332]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x10c>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d063      	beq.n	8002f0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e46:	4b4c      	ldr	r3, [pc, #304]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00b      	beq.n	8002e6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e52:	4b49      	ldr	r3, [pc, #292]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d11c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x18c>
 8002e5e:	4b46      	ldr	r3, [pc, #280]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d116      	bne.n	8002e98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	4b43      	ldr	r3, [pc, #268]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_RCC_OscConfig+0x176>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e1c0      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	4b3d      	ldr	r3, [pc, #244]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4939      	ldr	r1, [pc, #228]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	e03a      	b.n	8002f0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea0:	4b36      	ldr	r3, [pc, #216]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fa23 	bl	80012f0 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eae:	f7fe fa1f 	bl	80012f0 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e1a1      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4927      	ldr	r1, [pc, #156]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]
 8002ee0:	e015      	b.n	8002f0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee2:	4b26      	ldr	r3, [pc, #152]	@ (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fa02 	bl	80012f0 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7fe f9fe 	bl	80012f0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e180      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	4b1d      	ldr	r3, [pc, #116]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d03a      	beq.n	8002f90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	4b17      	ldr	r3, [pc, #92]	@ (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f28:	f7fe f9e2 	bl	80012f0 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fe f9de 	bl	80012f0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e160      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f000 face 	bl	80034f0 <RCC_Delay>
 8002f54:	e01c      	b.n	8002f90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f56:	4b0a      	ldr	r3, [pc, #40]	@ (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5c:	f7fe f9c8 	bl	80012f0 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f62:	e00f      	b.n	8002f84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fe f9c4 	bl	80012f0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d908      	bls.n	8002f84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e146      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	42420000 	.word	0x42420000
 8002f80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	4b92      	ldr	r3, [pc, #584]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e9      	bne.n	8002f64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a6 	beq.w	80030ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa2:	4b8b      	ldr	r3, [pc, #556]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	4b88      	ldr	r3, [pc, #544]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a87      	ldr	r2, [pc, #540]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb8:	61d3      	str	r3, [r2, #28]
 8002fba:	4b85      	ldr	r3, [pc, #532]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fca:	4b82      	ldr	r3, [pc, #520]	@ (80031d4 <HAL_RCC_OscConfig+0x4c8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d118      	bne.n	8003008 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80031d4 <HAL_RCC_OscConfig+0x4c8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a7e      	ldr	r2, [pc, #504]	@ (80031d4 <HAL_RCC_OscConfig+0x4c8>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe f985 	bl	80012f0 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fea:	f7fe f981 	bl	80012f0 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b64      	cmp	r3, #100	@ 0x64
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e103      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	4b75      	ldr	r3, [pc, #468]	@ (80031d4 <HAL_RCC_OscConfig+0x4c8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x312>
 8003010:	4b6f      	ldr	r3, [pc, #444]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a6e      	ldr	r2, [pc, #440]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	e02d      	b.n	800307a <HAL_RCC_OscConfig+0x36e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x334>
 8003026:	4b6a      	ldr	r3, [pc, #424]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a69      	ldr	r2, [pc, #420]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6213      	str	r3, [r2, #32]
 8003032:	4b67      	ldr	r3, [pc, #412]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a66      	ldr	r2, [pc, #408]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	f023 0304 	bic.w	r3, r3, #4
 800303c:	6213      	str	r3, [r2, #32]
 800303e:	e01c      	b.n	800307a <HAL_RCC_OscConfig+0x36e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b05      	cmp	r3, #5
 8003046:	d10c      	bne.n	8003062 <HAL_RCC_OscConfig+0x356>
 8003048:	4b61      	ldr	r3, [pc, #388]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4a60      	ldr	r2, [pc, #384]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	6213      	str	r3, [r2, #32]
 8003054:	4b5e      	ldr	r3, [pc, #376]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4a5d      	ldr	r2, [pc, #372]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6213      	str	r3, [r2, #32]
 8003060:	e00b      	b.n	800307a <HAL_RCC_OscConfig+0x36e>
 8003062:	4b5b      	ldr	r3, [pc, #364]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	4a5a      	ldr	r2, [pc, #360]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	6213      	str	r3, [r2, #32]
 800306e:	4b58      	ldr	r3, [pc, #352]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4a57      	ldr	r2, [pc, #348]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	f023 0304 	bic.w	r3, r3, #4
 8003078:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d015      	beq.n	80030ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7fe f935 	bl	80012f0 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe f931 	bl	80012f0 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0b1      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a0:	4b4b      	ldr	r3, [pc, #300]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ee      	beq.n	800308a <HAL_RCC_OscConfig+0x37e>
 80030ac:	e014      	b.n	80030d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7fe f91f 	bl	80012f0 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe f91b 	bl	80012f0 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e09b      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030cc:	4b40      	ldr	r3, [pc, #256]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ee      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d105      	bne.n	80030ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030de:	4b3c      	ldr	r3, [pc, #240]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	4a3b      	ldr	r2, [pc, #236]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8087 	beq.w	8003202 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030f4:	4b36      	ldr	r3, [pc, #216]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d061      	beq.n	80031c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d146      	bne.n	8003196 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b33      	ldr	r3, [pc, #204]	@ (80031d8 <HAL_RCC_OscConfig+0x4cc>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe f8ef 	bl	80012f0 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe f8eb 	bl	80012f0 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e06d      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003128:	4b29      	ldr	r3, [pc, #164]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800313c:	d108      	bne.n	8003150 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800313e:	4b24      	ldr	r3, [pc, #144]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	4921      	ldr	r1, [pc, #132]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003150:	4b1f      	ldr	r3, [pc, #124]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a19      	ldr	r1, [r3, #32]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	430b      	orrs	r3, r1
 8003162:	491b      	ldr	r1, [pc, #108]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003168:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <HAL_RCC_OscConfig+0x4cc>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316e:	f7fe f8bf 	bl	80012f0 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003176:	f7fe f8bb 	bl	80012f0 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e03d      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003188:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x46a>
 8003194:	e035      	b.n	8003202 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b10      	ldr	r3, [pc, #64]	@ (80031d8 <HAL_RCC_OscConfig+0x4cc>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7fe f8a8 	bl	80012f0 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe f8a4 	bl	80012f0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e026      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x498>
 80031c2:	e01e      	b.n	8003202 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e019      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40007000 	.word	0x40007000
 80031d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <HAL_RCC_OscConfig+0x500>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000

08003210 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0d0      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b6a      	ldr	r3, [pc, #424]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d910      	bls.n	8003254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b67      	ldr	r3, [pc, #412]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0207 	bic.w	r2, r3, #7
 800323a:	4965      	ldr	r1, [pc, #404]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b63      	ldr	r3, [pc, #396]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0b8      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800326c:	4b59      	ldr	r3, [pc, #356]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4a58      	ldr	r2, [pc, #352]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003276:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003284:	4b53      	ldr	r3, [pc, #332]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a52      	ldr	r2, [pc, #328]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800328a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800328e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003290:	4b50      	ldr	r3, [pc, #320]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	494d      	ldr	r1, [pc, #308]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d040      	beq.n	8003330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b47      	ldr	r3, [pc, #284]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d115      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e07f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ce:	4b41      	ldr	r3, [pc, #260]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e073      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032de:	4b3d      	ldr	r3, [pc, #244]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e06b      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ee:	4b39      	ldr	r3, [pc, #228]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f023 0203 	bic.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4936      	ldr	r1, [pc, #216]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003300:	f7fd fff6 	bl	80012f0 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fd fff2 	bl	80012f0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e053      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	4b2d      	ldr	r3, [pc, #180]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 020c 	and.w	r2, r3, #12
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	429a      	cmp	r2, r3
 800332e:	d1eb      	bne.n	8003308 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003330:	4b27      	ldr	r3, [pc, #156]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d210      	bcs.n	8003360 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b24      	ldr	r3, [pc, #144]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 0207 	bic.w	r2, r3, #7
 8003346:	4922      	ldr	r1, [pc, #136]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b20      	ldr	r3, [pc, #128]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e032      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800336c:	4b19      	ldr	r3, [pc, #100]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4916      	ldr	r1, [pc, #88]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800338a:	4b12      	ldr	r3, [pc, #72]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	490e      	ldr	r1, [pc, #56]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800339e:	f000 f821 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 80033a2:	4602      	mov	r2, r0
 80033a4:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	490a      	ldr	r1, [pc, #40]	@ (80033d8 <HAL_RCC_ClockConfig+0x1c8>)
 80033b0:	5ccb      	ldrb	r3, [r1, r3]
 80033b2:	fa22 f303 	lsr.w	r3, r2, r3
 80033b6:	4a09      	ldr	r2, [pc, #36]	@ (80033dc <HAL_RCC_ClockConfig+0x1cc>)
 80033b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ba:	4b09      	ldr	r3, [pc, #36]	@ (80033e0 <HAL_RCC_ClockConfig+0x1d0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd ff54 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40022000 	.word	0x40022000
 80033d4:	40021000 	.word	0x40021000
 80033d8:	08004e48 	.word	0x08004e48
 80033dc:	20000000 	.word	0x20000000
 80033e0:	20000004 	.word	0x20000004

080033e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	2300      	movs	r3, #0
 80033f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x94>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b04      	cmp	r3, #4
 800340c:	d002      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x30>
 800340e:	2b08      	cmp	r3, #8
 8003410:	d003      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0x36>
 8003412:	e027      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003414:	4b19      	ldr	r3, [pc, #100]	@ (800347c <HAL_RCC_GetSysClockFreq+0x98>)
 8003416:	613b      	str	r3, [r7, #16]
      break;
 8003418:	e027      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	0c9b      	lsrs	r3, r3, #18
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	4a17      	ldr	r2, [pc, #92]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003424:	5cd3      	ldrb	r3, [r2, r3]
 8003426:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d010      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003432:	4b11      	ldr	r3, [pc, #68]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x94>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	0c5b      	lsrs	r3, r3, #17
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	4a11      	ldr	r2, [pc, #68]	@ (8003484 <HAL_RCC_GetSysClockFreq+0xa0>)
 800343e:	5cd3      	ldrb	r3, [r2, r3]
 8003440:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a0d      	ldr	r2, [pc, #52]	@ (800347c <HAL_RCC_GetSysClockFreq+0x98>)
 8003446:	fb03 f202 	mul.w	r2, r3, r2
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e004      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0c      	ldr	r2, [pc, #48]	@ (8003488 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003458:	fb02 f303 	mul.w	r3, r2, r3
 800345c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	613b      	str	r3, [r7, #16]
      break;
 8003462:	e002      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <HAL_RCC_GetSysClockFreq+0x98>)
 8003466:	613b      	str	r3, [r7, #16]
      break;
 8003468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346a:	693b      	ldr	r3, [r7, #16]
}
 800346c:	4618      	mov	r0, r3
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	007a1200 	.word	0x007a1200
 8003480:	08004e60 	.word	0x08004e60
 8003484:	08004e70 	.word	0x08004e70
 8003488:	003d0900 	.word	0x003d0900

0800348c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003490:	4b02      	ldr	r3, [pc, #8]	@ (800349c <HAL_RCC_GetHCLKFreq+0x10>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	20000000 	.word	0x20000000

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034a4:	f7ff fff2 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4903      	ldr	r1, [pc, #12]	@ (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40021000 	.word	0x40021000
 80034c4:	08004e58 	.word	0x08004e58

080034c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034cc:	f7ff ffde 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	0adb      	lsrs	r3, r3, #11
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4903      	ldr	r1, [pc, #12]	@ (80034ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000
 80034ec:	08004e58 	.word	0x08004e58

080034f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <RCC_Delay+0x34>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003528 <RCC_Delay+0x38>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	0a5b      	lsrs	r3, r3, #9
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	fb02 f303 	mul.w	r3, r2, r3
 800350a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800350c:	bf00      	nop
  }
  while (Delay --);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1e5a      	subs	r2, r3, #1
 8003512:	60fa      	str	r2, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f9      	bne.n	800350c <RCC_Delay+0x1c>
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	20000000 	.word	0x20000000
 8003528:	10624dd3 	.word	0x10624dd3

0800352c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d07d      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003548:	2300      	movs	r3, #0
 800354a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354c:	4b4f      	ldr	r3, [pc, #316]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10d      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003558:	4b4c      	ldr	r3, [pc, #304]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	4a4b      	ldr	r2, [pc, #300]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003562:	61d3      	str	r3, [r2, #28]
 8003564:	4b49      	ldr	r3, [pc, #292]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b46      	ldr	r3, [pc, #280]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d118      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003580:	4b43      	ldr	r3, [pc, #268]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a42      	ldr	r2, [pc, #264]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800358a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358c:	f7fd feb0 	bl	80012f0 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	e008      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003594:	f7fd feac 	bl	80012f0 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	@ 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e06d      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035b2:	4b36      	ldr	r3, [pc, #216]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d02e      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d027      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035d0:	4b2e      	ldr	r3, [pc, #184]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035da:	4b2e      	ldr	r3, [pc, #184]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035e6:	4a29      	ldr	r2, [pc, #164]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d014      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7fd fe7b 	bl	80012f0 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fc:	e00a      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fd fe77 	bl	80012f0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	d901      	bls.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e036      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003614:	4b1d      	ldr	r3, [pc, #116]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ee      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003620:	4b1a      	ldr	r3, [pc, #104]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4917      	ldr	r1, [pc, #92]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362e:	4313      	orrs	r3, r2
 8003630:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003638:	4b14      	ldr	r3, [pc, #80]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4a13      	ldr	r2, [pc, #76]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003642:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003650:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	490b      	ldr	r1, [pc, #44]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800366e:	4b07      	ldr	r3, [pc, #28]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4904      	ldr	r1, [pc, #16]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000
 8003690:	40007000 	.word	0x40007000
 8003694:	42420440 	.word	0x42420440

08003698 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	2300      	movs	r3, #0
 80036aa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	2300      	movs	r3, #0
 80036b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b10      	cmp	r3, #16
 80036be:	f200 808a 	bhi.w	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d045      	beq.n	8003754 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d075      	beq.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80036ce:	e082      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80036d0:	4b46      	ldr	r3, [pc, #280]	@ (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80036d6:	4b45      	ldr	r3, [pc, #276]	@ (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d07b      	beq.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	0c9b      	lsrs	r3, r3, #18
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	4a41      	ldr	r2, [pc, #260]	@ (80037f0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80036ec:	5cd3      	ldrb	r3, [r2, r3]
 80036ee:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d015      	beq.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036fa:	4b3c      	ldr	r3, [pc, #240]	@ (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	0c5b      	lsrs	r3, r3, #17
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	4a3b      	ldr	r2, [pc, #236]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003706:	5cd3      	ldrb	r3, [r2, r3]
 8003708:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003714:	4a38      	ldr	r2, [pc, #224]	@ (80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	fbb2 f2f3 	udiv	r2, r2, r3
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	e004      	b.n	8003730 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4a34      	ldr	r2, [pc, #208]	@ (80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003730:	4b2e      	ldr	r3, [pc, #184]	@ (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003738:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800373c:	d102      	bne.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	61bb      	str	r3, [r7, #24]
      break;
 8003742:	e04a      	b.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4a2d      	ldr	r2, [pc, #180]	@ (8003800 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	61bb      	str	r3, [r7, #24]
      break;
 8003752:	e042      	b.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003754:	4b25      	ldr	r3, [pc, #148]	@ (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003764:	d108      	bne.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	e01f      	b.n	80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800377e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003782:	d109      	bne.n	8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003784:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003790:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e00f      	b.n	80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037a2:	d11c      	bne.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80037a4:	4b11      	ldr	r3, [pc, #68]	@ (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d016      	beq.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80037b0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80037b4:	61bb      	str	r3, [r7, #24]
      break;
 80037b6:	e012      	b.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80037b8:	e011      	b.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80037ba:	f7ff fe85 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0b9b      	lsrs	r3, r3, #14
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d2:	61bb      	str	r3, [r7, #24]
      break;
 80037d4:	e004      	b.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80037de:	bf00      	nop
    }
  }
  return (frequency);
 80037e0:	69bb      	ldr	r3, [r7, #24]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	08004e74 	.word	0x08004e74
 80037f4:	08004e84 	.word	0x08004e84
 80037f8:	007a1200 	.word	0x007a1200
 80037fc:	003d0900 	.word	0x003d0900
 8003800:	aaaaaaab 	.word	0xaaaaaaab

08003804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e076      	b.n	8003904 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d108      	bne.n	8003830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003826:	d009      	beq.n	800383c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	61da      	str	r2, [r3, #28]
 800382e:	e005      	b.n	800383c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fa7c 	bl	8000d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003872:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c0:	ea42 0103 	orr.w	r1, r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	0c1a      	lsrs	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f002 0204 	and.w	r2, r2, #4
 80038e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e041      	b.n	80039a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd fbc6 	bl	80010c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f000 fa12 	bl	8003d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01b      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0202 	mvn.w	r2, #2
 80039de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f9a1 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
 80039fa:	e005      	b.n	8003a08 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f994 	bl	8003d2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f9a3 	bl	8003d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01b      	beq.n	8003a5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f06f 0204 	mvn.w	r2, #4
 8003a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f97b 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
 8003a46:	e005      	b.n	8003a54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f96e 	bl	8003d2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f97d 	bl	8003d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01b      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f06f 0208 	mvn.w	r2, #8
 8003a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f955 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
 8003a92:	e005      	b.n	8003aa0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f948 	bl	8003d2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f957 	bl	8003d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d020      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01b      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f06f 0210 	mvn.w	r2, #16
 8003ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f92f 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
 8003ade:	e005      	b.n	8003aec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f922 	bl	8003d2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f931 	bl	8003d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f06f 0201 	mvn.w	r2, #1
 8003b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f901 	bl	8003d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fa88 	bl	800404a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f901 	bl	8003d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00c      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 0220 	mvn.w	r2, #32
 8003b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fa5b 	bl	8004038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_ConfigClockSource+0x1c>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e0b4      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x186>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bc4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bcc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bde:	d03e      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0xd4>
 8003be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be4:	f200 8087 	bhi.w	8003cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bec:	f000 8086 	beq.w	8003cfc <HAL_TIM_ConfigClockSource+0x172>
 8003bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf4:	d87f      	bhi.n	8003cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf6:	2b70      	cmp	r3, #112	@ 0x70
 8003bf8:	d01a      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0xa6>
 8003bfa:	2b70      	cmp	r3, #112	@ 0x70
 8003bfc:	d87b      	bhi.n	8003cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8003bfe:	2b60      	cmp	r3, #96	@ 0x60
 8003c00:	d050      	beq.n	8003ca4 <HAL_TIM_ConfigClockSource+0x11a>
 8003c02:	2b60      	cmp	r3, #96	@ 0x60
 8003c04:	d877      	bhi.n	8003cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8003c06:	2b50      	cmp	r3, #80	@ 0x50
 8003c08:	d03c      	beq.n	8003c84 <HAL_TIM_ConfigClockSource+0xfa>
 8003c0a:	2b50      	cmp	r3, #80	@ 0x50
 8003c0c:	d873      	bhi.n	8003cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8003c0e:	2b40      	cmp	r3, #64	@ 0x40
 8003c10:	d058      	beq.n	8003cc4 <HAL_TIM_ConfigClockSource+0x13a>
 8003c12:	2b40      	cmp	r3, #64	@ 0x40
 8003c14:	d86f      	bhi.n	8003cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8003c16:	2b30      	cmp	r3, #48	@ 0x30
 8003c18:	d064      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0x15a>
 8003c1a:	2b30      	cmp	r3, #48	@ 0x30
 8003c1c:	d86b      	bhi.n	8003cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d060      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0x15a>
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d867      	bhi.n	8003cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d05c      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0x15a>
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d05a      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0x15a>
 8003c2e:	e062      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c40:	f000 f97d 	bl	8003f3e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c52:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	609a      	str	r2, [r3, #8]
      break;
 8003c5c:	e04f      	b.n	8003cfe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c6e:	f000 f966 	bl	8003f3e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c80:	609a      	str	r2, [r3, #8]
      break;
 8003c82:	e03c      	b.n	8003cfe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c90:	461a      	mov	r2, r3
 8003c92:	f000 f8dd 	bl	8003e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2150      	movs	r1, #80	@ 0x50
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 f934 	bl	8003f0a <TIM_ITRx_SetConfig>
      break;
 8003ca2:	e02c      	b.n	8003cfe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f000 f8fb 	bl	8003eac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2160      	movs	r1, #96	@ 0x60
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 f924 	bl	8003f0a <TIM_ITRx_SetConfig>
      break;
 8003cc2:	e01c      	b.n	8003cfe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f000 f8bd 	bl	8003e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2140      	movs	r1, #64	@ 0x40
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 f914 	bl	8003f0a <TIM_ITRx_SetConfig>
      break;
 8003ce2:	e00c      	b.n	8003cfe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f000 f90b 	bl	8003f0a <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e003      	b.n	8003cfe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8003cfa:	e000      	b.n	8003cfe <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
	...

08003d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a2f      	ldr	r2, [pc, #188]	@ (8003e44 <TIM_Base_SetConfig+0xd0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00b      	beq.n	8003da4 <TIM_Base_SetConfig+0x30>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d92:	d007      	beq.n	8003da4 <TIM_Base_SetConfig+0x30>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a2c      	ldr	r2, [pc, #176]	@ (8003e48 <TIM_Base_SetConfig+0xd4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_Base_SetConfig+0x30>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a2b      	ldr	r2, [pc, #172]	@ (8003e4c <TIM_Base_SetConfig+0xd8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d108      	bne.n	8003db6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a22      	ldr	r2, [pc, #136]	@ (8003e44 <TIM_Base_SetConfig+0xd0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00b      	beq.n	8003dd6 <TIM_Base_SetConfig+0x62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc4:	d007      	beq.n	8003dd6 <TIM_Base_SetConfig+0x62>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <TIM_Base_SetConfig+0xd4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_Base_SetConfig+0x62>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e4c <TIM_Base_SetConfig+0xd8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d108      	bne.n	8003de8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003e44 <TIM_Base_SetConfig+0xd0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d103      	bne.n	8003e1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f023 0201 	bic.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800

08003e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f023 0201 	bic.w	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f023 030a 	bic.w	r3, r3, #10
 8003e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f023 0210 	bic.w	r2, r3, #16
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	031b      	lsls	r3, r3, #12
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	621a      	str	r2, [r3, #32]
}
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr

08003f0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f043 0307 	orr.w	r3, r3, #7
 8003f2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	609a      	str	r2, [r3, #8]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr

08003f3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b087      	sub	sp, #28
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	021a      	lsls	r2, r3, #8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	609a      	str	r2, [r3, #8]
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e046      	b.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a16      	ldr	r2, [pc, #88]	@ (800402c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe0:	d009      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a12      	ldr	r2, [pc, #72]	@ (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a10      	ldr	r2, [pc, #64]	@ (8004034 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d10c      	bne.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	4313      	orrs	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	40012c00 	.word	0x40012c00
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800

08004038 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e042      	b.n	80040f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd f86c 	bl	8001160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	@ 0x24
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800409e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f971 	bl	8004388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	@ 0x28
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b20      	cmp	r3, #32
 800411a:	d175      	bne.n	8004208 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_UART_Transmit+0x2c>
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e06e      	b.n	800420a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2221      	movs	r2, #33	@ 0x21
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413a:	f7fd f8d9 	bl	80012f0 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	88fa      	ldrh	r2, [r7, #6]
 800414a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004154:	d108      	bne.n	8004168 <HAL_UART_Transmit+0x6c>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d104      	bne.n	8004168 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e003      	b.n	8004170 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004170:	e02e      	b.n	80041d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f848 	bl	8004212 <UART_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e03a      	b.n	800420a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10b      	bne.n	80041b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	3302      	adds	r3, #2
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e007      	b.n	80041c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	781a      	ldrb	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	3301      	adds	r3, #1
 80041c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1cb      	bne.n	8004172 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2140      	movs	r1, #64	@ 0x40
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f814 	bl	8004212 <UART_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e006      	b.n	800420a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004222:	e03b      	b.n	800429c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d037      	beq.n	800429c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422c:	f7fd f860 	bl	80012f0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	6a3a      	ldr	r2, [r7, #32]
 8004238:	429a      	cmp	r2, r3
 800423a:	d302      	bcc.n	8004242 <UART_WaitOnFlagUntilTimeout+0x30>
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e03a      	b.n	80042bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d023      	beq.n	800429c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b80      	cmp	r3, #128	@ 0x80
 8004258:	d020      	beq.n	800429c <UART_WaitOnFlagUntilTimeout+0x8a>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b40      	cmp	r3, #64	@ 0x40
 800425e:	d01d      	beq.n	800429c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b08      	cmp	r3, #8
 800426c:	d116      	bne.n	800429c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f81d 	bl	80042c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2208      	movs	r2, #8
 800428e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e00f      	b.n	80042bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d0b4      	beq.n	8004224 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b095      	sub	sp, #84	@ 0x54
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	330c      	adds	r3, #12
 80042ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80042ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e5      	bne.n	80042cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3314      	adds	r3, #20
 8004306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3314      	adds	r3, #20
 800431e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004320:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e5      	bne.n	8004300 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	2b01      	cmp	r3, #1
 800433a:	d119      	bne.n	8004370 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	60bb      	str	r3, [r7, #8]
   return(result);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f023 0310 	bic.w	r3, r3, #16
 8004352:	647b      	str	r3, [r7, #68]	@ 0x44
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800435c:	61ba      	str	r2, [r7, #24]
 800435e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6979      	ldr	r1, [r7, #20]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	613b      	str	r3, [r7, #16]
   return(result);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800437e:	bf00      	nop
 8004380:	3754      	adds	r7, #84	@ 0x54
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043c2:	f023 030c 	bic.w	r3, r3, #12
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	430b      	orrs	r3, r1
 80043ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2c      	ldr	r2, [pc, #176]	@ (800449c <UART_SetConfig+0x114>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d103      	bne.n	80043f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043f0:	f7ff f86a 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	e002      	b.n	80043fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7ff f852 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 80043fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009a      	lsls	r2, r3, #2
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	4a22      	ldr	r2, [pc, #136]	@ (80044a0 <UART_SetConfig+0x118>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	0119      	lsls	r1, r3, #4
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009a      	lsls	r2, r3, #2
 8004428:	441a      	add	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	fbb2 f2f3 	udiv	r2, r2, r3
 8004434:	4b1a      	ldr	r3, [pc, #104]	@ (80044a0 <UART_SetConfig+0x118>)
 8004436:	fba3 0302 	umull	r0, r3, r3, r2
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2064      	movs	r0, #100	@ 0x64
 800443e:	fb00 f303 	mul.w	r3, r0, r3
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	3332      	adds	r3, #50	@ 0x32
 8004448:	4a15      	ldr	r2, [pc, #84]	@ (80044a0 <UART_SetConfig+0x118>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004454:	4419      	add	r1, r3
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	009a      	lsls	r2, r3, #2
 8004460:	441a      	add	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	fbb2 f2f3 	udiv	r2, r2, r3
 800446c:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <UART_SetConfig+0x118>)
 800446e:	fba3 0302 	umull	r0, r3, r3, r2
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2064      	movs	r0, #100	@ 0x64
 8004476:	fb00 f303 	mul.w	r3, r0, r3
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	3332      	adds	r3, #50	@ 0x32
 8004480:	4a07      	ldr	r2, [pc, #28]	@ (80044a0 <UART_SetConfig+0x118>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	f003 020f 	and.w	r2, r3, #15
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	440a      	add	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40013800 	.word	0x40013800
 80044a0:	51eb851f 	.word	0x51eb851f

080044a4 <std>:
 80044a4:	2300      	movs	r3, #0
 80044a6:	b510      	push	{r4, lr}
 80044a8:	4604      	mov	r4, r0
 80044aa:	e9c0 3300 	strd	r3, r3, [r0]
 80044ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044b2:	6083      	str	r3, [r0, #8]
 80044b4:	8181      	strh	r1, [r0, #12]
 80044b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80044b8:	81c2      	strh	r2, [r0, #14]
 80044ba:	6183      	str	r3, [r0, #24]
 80044bc:	4619      	mov	r1, r3
 80044be:	2208      	movs	r2, #8
 80044c0:	305c      	adds	r0, #92	@ 0x5c
 80044c2:	f000 f9e7 	bl	8004894 <memset>
 80044c6:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <std+0x58>)
 80044c8:	6224      	str	r4, [r4, #32]
 80044ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80044cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004500 <std+0x5c>)
 80044ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <std+0x60>)
 80044d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <std+0x64>)
 80044d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80044d8:	4b0c      	ldr	r3, [pc, #48]	@ (800450c <std+0x68>)
 80044da:	429c      	cmp	r4, r3
 80044dc:	d006      	beq.n	80044ec <std+0x48>
 80044de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044e2:	4294      	cmp	r4, r2
 80044e4:	d002      	beq.n	80044ec <std+0x48>
 80044e6:	33d0      	adds	r3, #208	@ 0xd0
 80044e8:	429c      	cmp	r4, r3
 80044ea:	d105      	bne.n	80044f8 <std+0x54>
 80044ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f4:	f000 ba46 	b.w	8004984 <__retarget_lock_init_recursive>
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	bf00      	nop
 80044fc:	080046e5 	.word	0x080046e5
 8004500:	08004707 	.word	0x08004707
 8004504:	0800473f 	.word	0x0800473f
 8004508:	08004763 	.word	0x08004763
 800450c:	200001cc 	.word	0x200001cc

08004510 <stdio_exit_handler>:
 8004510:	4a02      	ldr	r2, [pc, #8]	@ (800451c <stdio_exit_handler+0xc>)
 8004512:	4903      	ldr	r1, [pc, #12]	@ (8004520 <stdio_exit_handler+0x10>)
 8004514:	4803      	ldr	r0, [pc, #12]	@ (8004524 <stdio_exit_handler+0x14>)
 8004516:	f000 b869 	b.w	80045ec <_fwalk_sglue>
 800451a:	bf00      	nop
 800451c:	2000000c 	.word	0x2000000c
 8004520:	08004c79 	.word	0x08004c79
 8004524:	2000001c 	.word	0x2000001c

08004528 <cleanup_stdio>:
 8004528:	6841      	ldr	r1, [r0, #4]
 800452a:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <cleanup_stdio+0x34>)
 800452c:	b510      	push	{r4, lr}
 800452e:	4299      	cmp	r1, r3
 8004530:	4604      	mov	r4, r0
 8004532:	d001      	beq.n	8004538 <cleanup_stdio+0x10>
 8004534:	f000 fba0 	bl	8004c78 <_fflush_r>
 8004538:	68a1      	ldr	r1, [r4, #8]
 800453a:	4b09      	ldr	r3, [pc, #36]	@ (8004560 <cleanup_stdio+0x38>)
 800453c:	4299      	cmp	r1, r3
 800453e:	d002      	beq.n	8004546 <cleanup_stdio+0x1e>
 8004540:	4620      	mov	r0, r4
 8004542:	f000 fb99 	bl	8004c78 <_fflush_r>
 8004546:	68e1      	ldr	r1, [r4, #12]
 8004548:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <cleanup_stdio+0x3c>)
 800454a:	4299      	cmp	r1, r3
 800454c:	d004      	beq.n	8004558 <cleanup_stdio+0x30>
 800454e:	4620      	mov	r0, r4
 8004550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004554:	f000 bb90 	b.w	8004c78 <_fflush_r>
 8004558:	bd10      	pop	{r4, pc}
 800455a:	bf00      	nop
 800455c:	200001cc 	.word	0x200001cc
 8004560:	20000234 	.word	0x20000234
 8004564:	2000029c 	.word	0x2000029c

08004568 <global_stdio_init.part.0>:
 8004568:	b510      	push	{r4, lr}
 800456a:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <global_stdio_init.part.0+0x30>)
 800456c:	4c0b      	ldr	r4, [pc, #44]	@ (800459c <global_stdio_init.part.0+0x34>)
 800456e:	4a0c      	ldr	r2, [pc, #48]	@ (80045a0 <global_stdio_init.part.0+0x38>)
 8004570:	4620      	mov	r0, r4
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	2104      	movs	r1, #4
 8004576:	2200      	movs	r2, #0
 8004578:	f7ff ff94 	bl	80044a4 <std>
 800457c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004580:	2201      	movs	r2, #1
 8004582:	2109      	movs	r1, #9
 8004584:	f7ff ff8e 	bl	80044a4 <std>
 8004588:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800458c:	2202      	movs	r2, #2
 800458e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004592:	2112      	movs	r1, #18
 8004594:	f7ff bf86 	b.w	80044a4 <std>
 8004598:	20000304 	.word	0x20000304
 800459c:	200001cc 	.word	0x200001cc
 80045a0:	08004511 	.word	0x08004511

080045a4 <__sfp_lock_acquire>:
 80045a4:	4801      	ldr	r0, [pc, #4]	@ (80045ac <__sfp_lock_acquire+0x8>)
 80045a6:	f000 b9ee 	b.w	8004986 <__retarget_lock_acquire_recursive>
 80045aa:	bf00      	nop
 80045ac:	2000030d 	.word	0x2000030d

080045b0 <__sfp_lock_release>:
 80045b0:	4801      	ldr	r0, [pc, #4]	@ (80045b8 <__sfp_lock_release+0x8>)
 80045b2:	f000 b9e9 	b.w	8004988 <__retarget_lock_release_recursive>
 80045b6:	bf00      	nop
 80045b8:	2000030d 	.word	0x2000030d

080045bc <__sinit>:
 80045bc:	b510      	push	{r4, lr}
 80045be:	4604      	mov	r4, r0
 80045c0:	f7ff fff0 	bl	80045a4 <__sfp_lock_acquire>
 80045c4:	6a23      	ldr	r3, [r4, #32]
 80045c6:	b11b      	cbz	r3, 80045d0 <__sinit+0x14>
 80045c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045cc:	f7ff bff0 	b.w	80045b0 <__sfp_lock_release>
 80045d0:	4b04      	ldr	r3, [pc, #16]	@ (80045e4 <__sinit+0x28>)
 80045d2:	6223      	str	r3, [r4, #32]
 80045d4:	4b04      	ldr	r3, [pc, #16]	@ (80045e8 <__sinit+0x2c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f5      	bne.n	80045c8 <__sinit+0xc>
 80045dc:	f7ff ffc4 	bl	8004568 <global_stdio_init.part.0>
 80045e0:	e7f2      	b.n	80045c8 <__sinit+0xc>
 80045e2:	bf00      	nop
 80045e4:	08004529 	.word	0x08004529
 80045e8:	20000304 	.word	0x20000304

080045ec <_fwalk_sglue>:
 80045ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045f0:	4607      	mov	r7, r0
 80045f2:	4688      	mov	r8, r1
 80045f4:	4614      	mov	r4, r2
 80045f6:	2600      	movs	r6, #0
 80045f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004600:	d505      	bpl.n	800460e <_fwalk_sglue+0x22>
 8004602:	6824      	ldr	r4, [r4, #0]
 8004604:	2c00      	cmp	r4, #0
 8004606:	d1f7      	bne.n	80045f8 <_fwalk_sglue+0xc>
 8004608:	4630      	mov	r0, r6
 800460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800460e:	89ab      	ldrh	r3, [r5, #12]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d907      	bls.n	8004624 <_fwalk_sglue+0x38>
 8004614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004618:	3301      	adds	r3, #1
 800461a:	d003      	beq.n	8004624 <_fwalk_sglue+0x38>
 800461c:	4629      	mov	r1, r5
 800461e:	4638      	mov	r0, r7
 8004620:	47c0      	blx	r8
 8004622:	4306      	orrs	r6, r0
 8004624:	3568      	adds	r5, #104	@ 0x68
 8004626:	e7e9      	b.n	80045fc <_fwalk_sglue+0x10>

08004628 <_puts_r>:
 8004628:	6a03      	ldr	r3, [r0, #32]
 800462a:	b570      	push	{r4, r5, r6, lr}
 800462c:	4605      	mov	r5, r0
 800462e:	460e      	mov	r6, r1
 8004630:	6884      	ldr	r4, [r0, #8]
 8004632:	b90b      	cbnz	r3, 8004638 <_puts_r+0x10>
 8004634:	f7ff ffc2 	bl	80045bc <__sinit>
 8004638:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800463a:	07db      	lsls	r3, r3, #31
 800463c:	d405      	bmi.n	800464a <_puts_r+0x22>
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	0598      	lsls	r0, r3, #22
 8004642:	d402      	bmi.n	800464a <_puts_r+0x22>
 8004644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004646:	f000 f99e 	bl	8004986 <__retarget_lock_acquire_recursive>
 800464a:	89a3      	ldrh	r3, [r4, #12]
 800464c:	0719      	lsls	r1, r3, #28
 800464e:	d502      	bpl.n	8004656 <_puts_r+0x2e>
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d135      	bne.n	80046c2 <_puts_r+0x9a>
 8004656:	4621      	mov	r1, r4
 8004658:	4628      	mov	r0, r5
 800465a:	f000 f8c5 	bl	80047e8 <__swsetup_r>
 800465e:	b380      	cbz	r0, 80046c2 <_puts_r+0x9a>
 8004660:	f04f 35ff 	mov.w	r5, #4294967295
 8004664:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004666:	07da      	lsls	r2, r3, #31
 8004668:	d405      	bmi.n	8004676 <_puts_r+0x4e>
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	059b      	lsls	r3, r3, #22
 800466e:	d402      	bmi.n	8004676 <_puts_r+0x4e>
 8004670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004672:	f000 f989 	bl	8004988 <__retarget_lock_release_recursive>
 8004676:	4628      	mov	r0, r5
 8004678:	bd70      	pop	{r4, r5, r6, pc}
 800467a:	2b00      	cmp	r3, #0
 800467c:	da04      	bge.n	8004688 <_puts_r+0x60>
 800467e:	69a2      	ldr	r2, [r4, #24]
 8004680:	429a      	cmp	r2, r3
 8004682:	dc17      	bgt.n	80046b4 <_puts_r+0x8c>
 8004684:	290a      	cmp	r1, #10
 8004686:	d015      	beq.n	80046b4 <_puts_r+0x8c>
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	6022      	str	r2, [r4, #0]
 800468e:	7019      	strb	r1, [r3, #0]
 8004690:	68a3      	ldr	r3, [r4, #8]
 8004692:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004696:	3b01      	subs	r3, #1
 8004698:	60a3      	str	r3, [r4, #8]
 800469a:	2900      	cmp	r1, #0
 800469c:	d1ed      	bne.n	800467a <_puts_r+0x52>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da11      	bge.n	80046c6 <_puts_r+0x9e>
 80046a2:	4622      	mov	r2, r4
 80046a4:	210a      	movs	r1, #10
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f85f 	bl	800476a <__swbuf_r>
 80046ac:	3001      	adds	r0, #1
 80046ae:	d0d7      	beq.n	8004660 <_puts_r+0x38>
 80046b0:	250a      	movs	r5, #10
 80046b2:	e7d7      	b.n	8004664 <_puts_r+0x3c>
 80046b4:	4622      	mov	r2, r4
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 f857 	bl	800476a <__swbuf_r>
 80046bc:	3001      	adds	r0, #1
 80046be:	d1e7      	bne.n	8004690 <_puts_r+0x68>
 80046c0:	e7ce      	b.n	8004660 <_puts_r+0x38>
 80046c2:	3e01      	subs	r6, #1
 80046c4:	e7e4      	b.n	8004690 <_puts_r+0x68>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	6022      	str	r2, [r4, #0]
 80046cc:	220a      	movs	r2, #10
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	e7ee      	b.n	80046b0 <_puts_r+0x88>
	...

080046d4 <puts>:
 80046d4:	4b02      	ldr	r3, [pc, #8]	@ (80046e0 <puts+0xc>)
 80046d6:	4601      	mov	r1, r0
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	f7ff bfa5 	b.w	8004628 <_puts_r>
 80046de:	bf00      	nop
 80046e0:	20000018 	.word	0x20000018

080046e4 <__sread>:
 80046e4:	b510      	push	{r4, lr}
 80046e6:	460c      	mov	r4, r1
 80046e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ec:	f000 f8fc 	bl	80048e8 <_read_r>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	bfab      	itete	ge
 80046f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046f6:	89a3      	ldrhlt	r3, [r4, #12]
 80046f8:	181b      	addge	r3, r3, r0
 80046fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046fe:	bfac      	ite	ge
 8004700:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004702:	81a3      	strhlt	r3, [r4, #12]
 8004704:	bd10      	pop	{r4, pc}

08004706 <__swrite>:
 8004706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800470a:	461f      	mov	r7, r3
 800470c:	898b      	ldrh	r3, [r1, #12]
 800470e:	4605      	mov	r5, r0
 8004710:	05db      	lsls	r3, r3, #23
 8004712:	460c      	mov	r4, r1
 8004714:	4616      	mov	r6, r2
 8004716:	d505      	bpl.n	8004724 <__swrite+0x1e>
 8004718:	2302      	movs	r3, #2
 800471a:	2200      	movs	r2, #0
 800471c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004720:	f000 f8d0 	bl	80048c4 <_lseek_r>
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	4632      	mov	r2, r6
 8004728:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800472c:	81a3      	strh	r3, [r4, #12]
 800472e:	4628      	mov	r0, r5
 8004730:	463b      	mov	r3, r7
 8004732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800473a:	f000 b8e7 	b.w	800490c <_write_r>

0800473e <__sseek>:
 800473e:	b510      	push	{r4, lr}
 8004740:	460c      	mov	r4, r1
 8004742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004746:	f000 f8bd 	bl	80048c4 <_lseek_r>
 800474a:	1c43      	adds	r3, r0, #1
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	bf15      	itete	ne
 8004750:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004752:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004756:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800475a:	81a3      	strheq	r3, [r4, #12]
 800475c:	bf18      	it	ne
 800475e:	81a3      	strhne	r3, [r4, #12]
 8004760:	bd10      	pop	{r4, pc}

08004762 <__sclose>:
 8004762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004766:	f000 b89d 	b.w	80048a4 <_close_r>

0800476a <__swbuf_r>:
 800476a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476c:	460e      	mov	r6, r1
 800476e:	4614      	mov	r4, r2
 8004770:	4605      	mov	r5, r0
 8004772:	b118      	cbz	r0, 800477c <__swbuf_r+0x12>
 8004774:	6a03      	ldr	r3, [r0, #32]
 8004776:	b90b      	cbnz	r3, 800477c <__swbuf_r+0x12>
 8004778:	f7ff ff20 	bl	80045bc <__sinit>
 800477c:	69a3      	ldr	r3, [r4, #24]
 800477e:	60a3      	str	r3, [r4, #8]
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	071a      	lsls	r2, r3, #28
 8004784:	d501      	bpl.n	800478a <__swbuf_r+0x20>
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	b943      	cbnz	r3, 800479c <__swbuf_r+0x32>
 800478a:	4621      	mov	r1, r4
 800478c:	4628      	mov	r0, r5
 800478e:	f000 f82b 	bl	80047e8 <__swsetup_r>
 8004792:	b118      	cbz	r0, 800479c <__swbuf_r+0x32>
 8004794:	f04f 37ff 	mov.w	r7, #4294967295
 8004798:	4638      	mov	r0, r7
 800479a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	6922      	ldr	r2, [r4, #16]
 80047a0:	b2f6      	uxtb	r6, r6
 80047a2:	1a98      	subs	r0, r3, r2
 80047a4:	6963      	ldr	r3, [r4, #20]
 80047a6:	4637      	mov	r7, r6
 80047a8:	4283      	cmp	r3, r0
 80047aa:	dc05      	bgt.n	80047b8 <__swbuf_r+0x4e>
 80047ac:	4621      	mov	r1, r4
 80047ae:	4628      	mov	r0, r5
 80047b0:	f000 fa62 	bl	8004c78 <_fflush_r>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d1ed      	bne.n	8004794 <__swbuf_r+0x2a>
 80047b8:	68a3      	ldr	r3, [r4, #8]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	60a3      	str	r3, [r4, #8]
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	6022      	str	r2, [r4, #0]
 80047c4:	701e      	strb	r6, [r3, #0]
 80047c6:	6962      	ldr	r2, [r4, #20]
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d004      	beq.n	80047d8 <__swbuf_r+0x6e>
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	07db      	lsls	r3, r3, #31
 80047d2:	d5e1      	bpl.n	8004798 <__swbuf_r+0x2e>
 80047d4:	2e0a      	cmp	r6, #10
 80047d6:	d1df      	bne.n	8004798 <__swbuf_r+0x2e>
 80047d8:	4621      	mov	r1, r4
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 fa4c 	bl	8004c78 <_fflush_r>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d0d9      	beq.n	8004798 <__swbuf_r+0x2e>
 80047e4:	e7d6      	b.n	8004794 <__swbuf_r+0x2a>
	...

080047e8 <__swsetup_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4b29      	ldr	r3, [pc, #164]	@ (8004890 <__swsetup_r+0xa8>)
 80047ec:	4605      	mov	r5, r0
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	460c      	mov	r4, r1
 80047f2:	b118      	cbz	r0, 80047fc <__swsetup_r+0x14>
 80047f4:	6a03      	ldr	r3, [r0, #32]
 80047f6:	b90b      	cbnz	r3, 80047fc <__swsetup_r+0x14>
 80047f8:	f7ff fee0 	bl	80045bc <__sinit>
 80047fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004800:	0719      	lsls	r1, r3, #28
 8004802:	d422      	bmi.n	800484a <__swsetup_r+0x62>
 8004804:	06da      	lsls	r2, r3, #27
 8004806:	d407      	bmi.n	8004818 <__swsetup_r+0x30>
 8004808:	2209      	movs	r2, #9
 800480a:	602a      	str	r2, [r5, #0]
 800480c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	e033      	b.n	8004880 <__swsetup_r+0x98>
 8004818:	0758      	lsls	r0, r3, #29
 800481a:	d512      	bpl.n	8004842 <__swsetup_r+0x5a>
 800481c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800481e:	b141      	cbz	r1, 8004832 <__swsetup_r+0x4a>
 8004820:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004824:	4299      	cmp	r1, r3
 8004826:	d002      	beq.n	800482e <__swsetup_r+0x46>
 8004828:	4628      	mov	r0, r5
 800482a:	f000 f8af 	bl	800498c <_free_r>
 800482e:	2300      	movs	r3, #0
 8004830:	6363      	str	r3, [r4, #52]	@ 0x34
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004838:	81a3      	strh	r3, [r4, #12]
 800483a:	2300      	movs	r3, #0
 800483c:	6063      	str	r3, [r4, #4]
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	f043 0308 	orr.w	r3, r3, #8
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	b94b      	cbnz	r3, 8004862 <__swsetup_r+0x7a>
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004858:	d003      	beq.n	8004862 <__swsetup_r+0x7a>
 800485a:	4621      	mov	r1, r4
 800485c:	4628      	mov	r0, r5
 800485e:	f000 fa58 	bl	8004d12 <__smakebuf_r>
 8004862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004866:	f013 0201 	ands.w	r2, r3, #1
 800486a:	d00a      	beq.n	8004882 <__swsetup_r+0x9a>
 800486c:	2200      	movs	r2, #0
 800486e:	60a2      	str	r2, [r4, #8]
 8004870:	6962      	ldr	r2, [r4, #20]
 8004872:	4252      	negs	r2, r2
 8004874:	61a2      	str	r2, [r4, #24]
 8004876:	6922      	ldr	r2, [r4, #16]
 8004878:	b942      	cbnz	r2, 800488c <__swsetup_r+0xa4>
 800487a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800487e:	d1c5      	bne.n	800480c <__swsetup_r+0x24>
 8004880:	bd38      	pop	{r3, r4, r5, pc}
 8004882:	0799      	lsls	r1, r3, #30
 8004884:	bf58      	it	pl
 8004886:	6962      	ldrpl	r2, [r4, #20]
 8004888:	60a2      	str	r2, [r4, #8]
 800488a:	e7f4      	b.n	8004876 <__swsetup_r+0x8e>
 800488c:	2000      	movs	r0, #0
 800488e:	e7f7      	b.n	8004880 <__swsetup_r+0x98>
 8004890:	20000018 	.word	0x20000018

08004894 <memset>:
 8004894:	4603      	mov	r3, r0
 8004896:	4402      	add	r2, r0
 8004898:	4293      	cmp	r3, r2
 800489a:	d100      	bne.n	800489e <memset+0xa>
 800489c:	4770      	bx	lr
 800489e:	f803 1b01 	strb.w	r1, [r3], #1
 80048a2:	e7f9      	b.n	8004898 <memset+0x4>

080048a4 <_close_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	2300      	movs	r3, #0
 80048a8:	4d05      	ldr	r5, [pc, #20]	@ (80048c0 <_close_r+0x1c>)
 80048aa:	4604      	mov	r4, r0
 80048ac:	4608      	mov	r0, r1
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	f7fc fb4f 	bl	8000f52 <_close>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_close_r+0x1a>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b103      	cbz	r3, 80048be <_close_r+0x1a>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	20000308 	.word	0x20000308

080048c4 <_lseek_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4604      	mov	r4, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	2200      	movs	r2, #0
 80048ce:	4d05      	ldr	r5, [pc, #20]	@ (80048e4 <_lseek_r+0x20>)
 80048d0:	602a      	str	r2, [r5, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f7fc fb61 	bl	8000f9a <_lseek>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_lseek_r+0x1e>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_lseek_r+0x1e>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	20000308 	.word	0x20000308

080048e8 <_read_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	2200      	movs	r2, #0
 80048f2:	4d05      	ldr	r5, [pc, #20]	@ (8004908 <_read_r+0x20>)
 80048f4:	602a      	str	r2, [r5, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f7fc faf2 	bl	8000ee0 <_read>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d102      	bne.n	8004906 <_read_r+0x1e>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	b103      	cbz	r3, 8004906 <_read_r+0x1e>
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	20000308 	.word	0x20000308

0800490c <_write_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	4604      	mov	r4, r0
 8004910:	4608      	mov	r0, r1
 8004912:	4611      	mov	r1, r2
 8004914:	2200      	movs	r2, #0
 8004916:	4d05      	ldr	r5, [pc, #20]	@ (800492c <_write_r+0x20>)
 8004918:	602a      	str	r2, [r5, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	f7fc fafd 	bl	8000f1a <_write>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	d102      	bne.n	800492a <_write_r+0x1e>
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	b103      	cbz	r3, 800492a <_write_r+0x1e>
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	bd38      	pop	{r3, r4, r5, pc}
 800492c:	20000308 	.word	0x20000308

08004930 <__errno>:
 8004930:	4b01      	ldr	r3, [pc, #4]	@ (8004938 <__errno+0x8>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20000018 	.word	0x20000018

0800493c <__libc_init_array>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	2600      	movs	r6, #0
 8004940:	4d0c      	ldr	r5, [pc, #48]	@ (8004974 <__libc_init_array+0x38>)
 8004942:	4c0d      	ldr	r4, [pc, #52]	@ (8004978 <__libc_init_array+0x3c>)
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	42a6      	cmp	r6, r4
 800494a:	d109      	bne.n	8004960 <__libc_init_array+0x24>
 800494c:	f000 fa50 	bl	8004df0 <_init>
 8004950:	2600      	movs	r6, #0
 8004952:	4d0a      	ldr	r5, [pc, #40]	@ (800497c <__libc_init_array+0x40>)
 8004954:	4c0a      	ldr	r4, [pc, #40]	@ (8004980 <__libc_init_array+0x44>)
 8004956:	1b64      	subs	r4, r4, r5
 8004958:	10a4      	asrs	r4, r4, #2
 800495a:	42a6      	cmp	r6, r4
 800495c:	d105      	bne.n	800496a <__libc_init_array+0x2e>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	f855 3b04 	ldr.w	r3, [r5], #4
 8004964:	4798      	blx	r3
 8004966:	3601      	adds	r6, #1
 8004968:	e7ee      	b.n	8004948 <__libc_init_array+0xc>
 800496a:	f855 3b04 	ldr.w	r3, [r5], #4
 800496e:	4798      	blx	r3
 8004970:	3601      	adds	r6, #1
 8004972:	e7f2      	b.n	800495a <__libc_init_array+0x1e>
 8004974:	08004e88 	.word	0x08004e88
 8004978:	08004e88 	.word	0x08004e88
 800497c:	08004e88 	.word	0x08004e88
 8004980:	08004e8c 	.word	0x08004e8c

08004984 <__retarget_lock_init_recursive>:
 8004984:	4770      	bx	lr

08004986 <__retarget_lock_acquire_recursive>:
 8004986:	4770      	bx	lr

08004988 <__retarget_lock_release_recursive>:
 8004988:	4770      	bx	lr
	...

0800498c <_free_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4605      	mov	r5, r0
 8004990:	2900      	cmp	r1, #0
 8004992:	d040      	beq.n	8004a16 <_free_r+0x8a>
 8004994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004998:	1f0c      	subs	r4, r1, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfb8      	it	lt
 800499e:	18e4      	addlt	r4, r4, r3
 80049a0:	f000 f8de 	bl	8004b60 <__malloc_lock>
 80049a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a18 <_free_r+0x8c>)
 80049a6:	6813      	ldr	r3, [r2, #0]
 80049a8:	b933      	cbnz	r3, 80049b8 <_free_r+0x2c>
 80049aa:	6063      	str	r3, [r4, #4]
 80049ac:	6014      	str	r4, [r2, #0]
 80049ae:	4628      	mov	r0, r5
 80049b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b4:	f000 b8da 	b.w	8004b6c <__malloc_unlock>
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	d908      	bls.n	80049ce <_free_r+0x42>
 80049bc:	6820      	ldr	r0, [r4, #0]
 80049be:	1821      	adds	r1, r4, r0
 80049c0:	428b      	cmp	r3, r1
 80049c2:	bf01      	itttt	eq
 80049c4:	6819      	ldreq	r1, [r3, #0]
 80049c6:	685b      	ldreq	r3, [r3, #4]
 80049c8:	1809      	addeq	r1, r1, r0
 80049ca:	6021      	streq	r1, [r4, #0]
 80049cc:	e7ed      	b.n	80049aa <_free_r+0x1e>
 80049ce:	461a      	mov	r2, r3
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	b10b      	cbz	r3, 80049d8 <_free_r+0x4c>
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d9fa      	bls.n	80049ce <_free_r+0x42>
 80049d8:	6811      	ldr	r1, [r2, #0]
 80049da:	1850      	adds	r0, r2, r1
 80049dc:	42a0      	cmp	r0, r4
 80049de:	d10b      	bne.n	80049f8 <_free_r+0x6c>
 80049e0:	6820      	ldr	r0, [r4, #0]
 80049e2:	4401      	add	r1, r0
 80049e4:	1850      	adds	r0, r2, r1
 80049e6:	4283      	cmp	r3, r0
 80049e8:	6011      	str	r1, [r2, #0]
 80049ea:	d1e0      	bne.n	80049ae <_free_r+0x22>
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4408      	add	r0, r1
 80049f2:	6010      	str	r0, [r2, #0]
 80049f4:	6053      	str	r3, [r2, #4]
 80049f6:	e7da      	b.n	80049ae <_free_r+0x22>
 80049f8:	d902      	bls.n	8004a00 <_free_r+0x74>
 80049fa:	230c      	movs	r3, #12
 80049fc:	602b      	str	r3, [r5, #0]
 80049fe:	e7d6      	b.n	80049ae <_free_r+0x22>
 8004a00:	6820      	ldr	r0, [r4, #0]
 8004a02:	1821      	adds	r1, r4, r0
 8004a04:	428b      	cmp	r3, r1
 8004a06:	bf01      	itttt	eq
 8004a08:	6819      	ldreq	r1, [r3, #0]
 8004a0a:	685b      	ldreq	r3, [r3, #4]
 8004a0c:	1809      	addeq	r1, r1, r0
 8004a0e:	6021      	streq	r1, [r4, #0]
 8004a10:	6063      	str	r3, [r4, #4]
 8004a12:	6054      	str	r4, [r2, #4]
 8004a14:	e7cb      	b.n	80049ae <_free_r+0x22>
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	20000314 	.word	0x20000314

08004a1c <sbrk_aligned>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	4e0f      	ldr	r6, [pc, #60]	@ (8004a5c <sbrk_aligned+0x40>)
 8004a20:	460c      	mov	r4, r1
 8004a22:	6831      	ldr	r1, [r6, #0]
 8004a24:	4605      	mov	r5, r0
 8004a26:	b911      	cbnz	r1, 8004a2e <sbrk_aligned+0x12>
 8004a28:	f000 f9d2 	bl	8004dd0 <_sbrk_r>
 8004a2c:	6030      	str	r0, [r6, #0]
 8004a2e:	4621      	mov	r1, r4
 8004a30:	4628      	mov	r0, r5
 8004a32:	f000 f9cd 	bl	8004dd0 <_sbrk_r>
 8004a36:	1c43      	adds	r3, r0, #1
 8004a38:	d103      	bne.n	8004a42 <sbrk_aligned+0x26>
 8004a3a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a3e:	4620      	mov	r0, r4
 8004a40:	bd70      	pop	{r4, r5, r6, pc}
 8004a42:	1cc4      	adds	r4, r0, #3
 8004a44:	f024 0403 	bic.w	r4, r4, #3
 8004a48:	42a0      	cmp	r0, r4
 8004a4a:	d0f8      	beq.n	8004a3e <sbrk_aligned+0x22>
 8004a4c:	1a21      	subs	r1, r4, r0
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f000 f9be 	bl	8004dd0 <_sbrk_r>
 8004a54:	3001      	adds	r0, #1
 8004a56:	d1f2      	bne.n	8004a3e <sbrk_aligned+0x22>
 8004a58:	e7ef      	b.n	8004a3a <sbrk_aligned+0x1e>
 8004a5a:	bf00      	nop
 8004a5c:	20000310 	.word	0x20000310

08004a60 <_malloc_r>:
 8004a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a64:	1ccd      	adds	r5, r1, #3
 8004a66:	f025 0503 	bic.w	r5, r5, #3
 8004a6a:	3508      	adds	r5, #8
 8004a6c:	2d0c      	cmp	r5, #12
 8004a6e:	bf38      	it	cc
 8004a70:	250c      	movcc	r5, #12
 8004a72:	2d00      	cmp	r5, #0
 8004a74:	4606      	mov	r6, r0
 8004a76:	db01      	blt.n	8004a7c <_malloc_r+0x1c>
 8004a78:	42a9      	cmp	r1, r5
 8004a7a:	d904      	bls.n	8004a86 <_malloc_r+0x26>
 8004a7c:	230c      	movs	r3, #12
 8004a7e:	6033      	str	r3, [r6, #0]
 8004a80:	2000      	movs	r0, #0
 8004a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b5c <_malloc_r+0xfc>
 8004a8a:	f000 f869 	bl	8004b60 <__malloc_lock>
 8004a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a92:	461c      	mov	r4, r3
 8004a94:	bb44      	cbnz	r4, 8004ae8 <_malloc_r+0x88>
 8004a96:	4629      	mov	r1, r5
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f7ff ffbf 	bl	8004a1c <sbrk_aligned>
 8004a9e:	1c43      	adds	r3, r0, #1
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	d158      	bne.n	8004b56 <_malloc_r+0xf6>
 8004aa4:	f8d8 4000 	ldr.w	r4, [r8]
 8004aa8:	4627      	mov	r7, r4
 8004aaa:	2f00      	cmp	r7, #0
 8004aac:	d143      	bne.n	8004b36 <_malloc_r+0xd6>
 8004aae:	2c00      	cmp	r4, #0
 8004ab0:	d04b      	beq.n	8004b4a <_malloc_r+0xea>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	eb04 0903 	add.w	r9, r4, r3
 8004abc:	f000 f988 	bl	8004dd0 <_sbrk_r>
 8004ac0:	4581      	cmp	r9, r0
 8004ac2:	d142      	bne.n	8004b4a <_malloc_r+0xea>
 8004ac4:	6821      	ldr	r1, [r4, #0]
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	1a6d      	subs	r5, r5, r1
 8004aca:	4629      	mov	r1, r5
 8004acc:	f7ff ffa6 	bl	8004a1c <sbrk_aligned>
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d03a      	beq.n	8004b4a <_malloc_r+0xea>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	442b      	add	r3, r5
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	f8d8 3000 	ldr.w	r3, [r8]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	bb62      	cbnz	r2, 8004b3c <_malloc_r+0xdc>
 8004ae2:	f8c8 7000 	str.w	r7, [r8]
 8004ae6:	e00f      	b.n	8004b08 <_malloc_r+0xa8>
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	1b52      	subs	r2, r2, r5
 8004aec:	d420      	bmi.n	8004b30 <_malloc_r+0xd0>
 8004aee:	2a0b      	cmp	r2, #11
 8004af0:	d917      	bls.n	8004b22 <_malloc_r+0xc2>
 8004af2:	1961      	adds	r1, r4, r5
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	6025      	str	r5, [r4, #0]
 8004af8:	bf18      	it	ne
 8004afa:	6059      	strne	r1, [r3, #4]
 8004afc:	6863      	ldr	r3, [r4, #4]
 8004afe:	bf08      	it	eq
 8004b00:	f8c8 1000 	streq.w	r1, [r8]
 8004b04:	5162      	str	r2, [r4, r5]
 8004b06:	604b      	str	r3, [r1, #4]
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f000 f82f 	bl	8004b6c <__malloc_unlock>
 8004b0e:	f104 000b 	add.w	r0, r4, #11
 8004b12:	1d23      	adds	r3, r4, #4
 8004b14:	f020 0007 	bic.w	r0, r0, #7
 8004b18:	1ac2      	subs	r2, r0, r3
 8004b1a:	bf1c      	itt	ne
 8004b1c:	1a1b      	subne	r3, r3, r0
 8004b1e:	50a3      	strne	r3, [r4, r2]
 8004b20:	e7af      	b.n	8004a82 <_malloc_r+0x22>
 8004b22:	6862      	ldr	r2, [r4, #4]
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	bf0c      	ite	eq
 8004b28:	f8c8 2000 	streq.w	r2, [r8]
 8004b2c:	605a      	strne	r2, [r3, #4]
 8004b2e:	e7eb      	b.n	8004b08 <_malloc_r+0xa8>
 8004b30:	4623      	mov	r3, r4
 8004b32:	6864      	ldr	r4, [r4, #4]
 8004b34:	e7ae      	b.n	8004a94 <_malloc_r+0x34>
 8004b36:	463c      	mov	r4, r7
 8004b38:	687f      	ldr	r7, [r7, #4]
 8004b3a:	e7b6      	b.n	8004aaa <_malloc_r+0x4a>
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	d1fb      	bne.n	8004b3c <_malloc_r+0xdc>
 8004b44:	2300      	movs	r3, #0
 8004b46:	6053      	str	r3, [r2, #4]
 8004b48:	e7de      	b.n	8004b08 <_malloc_r+0xa8>
 8004b4a:	230c      	movs	r3, #12
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	6033      	str	r3, [r6, #0]
 8004b50:	f000 f80c 	bl	8004b6c <__malloc_unlock>
 8004b54:	e794      	b.n	8004a80 <_malloc_r+0x20>
 8004b56:	6005      	str	r5, [r0, #0]
 8004b58:	e7d6      	b.n	8004b08 <_malloc_r+0xa8>
 8004b5a:	bf00      	nop
 8004b5c:	20000314 	.word	0x20000314

08004b60 <__malloc_lock>:
 8004b60:	4801      	ldr	r0, [pc, #4]	@ (8004b68 <__malloc_lock+0x8>)
 8004b62:	f7ff bf10 	b.w	8004986 <__retarget_lock_acquire_recursive>
 8004b66:	bf00      	nop
 8004b68:	2000030c 	.word	0x2000030c

08004b6c <__malloc_unlock>:
 8004b6c:	4801      	ldr	r0, [pc, #4]	@ (8004b74 <__malloc_unlock+0x8>)
 8004b6e:	f7ff bf0b 	b.w	8004988 <__retarget_lock_release_recursive>
 8004b72:	bf00      	nop
 8004b74:	2000030c 	.word	0x2000030c

08004b78 <__sflush_r>:
 8004b78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7e:	0716      	lsls	r6, r2, #28
 8004b80:	4605      	mov	r5, r0
 8004b82:	460c      	mov	r4, r1
 8004b84:	d454      	bmi.n	8004c30 <__sflush_r+0xb8>
 8004b86:	684b      	ldr	r3, [r1, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	dc02      	bgt.n	8004b92 <__sflush_r+0x1a>
 8004b8c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	dd48      	ble.n	8004c24 <__sflush_r+0xac>
 8004b92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b94:	2e00      	cmp	r6, #0
 8004b96:	d045      	beq.n	8004c24 <__sflush_r+0xac>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b9e:	682f      	ldr	r7, [r5, #0]
 8004ba0:	6a21      	ldr	r1, [r4, #32]
 8004ba2:	602b      	str	r3, [r5, #0]
 8004ba4:	d030      	beq.n	8004c08 <__sflush_r+0x90>
 8004ba6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	0759      	lsls	r1, r3, #29
 8004bac:	d505      	bpl.n	8004bba <__sflush_r+0x42>
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	1ad2      	subs	r2, r2, r3
 8004bb2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bb4:	b10b      	cbz	r3, 8004bba <__sflush_r+0x42>
 8004bb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bb8:	1ad2      	subs	r2, r2, r3
 8004bba:	2300      	movs	r3, #0
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bc0:	6a21      	ldr	r1, [r4, #32]
 8004bc2:	47b0      	blx	r6
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	d106      	bne.n	8004bd8 <__sflush_r+0x60>
 8004bca:	6829      	ldr	r1, [r5, #0]
 8004bcc:	291d      	cmp	r1, #29
 8004bce:	d82b      	bhi.n	8004c28 <__sflush_r+0xb0>
 8004bd0:	4a28      	ldr	r2, [pc, #160]	@ (8004c74 <__sflush_r+0xfc>)
 8004bd2:	40ca      	lsrs	r2, r1
 8004bd4:	07d6      	lsls	r6, r2, #31
 8004bd6:	d527      	bpl.n	8004c28 <__sflush_r+0xb0>
 8004bd8:	2200      	movs	r2, #0
 8004bda:	6062      	str	r2, [r4, #4]
 8004bdc:	6922      	ldr	r2, [r4, #16]
 8004bde:	04d9      	lsls	r1, r3, #19
 8004be0:	6022      	str	r2, [r4, #0]
 8004be2:	d504      	bpl.n	8004bee <__sflush_r+0x76>
 8004be4:	1c42      	adds	r2, r0, #1
 8004be6:	d101      	bne.n	8004bec <__sflush_r+0x74>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b903      	cbnz	r3, 8004bee <__sflush_r+0x76>
 8004bec:	6560      	str	r0, [r4, #84]	@ 0x54
 8004bee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bf0:	602f      	str	r7, [r5, #0]
 8004bf2:	b1b9      	cbz	r1, 8004c24 <__sflush_r+0xac>
 8004bf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bf8:	4299      	cmp	r1, r3
 8004bfa:	d002      	beq.n	8004c02 <__sflush_r+0x8a>
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f7ff fec5 	bl	800498c <_free_r>
 8004c02:	2300      	movs	r3, #0
 8004c04:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c06:	e00d      	b.n	8004c24 <__sflush_r+0xac>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b0      	blx	r6
 8004c0e:	4602      	mov	r2, r0
 8004c10:	1c50      	adds	r0, r2, #1
 8004c12:	d1c9      	bne.n	8004ba8 <__sflush_r+0x30>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0c6      	beq.n	8004ba8 <__sflush_r+0x30>
 8004c1a:	2b1d      	cmp	r3, #29
 8004c1c:	d001      	beq.n	8004c22 <__sflush_r+0xaa>
 8004c1e:	2b16      	cmp	r3, #22
 8004c20:	d11d      	bne.n	8004c5e <__sflush_r+0xe6>
 8004c22:	602f      	str	r7, [r5, #0]
 8004c24:	2000      	movs	r0, #0
 8004c26:	e021      	b.n	8004c6c <__sflush_r+0xf4>
 8004c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c2c:	b21b      	sxth	r3, r3
 8004c2e:	e01a      	b.n	8004c66 <__sflush_r+0xee>
 8004c30:	690f      	ldr	r7, [r1, #16]
 8004c32:	2f00      	cmp	r7, #0
 8004c34:	d0f6      	beq.n	8004c24 <__sflush_r+0xac>
 8004c36:	0793      	lsls	r3, r2, #30
 8004c38:	bf18      	it	ne
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	680e      	ldr	r6, [r1, #0]
 8004c3e:	bf08      	it	eq
 8004c40:	694b      	ldreq	r3, [r1, #20]
 8004c42:	1bf6      	subs	r6, r6, r7
 8004c44:	600f      	str	r7, [r1, #0]
 8004c46:	608b      	str	r3, [r1, #8]
 8004c48:	2e00      	cmp	r6, #0
 8004c4a:	ddeb      	ble.n	8004c24 <__sflush_r+0xac>
 8004c4c:	4633      	mov	r3, r6
 8004c4e:	463a      	mov	r2, r7
 8004c50:	4628      	mov	r0, r5
 8004c52:	6a21      	ldr	r1, [r4, #32]
 8004c54:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004c58:	47e0      	blx	ip
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	dc07      	bgt.n	8004c6e <__sflush_r+0xf6>
 8004c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c66:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c6e:	4407      	add	r7, r0
 8004c70:	1a36      	subs	r6, r6, r0
 8004c72:	e7e9      	b.n	8004c48 <__sflush_r+0xd0>
 8004c74:	20400001 	.word	0x20400001

08004c78 <_fflush_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	690b      	ldr	r3, [r1, #16]
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	b913      	cbnz	r3, 8004c88 <_fflush_r+0x10>
 8004c82:	2500      	movs	r5, #0
 8004c84:	4628      	mov	r0, r5
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	b118      	cbz	r0, 8004c92 <_fflush_r+0x1a>
 8004c8a:	6a03      	ldr	r3, [r0, #32]
 8004c8c:	b90b      	cbnz	r3, 8004c92 <_fflush_r+0x1a>
 8004c8e:	f7ff fc95 	bl	80045bc <__sinit>
 8004c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f3      	beq.n	8004c82 <_fflush_r+0xa>
 8004c9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c9c:	07d0      	lsls	r0, r2, #31
 8004c9e:	d404      	bmi.n	8004caa <_fflush_r+0x32>
 8004ca0:	0599      	lsls	r1, r3, #22
 8004ca2:	d402      	bmi.n	8004caa <_fflush_r+0x32>
 8004ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ca6:	f7ff fe6e 	bl	8004986 <__retarget_lock_acquire_recursive>
 8004caa:	4628      	mov	r0, r5
 8004cac:	4621      	mov	r1, r4
 8004cae:	f7ff ff63 	bl	8004b78 <__sflush_r>
 8004cb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	07da      	lsls	r2, r3, #31
 8004cb8:	d4e4      	bmi.n	8004c84 <_fflush_r+0xc>
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	059b      	lsls	r3, r3, #22
 8004cbe:	d4e1      	bmi.n	8004c84 <_fflush_r+0xc>
 8004cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cc2:	f7ff fe61 	bl	8004988 <__retarget_lock_release_recursive>
 8004cc6:	e7dd      	b.n	8004c84 <_fflush_r+0xc>

08004cc8 <__swhatbuf_r>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	460c      	mov	r4, r1
 8004ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd0:	4615      	mov	r5, r2
 8004cd2:	2900      	cmp	r1, #0
 8004cd4:	461e      	mov	r6, r3
 8004cd6:	b096      	sub	sp, #88	@ 0x58
 8004cd8:	da0c      	bge.n	8004cf4 <__swhatbuf_r+0x2c>
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	2100      	movs	r1, #0
 8004cde:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ce2:	bf14      	ite	ne
 8004ce4:	2340      	movne	r3, #64	@ 0x40
 8004ce6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004cea:	2000      	movs	r0, #0
 8004cec:	6031      	str	r1, [r6, #0]
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	b016      	add	sp, #88	@ 0x58
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	466a      	mov	r2, sp
 8004cf6:	f000 f849 	bl	8004d8c <_fstat_r>
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	dbed      	blt.n	8004cda <__swhatbuf_r+0x12>
 8004cfe:	9901      	ldr	r1, [sp, #4]
 8004d00:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d04:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d08:	4259      	negs	r1, r3
 8004d0a:	4159      	adcs	r1, r3
 8004d0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d10:	e7eb      	b.n	8004cea <__swhatbuf_r+0x22>

08004d12 <__smakebuf_r>:
 8004d12:	898b      	ldrh	r3, [r1, #12]
 8004d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d16:	079d      	lsls	r5, r3, #30
 8004d18:	4606      	mov	r6, r0
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	d507      	bpl.n	8004d2e <__smakebuf_r+0x1c>
 8004d1e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d22:	6023      	str	r3, [r4, #0]
 8004d24:	6123      	str	r3, [r4, #16]
 8004d26:	2301      	movs	r3, #1
 8004d28:	6163      	str	r3, [r4, #20]
 8004d2a:	b003      	add	sp, #12
 8004d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d2e:	466a      	mov	r2, sp
 8004d30:	ab01      	add	r3, sp, #4
 8004d32:	f7ff ffc9 	bl	8004cc8 <__swhatbuf_r>
 8004d36:	9f00      	ldr	r7, [sp, #0]
 8004d38:	4605      	mov	r5, r0
 8004d3a:	4639      	mov	r1, r7
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f7ff fe8f 	bl	8004a60 <_malloc_r>
 8004d42:	b948      	cbnz	r0, 8004d58 <__smakebuf_r+0x46>
 8004d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d48:	059a      	lsls	r2, r3, #22
 8004d4a:	d4ee      	bmi.n	8004d2a <__smakebuf_r+0x18>
 8004d4c:	f023 0303 	bic.w	r3, r3, #3
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	81a3      	strh	r3, [r4, #12]
 8004d56:	e7e2      	b.n	8004d1e <__smakebuf_r+0xc>
 8004d58:	89a3      	ldrh	r3, [r4, #12]
 8004d5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d62:	81a3      	strh	r3, [r4, #12]
 8004d64:	9b01      	ldr	r3, [sp, #4]
 8004d66:	6020      	str	r0, [r4, #0]
 8004d68:	b15b      	cbz	r3, 8004d82 <__smakebuf_r+0x70>
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d70:	f000 f81e 	bl	8004db0 <_isatty_r>
 8004d74:	b128      	cbz	r0, 8004d82 <__smakebuf_r+0x70>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	f023 0303 	bic.w	r3, r3, #3
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	81a3      	strh	r3, [r4, #12]
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	431d      	orrs	r5, r3
 8004d86:	81a5      	strh	r5, [r4, #12]
 8004d88:	e7cf      	b.n	8004d2a <__smakebuf_r+0x18>
	...

08004d8c <_fstat_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	2300      	movs	r3, #0
 8004d90:	4d06      	ldr	r5, [pc, #24]	@ (8004dac <_fstat_r+0x20>)
 8004d92:	4604      	mov	r4, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	4611      	mov	r1, r2
 8004d98:	602b      	str	r3, [r5, #0]
 8004d9a:	f7fc f8e5 	bl	8000f68 <_fstat>
 8004d9e:	1c43      	adds	r3, r0, #1
 8004da0:	d102      	bne.n	8004da8 <_fstat_r+0x1c>
 8004da2:	682b      	ldr	r3, [r5, #0]
 8004da4:	b103      	cbz	r3, 8004da8 <_fstat_r+0x1c>
 8004da6:	6023      	str	r3, [r4, #0]
 8004da8:	bd38      	pop	{r3, r4, r5, pc}
 8004daa:	bf00      	nop
 8004dac:	20000308 	.word	0x20000308

08004db0 <_isatty_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	2300      	movs	r3, #0
 8004db4:	4d05      	ldr	r5, [pc, #20]	@ (8004dcc <_isatty_r+0x1c>)
 8004db6:	4604      	mov	r4, r0
 8004db8:	4608      	mov	r0, r1
 8004dba:	602b      	str	r3, [r5, #0]
 8004dbc:	f7fc f8e3 	bl	8000f86 <_isatty>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d102      	bne.n	8004dca <_isatty_r+0x1a>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	b103      	cbz	r3, 8004dca <_isatty_r+0x1a>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	20000308 	.word	0x20000308

08004dd0 <_sbrk_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	4d05      	ldr	r5, [pc, #20]	@ (8004dec <_sbrk_r+0x1c>)
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	602b      	str	r3, [r5, #0]
 8004ddc:	f7fc f8ea 	bl	8000fb4 <_sbrk>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_sbrk_r+0x1a>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_sbrk_r+0x1a>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	20000308 	.word	0x20000308

08004df0 <_init>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	bf00      	nop
 8004df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df6:	bc08      	pop	{r3}
 8004df8:	469e      	mov	lr, r3
 8004dfa:	4770      	bx	lr

08004dfc <_fini>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	bf00      	nop
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr
