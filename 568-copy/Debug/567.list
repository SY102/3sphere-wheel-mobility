
567.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080027f8  080027f8  000037f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002828  08002828  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002828  08002828  00003828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002830  08002830  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002830  08002830  00003830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002834  08002834  00003834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002838  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002844  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002844  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057ba  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f3  00000000  00000000  000097ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0000aee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000596  00000000  00000000  0000b680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017347  00000000  00000000  0000bc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000085c8  00000000  00000000  00022f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081a80  00000000  00000000  0002b525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000acfa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf8  00000000  00000000  000acfe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000aece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027e0 	.word	0x080027e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080027e0 	.word	0x080027e0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 8000164:	2201      	movs	r2, #1
 8000166:	2108      	movs	r1, #8
 8000168:	4802      	ldr	r0, [pc, #8]	@ (8000174 <csn_high+0x14>)
 800016a:	f001 f981 	bl	8001470 <HAL_GPIO_WritePin>
}
 800016e:	bf00      	nop
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40010800 	.word	0x40010800

08000178 <csn_low>:

void csn_low(void){
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 800017c:	2200      	movs	r2, #0
 800017e:	2108      	movs	r1, #8
 8000180:	4802      	ldr	r0, [pc, #8]	@ (800018c <csn_low+0x14>)
 8000182:	f001 f975 	bl	8001470 <HAL_GPIO_WritePin>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800

08000190 <ce_high>:

void ce_high(void){
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 8000194:	2201      	movs	r2, #1
 8000196:	2110      	movs	r1, #16
 8000198:	4802      	ldr	r0, [pc, #8]	@ (80001a4 <ce_high+0x14>)
 800019a:	f001 f969 	bl	8001470 <HAL_GPIO_WritePin>
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40010800 	.word	0x40010800

080001a8 <ce_low>:

void ce_low(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
 80001ac:	2200      	movs	r2, #0
 80001ae:	2110      	movs	r1, #16
 80001b0:	4802      	ldr	r0, [pc, #8]	@ (80001bc <ce_low+0x14>)
 80001b2:	f001 f95d 	bl	8001470 <HAL_GPIO_WritePin>
}
 80001b6:	bf00      	nop
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010800 	.word	0x40010800

080001c0 <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	6039      	str	r1, [r7, #0]
 80001ca:	71fb      	strb	r3, [r7, #7]
 80001cc:	4613      	mov	r3, r2
 80001ce:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80001da:	f7ff ffcd 	bl	8000178 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80001de:	f107 010f 	add.w	r1, r7, #15
 80001e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e6:	2201      	movs	r2, #1
 80001e8:	4808      	ldr	r0, [pc, #32]	@ (800020c <nrf24_w_reg+0x4c>)
 80001ea:	f001 fdbb 	bl	8001d64 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	b29a      	uxth	r2, r3
 80001f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001f6:	6839      	ldr	r1, [r7, #0]
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <nrf24_w_reg+0x4c>)
 80001fa:	f001 fdb3 	bl	8001d64 <HAL_SPI_Transmit>

	csn_high();
 80001fe:	f7ff ffaf 	bl	8000160 <csn_high>
}
 8000202:	bf00      	nop
 8000204:	3710      	adds	r7, #16
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000028 	.word	0x20000028

08000210 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	460a      	mov	r2, r1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	4613      	mov	r3, r2
 800021e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000228:	f7ff ffa6 	bl	8000178 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800022c:	f107 010f 	add.w	r1, r7, #15
 8000230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000234:	2201      	movs	r2, #1
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <nrf24_r_reg+0x4c>)
 8000238:	f001 fd94 	bl	8001d64 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	b29a      	uxth	r2, r3
 8000240:	f107 010e 	add.w	r1, r7, #14
 8000244:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000248:	4804      	ldr	r0, [pc, #16]	@ (800025c <nrf24_r_reg+0x4c>)
 800024a:	f001 fecf 	bl	8001fec <HAL_SPI_Receive>

	csn_high();
 800024e:	f7ff ff87 	bl	8000160 <csn_high>

	return data;
 8000252:	7bbb      	ldrb	r3, [r7, #14]
}
 8000254:	4618      	mov	r0, r3
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000028 	.word	0x20000028

08000260 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800026a:	1df9      	adds	r1, r7, #7
 800026c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000270:	2201      	movs	r2, #1
 8000272:	4803      	ldr	r0, [pc, #12]	@ (8000280 <nrf24_w_spec_cmd+0x20>)
 8000274:	f001 fd76 	bl	8001d64 <HAL_SPI_Transmit>
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000028 	.word	0x20000028

08000284 <nrf24_pwr_dwn>:
	data |= (1 << PWR_UP);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_pwr_dwn(void){
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800028e:	2101      	movs	r1, #1
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ffbd 	bl	8000210 <nrf24_r_reg>
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PWR_UP);
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f023 0302 	bic.w	r3, r3, #2
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	2201      	movs	r2, #1
 80002a8:	4619      	mov	r1, r3
 80002aa:	2000      	movs	r0, #0
 80002ac:	f7ff ff88 	bl	80001c0 <nrf24_w_reg>
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <nrf24_tx_pwr>:

void nrf24_tx_pwr(uint8_t pwr){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80002c6:	2101      	movs	r1, #1
 80002c8:	2006      	movs	r0, #6
 80002ca:	f7ff ffa1 	bl	8000210 <nrf24_r_reg>
 80002ce:	4603      	mov	r3, r0
 80002d0:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
 80002d4:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	b25a      	sxtb	r2, r3
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	b25b      	sxtb	r3, r3
 80002e6:	4313      	orrs	r3, r2
 80002e8:	b25b      	sxtb	r3, r3
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 80002ee:	f107 030f 	add.w	r3, r7, #15
 80002f2:	2201      	movs	r2, #1
 80002f4:	4619      	mov	r1, r3
 80002f6:	2006      	movs	r0, #6
 80002f8:	f7ff ff62 	bl	80001c0 <nrf24_w_reg>
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000312:	2101      	movs	r1, #1
 8000314:	2006      	movs	r0, #6
 8000316:	f7ff ff7b 	bl	8000210 <nrf24_r_reg>
 800031a:	4603      	mov	r3, r0
 800031c:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 800031e:	7bfb      	ldrb	r3, [r7, #15]
 8000320:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000324:	b2db      	uxtb	r3, r3
 8000326:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d105      	bne.n	800033a <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 800032e:	7bfb      	ldrb	r3, [r7, #15]
 8000330:	f043 0308 	orr.w	r3, r3, #8
 8000334:	b2db      	uxtb	r3, r3
 8000336:	73fb      	strb	r3, [r7, #15]
 8000338:	e007      	b.n	800034a <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b02      	cmp	r3, #2
 800033e:	d104      	bne.n	800034a <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	b2db      	uxtb	r3, r3
 8000348:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 800034a:	f107 030f 	add.w	r3, r7, #15
 800034e:	2201      	movs	r2, #1
 8000350:	4619      	mov	r1, r3
 8000352:	2006      	movs	r0, #6
 8000354:	f7ff ff34 	bl	80001c0 <nrf24_w_reg>
}
 8000358:	bf00      	nop
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 800036a:	1dfb      	adds	r3, r7, #7
 800036c:	2201      	movs	r2, #1
 800036e:	4619      	mov	r1, r3
 8000370:	2005      	movs	r0, #5
 8000372:	f7ff ff25 	bl	80001c0 <nrf24_w_reg>
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <nrf24_pipe_pld_size>:

void nrf24_open_tx_pipe(uint8_t *addr){
	nrf24_w_reg(TX_ADDR, addr, 5);
}

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	460a      	mov	r2, r1
 800038a:	71fb      	strb	r3, [r7, #7]
 800038c:	4613      	mov	r3, r2
 800038e:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	2b20      	cmp	r3, #32
 8000394:	d901      	bls.n	800039a <nrf24_pipe_pld_size+0x1a>
		size = 32;
 8000396:	2320      	movs	r3, #32
 8000398:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2b05      	cmp	r3, #5
 800039e:	d839      	bhi.n	8000414 <nrf24_pipe_pld_size+0x94>
 80003a0:	a201      	add	r2, pc, #4	@ (adr r2, 80003a8 <nrf24_pipe_pld_size+0x28>)
 80003a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a6:	bf00      	nop
 80003a8:	080003c1 	.word	0x080003c1
 80003ac:	080003cf 	.word	0x080003cf
 80003b0:	080003dd 	.word	0x080003dd
 80003b4:	080003eb 	.word	0x080003eb
 80003b8:	080003f9 	.word	0x080003f9
 80003bc:	08000407 	.word	0x08000407
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 80003c0:	1dbb      	adds	r3, r7, #6
 80003c2:	2201      	movs	r2, #1
 80003c4:	4619      	mov	r1, r3
 80003c6:	2011      	movs	r0, #17
 80003c8:	f7ff fefa 	bl	80001c0 <nrf24_w_reg>

		break;
 80003cc:	e022      	b.n	8000414 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 80003ce:	1dbb      	adds	r3, r7, #6
 80003d0:	2201      	movs	r2, #1
 80003d2:	4619      	mov	r1, r3
 80003d4:	2012      	movs	r0, #18
 80003d6:	f7ff fef3 	bl	80001c0 <nrf24_w_reg>

		break;
 80003da:	e01b      	b.n	8000414 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 80003dc:	1dbb      	adds	r3, r7, #6
 80003de:	2201      	movs	r2, #1
 80003e0:	4619      	mov	r1, r3
 80003e2:	2013      	movs	r0, #19
 80003e4:	f7ff feec 	bl	80001c0 <nrf24_w_reg>

		break;
 80003e8:	e014      	b.n	8000414 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 80003ea:	1dbb      	adds	r3, r7, #6
 80003ec:	2201      	movs	r2, #1
 80003ee:	4619      	mov	r1, r3
 80003f0:	2014      	movs	r0, #20
 80003f2:	f7ff fee5 	bl	80001c0 <nrf24_w_reg>

		break;
 80003f6:	e00d      	b.n	8000414 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 80003f8:	1dbb      	adds	r3, r7, #6
 80003fa:	2201      	movs	r2, #1
 80003fc:	4619      	mov	r1, r3
 80003fe:	2015      	movs	r0, #21
 8000400:	f7ff fede 	bl	80001c0 <nrf24_w_reg>

		break;
 8000404:	e006      	b.n	8000414 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000406:	1dbb      	adds	r3, r7, #6
 8000408:	2201      	movs	r2, #1
 800040a:	4619      	mov	r1, r3
 800040c:	2016      	movs	r0, #22
 800040e:	f7ff fed7 	bl	80001c0 <nrf24_w_reg>

		break;
 8000412:	bf00      	nop
	}
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	6039      	str	r1, [r7, #0]
 8000426:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 800042c:	2101      	movs	r1, #1
 800042e:	2002      	movs	r0, #2
 8000430:	f7ff feee 	bl	8000210 <nrf24_r_reg>
 8000434:	4603      	mov	r3, r0
 8000436:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	2b05      	cmp	r3, #5
 800043c:	d850      	bhi.n	80004e0 <nrf24_open_rx_pipe+0xc4>
 800043e:	a201      	add	r2, pc, #4	@ (adr r2, 8000444 <nrf24_open_rx_pipe+0x28>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	0800045d 	.word	0x0800045d
 8000448:	08000473 	.word	0x08000473
 800044c:	08000489 	.word	0x08000489
 8000450:	0800049f 	.word	0x0800049f
 8000454:	080004b5 	.word	0x080004b5
 8000458:	080004cb 	.word	0x080004cb
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 800045c:	2205      	movs	r2, #5
 800045e:	6839      	ldr	r1, [r7, #0]
 8000460:	200a      	movs	r0, #10
 8000462:	f7ff fead 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	b2db      	uxtb	r3, r3
 800046e:	73fb      	strb	r3, [r7, #15]
		break;
 8000470:	e036      	b.n	80004e0 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 8000472:	2205      	movs	r2, #5
 8000474:	6839      	ldr	r1, [r7, #0]
 8000476:	200b      	movs	r0, #11
 8000478:	f7ff fea2 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	f043 0302 	orr.w	r3, r3, #2
 8000482:	b2db      	uxtb	r3, r3
 8000484:	73fb      	strb	r3, [r7, #15]
		break;
 8000486:	e02b      	b.n	80004e0 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8000488:	2201      	movs	r2, #1
 800048a:	6839      	ldr	r1, [r7, #0]
 800048c:	200c      	movs	r0, #12
 800048e:	f7ff fe97 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	f043 0304 	orr.w	r3, r3, #4
 8000498:	b2db      	uxtb	r3, r3
 800049a:	73fb      	strb	r3, [r7, #15]
		break;
 800049c:	e020      	b.n	80004e0 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 800049e:	2201      	movs	r2, #1
 80004a0:	6839      	ldr	r1, [r7, #0]
 80004a2:	200d      	movs	r0, #13
 80004a4:	f7ff fe8c 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	73fb      	strb	r3, [r7, #15]
		break;
 80004b2:	e015      	b.n	80004e0 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 80004b4:	2201      	movs	r2, #1
 80004b6:	6839      	ldr	r1, [r7, #0]
 80004b8:	200e      	movs	r0, #14
 80004ba:	f7ff fe81 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 80004be:	7bfb      	ldrb	r3, [r7, #15]
 80004c0:	f043 0310 	orr.w	r3, r3, #16
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	73fb      	strb	r3, [r7, #15]
		break;
 80004c8:	e00a      	b.n	80004e0 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 80004ca:	2201      	movs	r2, #1
 80004cc:	6839      	ldr	r1, [r7, #0]
 80004ce:	200f      	movs	r0, #15
 80004d0:	f7ff fe76 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	f043 0320 	orr.w	r3, r3, #32
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	73fb      	strb	r3, [r7, #15]
		break;
 80004de:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 80004e0:	f107 030f 	add.w	r3, r7, #15
 80004e4:	2201      	movs	r2, #1
 80004e6:	4619      	mov	r1, r3
 80004e8:	2002      	movs	r0, #2
 80004ea:	f7ff fe69 	bl	80001c0 <nrf24_w_reg>
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop

080004f8 <nrf24_cls_rx_pipe>:

void nrf24_cls_rx_pipe(uint8_t pipe){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(EN_RXADDR, 1);
 8000502:	2101      	movs	r1, #1
 8000504:	2002      	movs	r0, #2
 8000506:	f7ff fe83 	bl	8000210 <nrf24_r_reg>
 800050a:	4603      	mov	r3, r0
 800050c:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << pipe);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2201      	movs	r2, #1
 8000512:	fa02 f303 	lsl.w	r3, r2, r3
 8000516:	b25b      	sxtb	r3, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	b25a      	sxtb	r2, r3
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	b25b      	sxtb	r3, r3
 8000520:	4013      	ands	r3, r2
 8000522:	b25b      	sxtb	r3, r3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000528:	f107 030f 	add.w	r3, r7, #15
 800052c:	2201      	movs	r2, #1
 800052e:	4619      	mov	r1, r3
 8000530:	2002      	movs	r0, #2
 8000532:	f7ff fe45 	bl	80001c0 <nrf24_w_reg>
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <nrf24_set_crc>:

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 800053e:	b580      	push	{r7, lr}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	4603      	mov	r3, r0
 8000546:	460a      	mov	r2, r1
 8000548:	71fb      	strb	r3, [r7, #7]
 800054a:	4613      	mov	r3, r2
 800054c:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 800054e:	2101      	movs	r1, #1
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff fe5d 	bl	8000210 <nrf24_r_reg>
 8000556:	4603      	mov	r3, r0
 8000558:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	f023 030c 	bic.w	r3, r3, #12
 8000560:	b2db      	uxtb	r3, r3
 8000562:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	b25a      	sxtb	r2, r3
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	b25b      	sxtb	r3, r3
 8000570:	4313      	orrs	r3, r2
 8000572:	b25a      	sxtb	r2, r3
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	b25b      	sxtb	r3, r3
 8000578:	4313      	orrs	r3, r2
 800057a:	b25b      	sxtb	r3, r3
 800057c:	b2db      	uxtb	r3, r3
 800057e:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 8000580:	f107 030f 	add.w	r3, r7, #15
 8000584:	2201      	movs	r2, #1
 8000586:	4619      	mov	r1, r3
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff fe19 	bl	80001c0 <nrf24_w_reg>
}
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	3b02      	subs	r3, #2
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	2201      	movs	r2, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	2003      	movs	r0, #3
 80005b0:	f7ff fe06 	bl	80001c0 <nrf24_w_reg>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	csn_low();
 80005c0:	f7ff fdda 	bl	8000178 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 80005c4:	20e1      	movs	r0, #225	@ 0xe1
 80005c6:	f7ff fe4b 	bl	8000260 <nrf24_w_spec_cmd>
	csn_high();
 80005ca:	f7ff fdc9 	bl	8000160 <csn_high>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 80005d2:	b580      	push	{r7, lr}
 80005d4:	af00      	add	r7, sp, #0
	csn_low();
 80005d6:	f7ff fdcf 	bl	8000178 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 80005da:	20e2      	movs	r0, #226	@ 0xe2
 80005dc:	f7ff fe40 	bl	8000260 <nrf24_w_spec_cmd>
	csn_high();
 80005e0:	f7ff fdbe 	bl	8000160 <csn_high>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 80005f2:	23ff      	movs	r3, #255	@ 0xff
 80005f4:	71bb      	strb	r3, [r7, #6]

	csn_low();
 80005f6:	f7ff fdbf 	bl	8000178 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 80005fa:	1dfa      	adds	r2, r7, #7
 80005fc:	1db9      	adds	r1, r7, #6
 80005fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	4805      	ldr	r0, [pc, #20]	@ (800061c <nrf24_r_status+0x34>)
 8000608:	f001 fe09 	bl	800221e <HAL_SPI_TransmitReceive>
	csn_high();
 800060c:	f7ff fda8 	bl	8000160 <csn_high>

	return data;
 8000610:	79fb      	ldrb	r3, [r7, #7]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000028 	.word	0x20000028

08000620 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800062a:	f7ff ffdd 	bl	80005e8 <nrf24_r_status>
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000638:	b2db      	uxtb	r3, r3
 800063a:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	2201      	movs	r2, #1
 8000640:	4619      	mov	r1, r3
 8000642:	2007      	movs	r0, #7
 8000644:	f7ff fdbc 	bl	80001c0 <nrf24_w_reg>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800065a:	f7ff ffc5 	bl	80005e8 <nrf24_r_status>
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	f043 0320 	orr.w	r3, r3, #32
 8000668:	b2db      	uxtb	r3, r3
 800066a:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	2201      	movs	r2, #1
 8000670:	4619      	mov	r1, r3
 8000672:	2007      	movs	r0, #7
 8000674:	f7ff fda4 	bl	80001c0 <nrf24_w_reg>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800068a:	f7ff ffad 	bl	80005e8 <nrf24_r_status>
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f043 0310 	orr.w	r3, r3, #16
 8000698:	b2db      	uxtb	r3, r3
 800069a:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	2007      	movs	r0, #7
 80006a4:	f7ff fd8c 	bl	80001c0 <nrf24_w_reg>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <nrf24_listen>:
	csn_high();

	return width;
}

void nrf24_listen(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80006ba:	2101      	movs	r1, #1
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff fda7 	bl	8000210 <nrf24_r_reg>
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PRIM_RX);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	2201      	movs	r2, #1
 80006d4:	4619      	mov	r1, r3
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff fd72 	bl	80001c0 <nrf24_w_reg>

	ce_high();
 80006dc:	f7ff fd58 	bl	8000190 <ce_high>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <nrf24_stop_listen>:

void nrf24_stop_listen(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80006f2:	2101      	movs	r1, #1
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fd8b 	bl	8000210 <nrf24_r_reg>
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f023 0301 	bic.w	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	2201      	movs	r2, #1
 800070c:	4619      	mov	r1, r3
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff fd56 	bl	80001c0 <nrf24_w_reg>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000726:	2101      	movs	r1, #1
 8000728:	201d      	movs	r0, #29
 800072a:	f7ff fd71 	bl	8000210 <nrf24_r_reg>
 800072e:	4603      	mov	r3, r0
 8000730:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d105      	bne.n	8000744 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	b2db      	uxtb	r3, r3
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	e004      	b.n	800074e <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	f023 0304 	bic.w	r3, r3, #4
 800074a:	b2db      	uxtb	r3, r3
 800074c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800074e:	f107 030f 	add.w	r3, r7, #15
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	201d      	movs	r0, #29
 8000758:	f7ff fd32 	bl	80001c0 <nrf24_w_reg>
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <nrf24_set_rx_dpl>:

void nrf24_set_rx_dpl(uint8_t pipe, uint8_t en){
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	460a      	mov	r2, r1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	4613      	mov	r3, r2
 8000772:	71bb      	strb	r3, [r7, #6]

	uint8_t dynpd = nrf24_r_reg(DYNPD, 1);
 8000774:	2101      	movs	r1, #1
 8000776:	201c      	movs	r0, #28
 8000778:	f7ff fd4a 	bl	8000210 <nrf24_r_reg>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]

	if(pipe > 5){
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b05      	cmp	r3, #5
 8000784:	d901      	bls.n	800078a <nrf24_set_rx_dpl+0x26>
		pipe = 5;
 8000786:	2305      	movs	r3, #5
 8000788:	71fb      	strb	r3, [r7, #7]
	}

	if(en){
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00b      	beq.n	80007a8 <nrf24_set_rx_dpl+0x44>
		dynpd |= (1 << pipe);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2201      	movs	r2, #1
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	b25a      	sxtb	r2, r3
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	b25b      	sxtb	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	e00c      	b.n	80007c2 <nrf24_set_rx_dpl+0x5e>
	}else{
		dynpd &= ~(1 << pipe);
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2201      	movs	r2, #1
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	43db      	mvns	r3, r3
 80007b4:	b25a      	sxtb	r2, r3
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	4013      	ands	r3, r2
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
 80007c2:	f107 030f 	add.w	r3, r7, #15
 80007c6:	2201      	movs	r2, #1
 80007c8:	4619      	mov	r1, r3
 80007ca:	201c      	movs	r0, #28
 80007cc:	f7ff fcf8 	bl	80001c0 <nrf24_w_reg>
}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <nrf24_auto_ack>:

void nrf24_auto_ack(uint8_t pipe, uint8_t ack){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]

	if(pipe > 5){
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b05      	cmp	r3, #5
 80007ec:	d901      	bls.n	80007f2 <nrf24_auto_ack+0x1a>
		pipe = 5;
 80007ee:	2305      	movs	r3, #5
 80007f0:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 80007f2:	2101      	movs	r1, #1
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fd0b 	bl	8000210 <nrf24_r_reg>
 80007fa:	4603      	mov	r3, r0
 80007fc:	73fb      	strb	r3, [r7, #15]

	if(ack){
 80007fe:	79bb      	ldrb	r3, [r7, #6]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00b      	beq.n	800081c <nrf24_auto_ack+0x44>
		enaa |= (1 << pipe);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2201      	movs	r2, #1
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	b25a      	sxtb	r2, r3
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	b25b      	sxtb	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b25b      	sxtb	r3, r3
 8000816:	b2db      	uxtb	r3, r3
 8000818:	73fb      	strb	r3, [r7, #15]
 800081a:	e00c      	b.n	8000836 <nrf24_auto_ack+0x5e>
	}else{
		enaa &= ~(1 << pipe);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2201      	movs	r2, #1
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	b25b      	sxtb	r3, r3
 8000826:	43db      	mvns	r3, r3
 8000828:	b25a      	sxtb	r2, r3
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	b25b      	sxtb	r3, r3
 800082e:	4013      	ands	r3, r2
 8000830:	b25b      	sxtb	r3, r3
 8000832:	b2db      	uxtb	r3, r3
 8000834:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000836:	f107 030f 	add.w	r3, r7, #15
 800083a:	2201      	movs	r2, #1
 800083c:	4619      	mov	r1, r3
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff fcbe 	bl	80001c0 <nrf24_w_reg>
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <nrf24_en_ack_pld>:
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
}

void nrf24_en_ack_pld(uint8_t en){
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000856:	2101      	movs	r1, #1
 8000858:	201d      	movs	r0, #29
 800085a:	f7ff fcd9 	bl	8000210 <nrf24_r_reg>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d005      	beq.n	8000874 <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	b2db      	uxtb	r3, r3
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e004      	b.n	800087e <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	f023 0302 	bic.w	r3, r3, #2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800087e:	f107 030f 	add.w	r3, r7, #15
 8000882:	2201      	movs	r2, #1
 8000884:	4619      	mov	r1, r3
 8000886:	201d      	movs	r0, #29
 8000888:	f7ff fc9a 	bl	80001c0 <nrf24_w_reg>
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 800089e:	2101      	movs	r1, #1
 80008a0:	201d      	movs	r0, #29
 80008a2:	f7ff fcb5 	bl	8000210 <nrf24_r_reg>
 80008a6:	4603      	mov	r3, r0
 80008a8:	73fb      	strb	r3, [r7, #15]

	if(en){
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d005      	beq.n	80008bc <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	e004      	b.n	80008c6 <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	f023 0301 	bic.w	r3, r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80008c6:	f107 030f 	add.w	r3, r7, #15
 80008ca:	2201      	movs	r2, #1
 80008cc:	4619      	mov	r1, r3
 80008ce:	201d      	movs	r0, #29
 80008d0:	f7ff fc76 	bl	80001c0 <nrf24_w_reg>
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <nrf24_auto_retr_delay>:

void nrf24_auto_retr_delay(uint8_t delay){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 80008e6:	2101      	movs	r1, #1
 80008e8:	2004      	movs	r0, #4
 80008ea:	f7ff fc91 	bl	8000210 <nrf24_r_reg>
 80008ee:	4603      	mov	r3, r0
 80008f0:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	b25a      	sxtb	r2, r3
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	b25b      	sxtb	r3, r3
 8000906:	4313      	orrs	r3, r2
 8000908:	b25b      	sxtb	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 800090e:	f107 030f 	add.w	r3, r7, #15
 8000912:	2201      	movs	r2, #1
 8000914:	4619      	mov	r1, r3
 8000916:	2004      	movs	r0, #4
 8000918:	f7ff fc52 	bl	80001c0 <nrf24_w_reg>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 800092e:	2101      	movs	r1, #1
 8000930:	2004      	movs	r0, #4
 8000932:	f7ff fc6d 	bl	8000210 <nrf24_r_reg>
 8000936:	4603      	mov	r3, r0
 8000938:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	f023 030f 	bic.w	r3, r3, #15
 8000940:	b2db      	uxtb	r3, r3
 8000942:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 8000944:	7bfa      	ldrb	r2, [r7, #15]
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	4313      	orrs	r3, r2
 800094a:	b2db      	uxtb	r3, r3
 800094c:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 800094e:	f107 030f 	add.w	r3, r7, #15
 8000952:	2201      	movs	r2, #1
 8000954:	4619      	mov	r1, r3
 8000956:	2004      	movs	r0, #4
 8000958:	f7ff fc32 	bl	80001c0 <nrf24_w_reg>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <nrf24_data_available>:

uint8_t nrf24_carrier_detect(void){
	return nrf24_r_reg(RPD, 1);
}

uint8_t nrf24_data_available(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

 	uint8_t reg_dt = nrf24_r_reg(FIFO_STATUS, 1);
 800096a:	2101      	movs	r1, #1
 800096c:	2017      	movs	r0, #23
 800096e:	f7ff fc4f 	bl	8000210 <nrf24_r_reg>
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]

	if(!(reg_dt & (1 << RX_EMPTY))){
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d101      	bne.n	8000984 <nrf24_data_available+0x20>
		return 1;
 8000980:	2301      	movs	r3, #1
 8000982:	e000      	b.n	8000986 <nrf24_data_available+0x22>
	}

	return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <nrf24_receive>:

void nrf24_receive(uint8_t *data, uint8_t size){
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_RX_PAYLOAD;
 800099c:	2361      	movs	r3, #97	@ 0x61
 800099e:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80009a0:	f7ff fbea 	bl	8000178 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80009a4:	f107 010f 	add.w	r1, r7, #15
 80009a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ac:	2201      	movs	r2, #1
 80009ae:	4809      	ldr	r0, [pc, #36]	@ (80009d4 <nrf24_receive+0x44>)
 80009b0:	f001 f9d8 	bl	8001d64 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <nrf24_receive+0x44>)
 80009c0:	f001 fb14 	bl	8001fec <HAL_SPI_Receive>
	csn_high();
 80009c4:	f7ff fbcc 	bl	8000160 <csn_high>

	nrf24_clear_rx_dr();
 80009c8:	f7ff fe2a 	bl	8000620 <nrf24_clear_rx_dr>
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000028 	.word	0x20000028

080009d8 <nrf24_defaults>:

void nrf24_defaults(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
	ce_low();
 80009de:	f7ff fbe3 	bl	80001a8 <ce_low>

	nrf24_pwr_dwn();
 80009e2:	f7ff fc4f 	bl	8000284 <nrf24_pwr_dwn>
	nrf24_tx_pwr(3);
 80009e6:	2003      	movs	r0, #3
 80009e8:	f7ff fc66 	bl	80002b8 <nrf24_tx_pwr>
	nrf24_data_rate(_1mbps);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff fc89 	bl	8000304 <nrf24_data_rate>
	nrf24_set_channel(2);
 80009f2:	2002      	movs	r0, #2
 80009f4:	f7ff fcb4 	bl	8000360 <nrf24_set_channel>
	nrf24_set_crc(no_crc, _1byte);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff fd9f 	bl	800053e <nrf24_set_crc>
	nrf24_set_addr_width(5);
 8000a00:	2005      	movs	r0, #5
 8000a02:	f7ff fdc8 	bl	8000596 <nrf24_set_addr_width>
	nrf24_flush_tx();
 8000a06:	f7ff fdd9 	bl	80005bc <nrf24_flush_tx>
	nrf24_flush_rx();
 8000a0a:	f7ff fde2 	bl	80005d2 <nrf24_flush_rx>
	nrf24_clear_rx_dr();
 8000a0e:	f7ff fe07 	bl	8000620 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8000a12:	f7ff fe1d 	bl	8000650 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000a16:	f7ff fe33 	bl	8000680 <nrf24_clear_max_rt>
	nrf24_stop_listen();
 8000a1a:	f7ff fe65 	bl	80006e8 <nrf24_stop_listen>
	nrf24_dpl(disable);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fe7c 	bl	800071c <nrf24_dpl>
	nrf24_en_ack_pld(disable);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ff11 	bl	800084c <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff ff32 	bl	8000894 <nrf24_en_dyn_ack>
	nrf24_auto_retr_delay(0);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff ff53 	bl	80008dc <nrf24_auto_retr_delay>
	nrf24_auto_retr_limit(3);
 8000a36:	2003      	movs	r0, #3
 8000a38:	f7ff ff74 	bl	8000924 <nrf24_auto_retr_limit>


	for(uint8_t i = 0; i < 5; i++){
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	e015      	b.n	8000a6e <nrf24_defaults+0x96>
		nrf24_pipe_pld_size(i, 0);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fc9a 	bl	8000380 <nrf24_pipe_pld_size>
		nrf24_cls_rx_pipe(i);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fd52 	bl	80004f8 <nrf24_cls_rx_pipe>
		nrf24_set_rx_dpl(i, disable);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe83 	bl	8000764 <nrf24_set_rx_dpl>
		nrf24_auto_ack(i, enable);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2101      	movs	r1, #1
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff feb8 	bl	80007d8 <nrf24_auto_ack>
	for(uint8_t i = 0; i < 5; i++){
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	71fb      	strb	r3, [r7, #7]
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d9e6      	bls.n	8000a42 <nrf24_defaults+0x6a>
	}

	ce_high();
 8000a74:	f7ff fb8c 	bl	8000190 <ce_high>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a94:	4b28      	ldr	r3, [pc, #160]	@ (8000b38 <MX_GPIO_Init+0xb8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <MX_GPIO_Init+0xb8>)
 8000a9a:	f043 0320 	orr.w	r3, r3, #32
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b25      	ldr	r3, [pc, #148]	@ (8000b38 <MX_GPIO_Init+0xb8>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0320 	and.w	r3, r3, #32
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <MX_GPIO_Init+0xb8>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a21      	ldr	r2, [pc, #132]	@ (8000b38 <MX_GPIO_Init+0xb8>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <MX_GPIO_Init+0xb8>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_GPIO_Init+0xb8>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <MX_GPIO_Init+0xb8>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_GPIO_Init+0xb8>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0310 	and.w	r3, r3, #16
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CNS_pin_Pin|GPIO_PIN_4|CE_pin_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f240 1111 	movw	r1, #273	@ 0x111
 8000ae2:	4816      	ldr	r0, [pc, #88]	@ (8000b3c <MX_GPIO_Init+0xbc>)
 8000ae4:	f000 fcc4 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000aee:	4814      	ldr	r0, [pc, #80]	@ (8000b40 <MX_GPIO_Init+0xc0>)
 8000af0:	f000 fcbe 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CNS_pin_Pin PA4 CE_pin_Pin */
  GPIO_InitStruct.Pin = CNS_pin_Pin|GPIO_PIN_4|CE_pin_Pin;
 8000af4:	f240 1311 	movw	r3, #273	@ 0x111
 8000af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <MX_GPIO_Init+0xbc>)
 8000b0e:	f000 fb2b 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000b12:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_GPIO_Init+0xc0>)
 8000b2c:	f000 fb1c 	bl	8001168 <HAL_GPIO_Init>

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010800 	.word	0x40010800
 8000b40:	40011000 	.word	0x40011000

08000b44 <nrf24_receiver_setup>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void nrf24_receiver_setup(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
    uint8_t rx_address[5] = {'R', 'x', 'A', 'A', 'A'}; // 수신기 주소
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <nrf24_receiver_setup+0x30>)
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b52:	6018      	str	r0, [r3, #0]
 8000b54:	3304      	adds	r3, #4
 8000b56:	7019      	strb	r1, [r3, #0]

    nrf24_defaults();  // NRF24 모듈을 기본 설정으로 초기화
 8000b58:	f7ff ff3e 	bl	80009d8 <nrf24_defaults>
    nrf24_open_rx_pipe(1, rx_address);  // 수신기 파이프 설정 (1번 파이프)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff fc5b 	bl	800041c <nrf24_open_rx_pipe>
    nrf24_listen();  // 수신 대기 시작
 8000b66:	f7ff fda3 	bl	80006b0 <nrf24_listen>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	080027f8 	.word	0x080027f8

08000b78 <receive_data>:

void receive_data(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
    uint8_t rx_data[32];  // 수신된 데이터를 저장할 배열

    // 데이터 수신 여부 확인
    if (nrf24_data_available()) {
 8000b7e:	f7ff fef1 	bl	8000964 <nrf24_data_available>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d018      	beq.n	8000bba <receive_data+0x42>
        nrf24_receive(rx_data, sizeof(rx_data));  // 데이터 수신
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff feff 	bl	8000990 <nrf24_receive>

        // 수신된 데이터가 "hi"와 일치하는지 확인
        if (strcmp((char*)rx_data, "hi") == 0) {
 8000b92:	463b      	mov	r3, r7
 8000b94:	490b      	ldr	r1, [pc, #44]	@ (8000bc4 <receive_data+0x4c>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fad8 	bl	800014c <strcmp>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d106      	bne.n	8000bb0 <receive_data+0x38>
            // 수신된 데이터가 "hi"이면 LED 켜기
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);  // PC8 LED 켜기
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ba8:	4807      	ldr	r0, [pc, #28]	@ (8000bc8 <receive_data+0x50>)
 8000baa:	f000 fc61 	bl	8001470 <HAL_GPIO_WritePin>
        } else {
            // 수신된 데이터가 "hi"가 아니면 LED 끄기
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);  // PC8 LED 끄기
        }
    }
}
 8000bae:	e004      	b.n	8000bba <receive_data+0x42>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);  // PC8 LED 끄기
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2140      	movs	r1, #64	@ 0x40
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <receive_data+0x50>)
 8000bb6:	f000 fc5b 	bl	8001470 <HAL_GPIO_WritePin>
}
 8000bba:	bf00      	nop
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	08002800 	.word	0x08002800
 8000bc8:	40011000 	.word	0x40011000

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f000 f960 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f80d 	bl	8000bf2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f7ff ff52 	bl	8000a80 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bdc:	f000 f850 	bl	8000c80 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  nrf24_receiver_setup();
 8000be0:	f7ff ffb0 	bl	8000b44 <nrf24_receiver_setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  receive_data();  // 데이터 수신 시도
 8000be4:	f7ff ffc8 	bl	8000b78 <receive_data>
	          HAL_Delay(100);  // 짧은 지연
 8000be8:	2064      	movs	r0, #100	@ 0x64
 8000bea:	f000 f9b5 	bl	8000f58 <HAL_Delay>
	  receive_data();  // 데이터 수신 시도
 8000bee:	bf00      	nop
 8000bf0:	e7f8      	b.n	8000be4 <main+0x18>

08000bf2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b090      	sub	sp, #64	@ 0x40
 8000bf6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	2228      	movs	r2, #40	@ 0x28
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fdc0 	bl	8002786 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c20:	2302      	movs	r3, #2
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c24:	2300      	movs	r3, #0
 8000c26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c28:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fc34 	bl	80014a0 <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c3e:	f000 f819 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	230f      	movs	r3, #15
 8000c44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c46:	2302      	movs	r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fea1 	bl	80019a4 <HAL_RCC_ClockConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c68:	f000 f804 	bl	8000c74 <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3740      	adds	r7, #64	@ 0x40
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <Error_Handler+0x8>

08000c80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c84:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000c86:	4a18      	ldr	r2, [pc, #96]	@ (8000ce8 <MX_SPI1_Init+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000c8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cb4:	2210      	movs	r2, #16
 8000cb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000ccc:	220a      	movs	r2, #10
 8000cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <MX_SPI1_Init+0x64>)
 8000cd2:	f000 ffc3 	bl	8001c5c <HAL_SPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cdc:	f7ff ffca 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000028 	.word	0x20000028
 8000ce8:	40013000 	.word	0x40013000

08000cec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a1b      	ldr	r2, [pc, #108]	@ (8000d74 <HAL_SPI_MspInit+0x88>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d12f      	bne.n	8000d6c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a19      	ldr	r2, [pc, #100]	@ (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d3c:	23a0      	movs	r3, #160	@ 0xa0
 8000d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <HAL_SPI_MspInit+0x90>)
 8000d50:	f000 fa0a 	bl	8001168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d54:	2340      	movs	r3, #64	@ 0x40
 8000d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HAL_SPI_MspInit+0x90>)
 8000d68:	f000 f9fe 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40013000 	.word	0x40013000
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010800 	.word	0x40010800

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_MspInit+0x5c>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <HAL_MspInit+0x5c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_MspInit+0x5c>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <HAL_MspInit+0x5c>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ddc <HAL_MspInit+0x5c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <HAL_MspInit+0x5c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_MspInit+0x60>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <HAL_MspInit+0x60>)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f874 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e48:	f7ff fff8 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480b      	ldr	r0, [pc, #44]	@ (8000e7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e4e:	490c      	ldr	r1, [pc, #48]	@ (8000e80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e50:	4a0c      	ldr	r2, [pc, #48]	@ (8000e84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a09      	ldr	r2, [pc, #36]	@ (8000e88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e64:	4c09      	ldr	r4, [pc, #36]	@ (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f001 fc91 	bl	8002798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e76:	f7ff fea9 	bl	8000bcc <main>
  bx lr
 8000e7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e84:	08002838 	.word	0x08002838
  ldr r2, =_sbss
 8000e88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e8c:	20000084 	.word	0x20000084

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_Init+0x28>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <HAL_Init+0x28>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f92b 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff ff66 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f935 	bl	800114e <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f90b 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000080 	.word	0x20000080

08000f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b02      	ldr	r3, [pc, #8]	@ (8000f54 <HAL_GetTick+0x10>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	20000080 	.word	0x20000080

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff fff0 	bl	8000f44 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffe0 	bl	8000f44 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	@ (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	@ (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	@ 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	@ 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff90 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff49 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff5e 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff90 	bl	8001058 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5f 	bl	8001004 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffb0 	bl	80010bc <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b08b      	sub	sp, #44	@ 0x2c
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	e169      	b.n	8001450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800117c:	2201      	movs	r2, #1
 800117e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	429a      	cmp	r2, r3
 8001196:	f040 8158 	bne.w	800144a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	4a9a      	ldr	r2, [pc, #616]	@ (8001408 <HAL_GPIO_Init+0x2a0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d05e      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
 80011a4:	4a98      	ldr	r2, [pc, #608]	@ (8001408 <HAL_GPIO_Init+0x2a0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d875      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011aa:	4a98      	ldr	r2, [pc, #608]	@ (800140c <HAL_GPIO_Init+0x2a4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d058      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
 80011b0:	4a96      	ldr	r2, [pc, #600]	@ (800140c <HAL_GPIO_Init+0x2a4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d86f      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011b6:	4a96      	ldr	r2, [pc, #600]	@ (8001410 <HAL_GPIO_Init+0x2a8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d052      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
 80011bc:	4a94      	ldr	r2, [pc, #592]	@ (8001410 <HAL_GPIO_Init+0x2a8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d869      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011c2:	4a94      	ldr	r2, [pc, #592]	@ (8001414 <HAL_GPIO_Init+0x2ac>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d04c      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
 80011c8:	4a92      	ldr	r2, [pc, #584]	@ (8001414 <HAL_GPIO_Init+0x2ac>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d863      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011ce:	4a92      	ldr	r2, [pc, #584]	@ (8001418 <HAL_GPIO_Init+0x2b0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d046      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
 80011d4:	4a90      	ldr	r2, [pc, #576]	@ (8001418 <HAL_GPIO_Init+0x2b0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d85d      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011da:	2b12      	cmp	r3, #18
 80011dc:	d82a      	bhi.n	8001234 <HAL_GPIO_Init+0xcc>
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d859      	bhi.n	8001296 <HAL_GPIO_Init+0x12e>
 80011e2:	a201      	add	r2, pc, #4	@ (adr r2, 80011e8 <HAL_GPIO_Init+0x80>)
 80011e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e8:	08001263 	.word	0x08001263
 80011ec:	0800123d 	.word	0x0800123d
 80011f0:	0800124f 	.word	0x0800124f
 80011f4:	08001291 	.word	0x08001291
 80011f8:	08001297 	.word	0x08001297
 80011fc:	08001297 	.word	0x08001297
 8001200:	08001297 	.word	0x08001297
 8001204:	08001297 	.word	0x08001297
 8001208:	08001297 	.word	0x08001297
 800120c:	08001297 	.word	0x08001297
 8001210:	08001297 	.word	0x08001297
 8001214:	08001297 	.word	0x08001297
 8001218:	08001297 	.word	0x08001297
 800121c:	08001297 	.word	0x08001297
 8001220:	08001297 	.word	0x08001297
 8001224:	08001297 	.word	0x08001297
 8001228:	08001297 	.word	0x08001297
 800122c:	08001245 	.word	0x08001245
 8001230:	08001259 	.word	0x08001259
 8001234:	4a79      	ldr	r2, [pc, #484]	@ (800141c <HAL_GPIO_Init+0x2b4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800123a:	e02c      	b.n	8001296 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	623b      	str	r3, [r7, #32]
          break;
 8001242:	e029      	b.n	8001298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	3304      	adds	r3, #4
 800124a:	623b      	str	r3, [r7, #32]
          break;
 800124c:	e024      	b.n	8001298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	3308      	adds	r3, #8
 8001254:	623b      	str	r3, [r7, #32]
          break;
 8001256:	e01f      	b.n	8001298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	330c      	adds	r3, #12
 800125e:	623b      	str	r3, [r7, #32]
          break;
 8001260:	e01a      	b.n	8001298 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800126a:	2304      	movs	r3, #4
 800126c:	623b      	str	r3, [r7, #32]
          break;
 800126e:	e013      	b.n	8001298 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d105      	bne.n	8001284 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001278:	2308      	movs	r3, #8
 800127a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	611a      	str	r2, [r3, #16]
          break;
 8001282:	e009      	b.n	8001298 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001284:	2308      	movs	r3, #8
 8001286:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	615a      	str	r2, [r3, #20]
          break;
 800128e:	e003      	b.n	8001298 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
          break;
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x130>
          break;
 8001296:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	2bff      	cmp	r3, #255	@ 0xff
 800129c:	d801      	bhi.n	80012a2 <HAL_GPIO_Init+0x13a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	e001      	b.n	80012a6 <HAL_GPIO_Init+0x13e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3304      	adds	r3, #4
 80012a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2bff      	cmp	r3, #255	@ 0xff
 80012ac:	d802      	bhi.n	80012b4 <HAL_GPIO_Init+0x14c>
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	e002      	b.n	80012ba <HAL_GPIO_Init+0x152>
 80012b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b6:	3b08      	subs	r3, #8
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	210f      	movs	r1, #15
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	fa01 f303 	lsl.w	r3, r1, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	401a      	ands	r2, r3
 80012cc:	6a39      	ldr	r1, [r7, #32]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	431a      	orrs	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80b1 	beq.w	800144a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001420 <HAL_GPIO_Init+0x2b8>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001420 <HAL_GPIO_Init+0x2b8>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001420 <HAL_GPIO_Init+0x2b8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001300:	4a48      	ldr	r2, [pc, #288]	@ (8001424 <HAL_GPIO_Init+0x2bc>)
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a40      	ldr	r2, [pc, #256]	@ (8001428 <HAL_GPIO_Init+0x2c0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d013      	beq.n	8001354 <HAL_GPIO_Init+0x1ec>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a3f      	ldr	r2, [pc, #252]	@ (800142c <HAL_GPIO_Init+0x2c4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d00d      	beq.n	8001350 <HAL_GPIO_Init+0x1e8>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a3e      	ldr	r2, [pc, #248]	@ (8001430 <HAL_GPIO_Init+0x2c8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0x1e4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a3d      	ldr	r2, [pc, #244]	@ (8001434 <HAL_GPIO_Init+0x2cc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_GPIO_Init+0x1e0>
 8001344:	2303      	movs	r3, #3
 8001346:	e006      	b.n	8001356 <HAL_GPIO_Init+0x1ee>
 8001348:	2304      	movs	r3, #4
 800134a:	e004      	b.n	8001356 <HAL_GPIO_Init+0x1ee>
 800134c:	2302      	movs	r3, #2
 800134e:	e002      	b.n	8001356 <HAL_GPIO_Init+0x1ee>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <HAL_GPIO_Init+0x1ee>
 8001354:	2300      	movs	r3, #0
 8001356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001358:	f002 0203 	and.w	r2, r2, #3
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	4093      	lsls	r3, r2
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001366:	492f      	ldr	r1, [pc, #188]	@ (8001424 <HAL_GPIO_Init+0x2bc>)
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001380:	4b2d      	ldr	r3, [pc, #180]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	492c      	ldr	r1, [pc, #176]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	608b      	str	r3, [r1, #8]
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800138e:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	43db      	mvns	r3, r3
 8001396:	4928      	ldr	r1, [pc, #160]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 8001398:	4013      	ands	r3, r2
 800139a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013a8:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	4922      	ldr	r1, [pc, #136]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60cb      	str	r3, [r1, #12]
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013b6:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	43db      	mvns	r3, r3
 80013be:	491e      	ldr	r1, [pc, #120]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d0:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4918      	ldr	r1, [pc, #96]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	4914      	ldr	r1, [pc, #80]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d021      	beq.n	800143c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	490e      	ldr	r1, [pc, #56]	@ (8001438 <HAL_GPIO_Init+0x2d0>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	e021      	b.n	800144a <HAL_GPIO_Init+0x2e2>
 8001406:	bf00      	nop
 8001408:	10320000 	.word	0x10320000
 800140c:	10310000 	.word	0x10310000
 8001410:	10220000 	.word	0x10220000
 8001414:	10210000 	.word	0x10210000
 8001418:	10120000 	.word	0x10120000
 800141c:	10110000 	.word	0x10110000
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000
 8001428:	40010800 	.word	0x40010800
 800142c:	40010c00 	.word	0x40010c00
 8001430:	40011000 	.word	0x40011000
 8001434:	40011400 	.word	0x40011400
 8001438:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <HAL_GPIO_Init+0x304>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	43db      	mvns	r3, r3
 8001444:	4909      	ldr	r1, [pc, #36]	@ (800146c <HAL_GPIO_Init+0x304>)
 8001446:	4013      	ands	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	3301      	adds	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	f47f ae8e 	bne.w	800117c <HAL_GPIO_Init+0x14>
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	372c      	adds	r7, #44	@ 0x2c
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	40010400 	.word	0x40010400

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	611a      	str	r2, [r3, #16]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e272      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8087 	beq.w	80015ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d00c      	beq.n	80014e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014cc:	4b8f      	ldr	r3, [pc, #572]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d112      	bne.n	80014fe <HAL_RCC_OscConfig+0x5e>
 80014d8:	4b8c      	ldr	r3, [pc, #560]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e4:	d10b      	bne.n	80014fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e6:	4b89      	ldr	r3, [pc, #548]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d06c      	beq.n	80015cc <HAL_RCC_OscConfig+0x12c>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d168      	bne.n	80015cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e24c      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x76>
 8001508:	4b80      	ldr	r3, [pc, #512]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a7f      	ldr	r2, [pc, #508]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800150e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e02e      	b.n	8001574 <HAL_RCC_OscConfig+0xd4>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x98>
 800151e:	4b7b      	ldr	r3, [pc, #492]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a7a      	ldr	r2, [pc, #488]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b78      	ldr	r3, [pc, #480]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a77      	ldr	r2, [pc, #476]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001530:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e01d      	b.n	8001574 <HAL_RCC_OscConfig+0xd4>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0xbc>
 8001542:	4b72      	ldr	r3, [pc, #456]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a71      	ldr	r2, [pc, #452]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b6f      	ldr	r3, [pc, #444]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6e      	ldr	r2, [pc, #440]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0xd4>
 800155c:	4b6b      	ldr	r3, [pc, #428]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a6a      	ldr	r2, [pc, #424]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b68      	ldr	r3, [pc, #416]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a67      	ldr	r2, [pc, #412]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001572:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fce2 	bl	8000f44 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fcde 	bl	8000f44 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	@ 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e200      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b5d      	ldr	r3, [pc, #372]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0xe4>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fcce 	bl	8000f44 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fcca 	bl	8000f44 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	@ 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1ec      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	4b53      	ldr	r3, [pc, #332]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x10c>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d063      	beq.n	80016a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015da:	4b4c      	ldr	r3, [pc, #304]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015e6:	4b49      	ldr	r3, [pc, #292]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d11c      	bne.n	800162c <HAL_RCC_OscConfig+0x18c>
 80015f2:	4b46      	ldr	r3, [pc, #280]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	4b43      	ldr	r3, [pc, #268]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_RCC_OscConfig+0x176>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e1c0      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4939      	ldr	r1, [pc, #228]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	e03a      	b.n	80016a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b36      	ldr	r3, [pc, #216]	@ (8001710 <HAL_RCC_OscConfig+0x270>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fc83 	bl	8000f44 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff fc7f 	bl	8000f44 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e1a1      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4927      	ldr	r1, [pc, #156]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
 8001674:	e015      	b.n	80016a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001676:	4b26      	ldr	r3, [pc, #152]	@ (8001710 <HAL_RCC_OscConfig+0x270>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fc62 	bl	8000f44 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001684:	f7ff fc5e 	bl	8000f44 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e180      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d03a      	beq.n	8001724 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d019      	beq.n	80016ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b6:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <HAL_RCC_OscConfig+0x274>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7ff fc42 	bl	8000f44 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff fc3e 	bl	8000f44 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e160      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f000 fa9c 	bl	8001c20 <RCC_Delay>
 80016e8:	e01c      	b.n	8001724 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <HAL_RCC_OscConfig+0x274>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff fc28 	bl	8000f44 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f6:	e00f      	b.n	8001718 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff fc24 	bl	8000f44 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d908      	bls.n	8001718 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e146      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	42420000 	.word	0x42420000
 8001714:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b92      	ldr	r3, [pc, #584]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1e9      	bne.n	80016f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80a6 	beq.w	800187e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b8b      	ldr	r3, [pc, #556]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10d      	bne.n	800175e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b88      	ldr	r3, [pc, #544]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a87      	ldr	r2, [pc, #540]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b85      	ldr	r3, [pc, #532]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175a:	2301      	movs	r3, #1
 800175c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b82      	ldr	r3, [pc, #520]	@ (8001968 <HAL_RCC_OscConfig+0x4c8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d118      	bne.n	800179c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4b7f      	ldr	r3, [pc, #508]	@ (8001968 <HAL_RCC_OscConfig+0x4c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7e      	ldr	r2, [pc, #504]	@ (8001968 <HAL_RCC_OscConfig+0x4c8>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7ff fbe5 	bl	8000f44 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7ff fbe1 	bl	8000f44 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b64      	cmp	r3, #100	@ 0x64
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e103      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	4b75      	ldr	r3, [pc, #468]	@ (8001968 <HAL_RCC_OscConfig+0x4c8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x312>
 80017a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	e02d      	b.n	800180e <HAL_RCC_OscConfig+0x36e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x334>
 80017ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4a69      	ldr	r2, [pc, #420]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6213      	str	r3, [r2, #32]
 80017c6:	4b67      	ldr	r3, [pc, #412]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a66      	ldr	r2, [pc, #408]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	e01c      	b.n	800180e <HAL_RCC_OscConfig+0x36e>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d10c      	bne.n	80017f6 <HAL_RCC_OscConfig+0x356>
 80017dc:	4b61      	ldr	r3, [pc, #388]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a60      	ldr	r2, [pc, #384]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	e00b      	b.n	800180e <HAL_RCC_OscConfig+0x36e>
 80017f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	4b58      	ldr	r3, [pc, #352]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a57      	ldr	r2, [pc, #348]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d015      	beq.n	8001842 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff fb95 	bl	8000f44 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff fb91 	bl	8000f44 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e0b1      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001834:	4b4b      	ldr	r3, [pc, #300]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ee      	beq.n	800181e <HAL_RCC_OscConfig+0x37e>
 8001840:	e014      	b.n	800186c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7ff fb7f 	bl	8000f44 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7ff fb7b 	bl	8000f44 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e09b      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001860:	4b40      	ldr	r3, [pc, #256]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ee      	bne.n	800184a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d105      	bne.n	800187e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001872:	4b3c      	ldr	r3, [pc, #240]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a3b      	ldr	r2, [pc, #236]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8087 	beq.w	8001996 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001888:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d061      	beq.n	8001958 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d146      	bne.n	800192a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189c:	4b33      	ldr	r3, [pc, #204]	@ (800196c <HAL_RCC_OscConfig+0x4cc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fb4f 	bl	8000f44 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff fb4b 	bl	8000f44 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e06d      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018bc:	4b29      	ldr	r3, [pc, #164]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d0:	d108      	bne.n	80018e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d2:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	4921      	ldr	r1, [pc, #132]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a19      	ldr	r1, [r3, #32]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	430b      	orrs	r3, r1
 80018f6:	491b      	ldr	r1, [pc, #108]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fc:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <HAL_RCC_OscConfig+0x4cc>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff fb1f 	bl	8000f44 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190a:	f7ff fb1b 	bl	8000f44 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e03d      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x46a>
 8001928:	e035      	b.n	8001996 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <HAL_RCC_OscConfig+0x4cc>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fb08 	bl	8000f44 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff fb04 	bl	8000f44 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e026      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x498>
 8001956:	e01e      	b.n	8001996 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d107      	bne.n	8001970 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e019      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
 800196c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_RCC_OscConfig+0x500>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	429a      	cmp	r2, r3
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0d0      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d910      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b67      	ldr	r3, [pc, #412]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 0207 	bic.w	r2, r3, #7
 80019ce:	4965      	ldr	r1, [pc, #404]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b63      	ldr	r3, [pc, #396]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0b8      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a00:	4b59      	ldr	r3, [pc, #356]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a58      	ldr	r2, [pc, #352]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a18:	4b53      	ldr	r3, [pc, #332]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4a52      	ldr	r2, [pc, #328]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a24:	4b50      	ldr	r3, [pc, #320]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	494d      	ldr	r1, [pc, #308]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d040      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b47      	ldr	r3, [pc, #284]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d115      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e07f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b41      	ldr	r3, [pc, #260]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e073      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3d      	ldr	r3, [pc, #244]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e06b      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b39      	ldr	r3, [pc, #228]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4936      	ldr	r1, [pc, #216]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7ff fa56 	bl	8000f44 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff fa52 	bl	8000f44 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e053      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d210      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 0207 	bic.w	r2, r3, #7
 8001ada:	4922      	ldr	r1, [pc, #136]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e032      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4916      	ldr	r1, [pc, #88]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b1e:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	490e      	ldr	r1, [pc, #56]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b32:	f000 f821 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b36:	4602      	mov	r2, r0
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	490a      	ldr	r1, [pc, #40]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	5ccb      	ldrb	r3, [r1, r3]
 8001b46:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4a:	4a09      	ldr	r2, [pc, #36]	@ (8001b70 <HAL_RCC_ClockConfig+0x1cc>)
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_RCC_ClockConfig+0x1d0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f9b4 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	08002804 	.word	0x08002804
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b92:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d002      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0x36>
 8001ba6:	e027      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001baa:	613b      	str	r3, [r7, #16]
      break;
 8001bac:	e027      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0c9b      	lsrs	r3, r3, #18
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	4a17      	ldr	r2, [pc, #92]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d010      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bc6:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	0c5b      	lsrs	r3, r3, #17
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	4a11      	ldr	r2, [pc, #68]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bda:	fb03 f202 	mul.w	r2, r3, r2
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e004      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a0c      	ldr	r2, [pc, #48]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	613b      	str	r3, [r7, #16]
      break;
 8001bf6:	e002      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfa:	613b      	str	r3, [r7, #16]
      break;
 8001bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfe:	693b      	ldr	r3, [r7, #16]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	007a1200 	.word	0x007a1200
 8001c14:	08002814 	.word	0x08002814
 8001c18:	08002824 	.word	0x08002824
 8001c1c:	003d0900 	.word	0x003d0900

08001c20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <RCC_Delay+0x34>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <RCC_Delay+0x38>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0a5b      	lsrs	r3, r3, #9
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c3c:	bf00      	nop
  }
  while (Delay --);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	60fa      	str	r2, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f9      	bne.n	8001c3c <RCC_Delay+0x1c>
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000000 	.word	0x20000000
 8001c58:	10624dd3 	.word	0x10624dd3

08001c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e076      	b.n	8001d5c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d108      	bne.n	8001c88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c7e:	d009      	beq.n	8001c94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
 8001c86:	e005      	b.n	8001c94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff f81c 	bl	8000cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d18:	ea42 0103 	orr.w	r1, r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d20:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	0c1a      	lsrs	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f002 0204 	and.w	r2, r2, #4
 8001d3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	69da      	ldr	r2, [r3, #28]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	4613      	mov	r3, r2
 8001d72:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d74:	f7ff f8e6 	bl	8000f44 <HAL_GetTick>
 8001d78:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d001      	beq.n	8001d8e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e12a      	b.n	8001fe4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <HAL_SPI_Transmit+0x36>
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e122      	b.n	8001fe4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_SPI_Transmit+0x48>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e11b      	b.n	8001fe4 <HAL_SPI_Transmit+0x280>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2203      	movs	r2, #3
 8001db8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	88fa      	ldrh	r2, [r7, #6]
 8001dcc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	88fa      	ldrh	r2, [r7, #6]
 8001dd2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dfa:	d10f      	bne.n	8001e1c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e26:	2b40      	cmp	r3, #64	@ 0x40
 8001e28:	d007      	beq.n	8001e3a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e42:	d152      	bne.n	8001eea <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <HAL_SPI_Transmit+0xee>
 8001e4c:	8b7b      	ldrh	r3, [r7, #26]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d145      	bne.n	8001ede <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	881a      	ldrh	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	1c9a      	adds	r2, r3, #2
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e76:	e032      	b.n	8001ede <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d112      	bne.n	8001eac <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	881a      	ldrh	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	1c9a      	adds	r2, r3, #2
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001eaa:	e018      	b.n	8001ede <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eac:	f7ff f84a 	bl	8000f44 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d803      	bhi.n	8001ec4 <HAL_SPI_Transmit+0x160>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec2:	d102      	bne.n	8001eca <HAL_SPI_Transmit+0x166>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e082      	b.n	8001fe4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1c7      	bne.n	8001e78 <HAL_SPI_Transmit+0x114>
 8001ee8:	e053      	b.n	8001f92 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_SPI_Transmit+0x194>
 8001ef2:	8b7b      	ldrh	r3, [r7, #26]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d147      	bne.n	8001f88 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	330c      	adds	r3, #12
 8001f02:	7812      	ldrb	r2, [r2, #0]
 8001f04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f1e:	e033      	b.n	8001f88 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d113      	bne.n	8001f56 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	330c      	adds	r3, #12
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f54:	e018      	b.n	8001f88 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f56:	f7fe fff5 	bl	8000f44 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d803      	bhi.n	8001f6e <HAL_SPI_Transmit+0x20a>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d102      	bne.n	8001f74 <HAL_SPI_Transmit+0x210>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e02d      	b.n	8001fe4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1c6      	bne.n	8001f20 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	6839      	ldr	r1, [r7, #0]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 fbc4 	bl	8002724 <SPI_EndRxTxTransaction>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
  }
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d001      	beq.n	800200c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002008:	2302      	movs	r3, #2
 800200a:	e104      	b.n	8002216 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002014:	d112      	bne.n	800203c <HAL_SPI_Receive+0x50>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10e      	bne.n	800203c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2204      	movs	r2, #4
 8002022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f8f3 	bl	800221e <HAL_SPI_TransmitReceive>
 8002038:	4603      	mov	r3, r0
 800203a:	e0ec      	b.n	8002216 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800203c:	f7fe ff82 	bl	8000f44 <HAL_GetTick>
 8002040:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <HAL_SPI_Receive+0x62>
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0e1      	b.n	8002216 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_SPI_Receive+0x74>
 800205c:	2302      	movs	r3, #2
 800205e:	e0da      	b.n	8002216 <HAL_SPI_Receive+0x22a>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2204      	movs	r2, #4
 800206c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	88fa      	ldrh	r2, [r7, #6]
 8002080:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	88fa      	ldrh	r2, [r7, #6]
 8002086:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020ae:	d10f      	bne.n	80020d0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020da:	2b40      	cmp	r3, #64	@ 0x40
 80020dc:	d007      	beq.n	80020ee <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d170      	bne.n	80021d8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020f6:	e035      	b.n	8002164 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d115      	bne.n	8002132 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f103 020c 	add.w	r2, r3, #12
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002130:	e018      	b.n	8002164 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002132:	f7fe ff07 	bl	8000f44 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d803      	bhi.n	800214a <HAL_SPI_Receive+0x15e>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d102      	bne.n	8002150 <HAL_SPI_Receive+0x164>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e058      	b.n	8002216 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1c4      	bne.n	80020f8 <HAL_SPI_Receive+0x10c>
 800216e:	e038      	b.n	80021e2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d113      	bne.n	80021a6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002188:	b292      	uxth	r2, r2
 800218a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002190:	1c9a      	adds	r2, r3, #2
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021a4:	e018      	b.n	80021d8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021a6:	f7fe fecd 	bl	8000f44 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d803      	bhi.n	80021be <HAL_SPI_Receive+0x1d2>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d102      	bne.n	80021c4 <HAL_SPI_Receive+0x1d8>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e01e      	b.n	8002216 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1c6      	bne.n	8002170 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	6839      	ldr	r1, [r7, #0]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fa4a 	bl	8002680 <SPI_EndRxTransaction>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002214:	2300      	movs	r3, #0
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b08a      	sub	sp, #40	@ 0x28
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800222c:	2301      	movs	r3, #1
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002230:	f7fe fe88 	bl	8000f44 <HAL_GetTick>
 8002234:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800223c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002248:	7ffb      	ldrb	r3, [r7, #31]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d00c      	beq.n	8002268 <HAL_SPI_TransmitReceive+0x4a>
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002254:	d106      	bne.n	8002264 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <HAL_SPI_TransmitReceive+0x46>
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	2b04      	cmp	r3, #4
 8002262:	d001      	beq.n	8002268 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002264:	2302      	movs	r3, #2
 8002266:	e17f      	b.n	8002568 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_SPI_TransmitReceive+0x5c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_SPI_TransmitReceive+0x5c>
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e174      	b.n	8002568 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_SPI_TransmitReceive+0x6e>
 8002288:	2302      	movs	r3, #2
 800228a:	e16d      	b.n	8002568 <HAL_SPI_TransmitReceive+0x34a>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b04      	cmp	r3, #4
 800229e:	d003      	beq.n	80022a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2205      	movs	r2, #5
 80022a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	887a      	ldrh	r2, [r7, #2]
 80022be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e8:	2b40      	cmp	r3, #64	@ 0x40
 80022ea:	d007      	beq.n	80022fc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002304:	d17e      	bne.n	8002404 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_SPI_TransmitReceive+0xf6>
 800230e:	8afb      	ldrh	r3, [r7, #22]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d16c      	bne.n	80023ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002318:	881a      	ldrh	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002324:	1c9a      	adds	r2, r3, #2
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002338:	e059      	b.n	80023ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b02      	cmp	r3, #2
 8002346:	d11b      	bne.n	8002380 <HAL_SPI_TransmitReceive+0x162>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_SPI_TransmitReceive+0x162>
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	2b01      	cmp	r3, #1
 8002356:	d113      	bne.n	8002380 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	881a      	ldrh	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	1c9a      	adds	r2, r3, #2
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d119      	bne.n	80023c2 <HAL_SPI_TransmitReceive+0x1a4>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d014      	beq.n	80023c2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a2:	b292      	uxth	r2, r2
 80023a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023aa:	1c9a      	adds	r2, r3, #2
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023be:	2301      	movs	r3, #1
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023c2:	f7fe fdbf 	bl	8000f44 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d80d      	bhi.n	80023ee <HAL_SPI_TransmitReceive+0x1d0>
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d009      	beq.n	80023ee <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0bc      	b.n	8002568 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1a0      	bne.n	800233a <HAL_SPI_TransmitReceive+0x11c>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d19b      	bne.n	800233a <HAL_SPI_TransmitReceive+0x11c>
 8002402:	e082      	b.n	800250a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_SPI_TransmitReceive+0x1f4>
 800240c:	8afb      	ldrh	r3, [r7, #22]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d171      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	330c      	adds	r3, #12
 800241c:	7812      	ldrb	r2, [r2, #0]
 800241e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002438:	e05d      	b.n	80024f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b02      	cmp	r3, #2
 8002446:	d11c      	bne.n	8002482 <HAL_SPI_TransmitReceive+0x264>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d017      	beq.n	8002482 <HAL_SPI_TransmitReceive+0x264>
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	2b01      	cmp	r3, #1
 8002456:	d114      	bne.n	8002482 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	330c      	adds	r3, #12
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d119      	bne.n	80024c4 <HAL_SPI_TransmitReceive+0x2a6>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d014      	beq.n	80024c4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024c0:	2301      	movs	r3, #1
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024c4:	f7fe fd3e 	bl	8000f44 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d803      	bhi.n	80024dc <HAL_SPI_TransmitReceive+0x2be>
 80024d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024da:	d102      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x2c4>
 80024dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e038      	b.n	8002568 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d19c      	bne.n	800243a <HAL_SPI_TransmitReceive+0x21c>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d197      	bne.n	800243a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800250a:	6a3a      	ldr	r2, [r7, #32]
 800250c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f908 	bl	8002724 <SPI_EndRxTxTransaction>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2220      	movs	r2, #32
 800251e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e01d      	b.n	8002568 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002566:	2300      	movs	r3, #0
  }
}
 8002568:	4618      	mov	r0, r3
 800256a:	3728      	adds	r7, #40	@ 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002580:	f7fe fce0 	bl	8000f44 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	4413      	add	r3, r2
 800258e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002590:	f7fe fcd8 	bl	8000f44 <HAL_GetTick>
 8002594:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002596:	4b39      	ldr	r3, [pc, #228]	@ (800267c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	015b      	lsls	r3, r3, #5
 800259c:	0d1b      	lsrs	r3, r3, #20
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025a6:	e054      	b.n	8002652 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ae:	d050      	beq.n	8002652 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025b0:	f7fe fcc8 	bl	8000f44 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d902      	bls.n	80025c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d13d      	bne.n	8002642 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80025d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025de:	d111      	bne.n	8002604 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025e8:	d004      	beq.n	80025f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f2:	d107      	bne.n	8002604 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002602:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800260c:	d10f      	bne.n	800262e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800262c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e017      	b.n	8002672 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3b01      	subs	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4013      	ands	r3, r2
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	429a      	cmp	r2, r3
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	429a      	cmp	r2, r3
 800266e:	d19b      	bne.n	80025a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000000 	.word	0x20000000

08002680 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002694:	d111      	bne.n	80026ba <SPI_EndRxTransaction+0x3a>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800269e:	d004      	beq.n	80026aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026a8:	d107      	bne.n	80026ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026b8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026c2:	d117      	bne.n	80026f4 <SPI_EndRxTransaction+0x74>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026cc:	d112      	bne.n	80026f4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2200      	movs	r2, #0
 80026d6:	2101      	movs	r1, #1
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff ff49 	bl	8002570 <SPI_WaitFlagStateUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01a      	beq.n	800271a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e013      	b.n	800271c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2180      	movs	r1, #128	@ 0x80
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff ff36 	bl	8002570 <SPI_WaitFlagStateUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e000      	b.n	800271c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2201      	movs	r2, #1
 8002738:	2102      	movs	r1, #2
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff ff18 	bl	8002570 <SPI_WaitFlagStateUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e013      	b.n	800277e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	2180      	movs	r1, #128	@ 0x80
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7ff ff05 	bl	8002570 <SPI_WaitFlagStateUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002770:	f043 0220 	orr.w	r2, r3, #32
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e000      	b.n	800277e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <memset>:
 8002786:	4603      	mov	r3, r0
 8002788:	4402      	add	r2, r0
 800278a:	4293      	cmp	r3, r2
 800278c:	d100      	bne.n	8002790 <memset+0xa>
 800278e:	4770      	bx	lr
 8002790:	f803 1b01 	strb.w	r1, [r3], #1
 8002794:	e7f9      	b.n	800278a <memset+0x4>
	...

08002798 <__libc_init_array>:
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	2600      	movs	r6, #0
 800279c:	4d0c      	ldr	r5, [pc, #48]	@ (80027d0 <__libc_init_array+0x38>)
 800279e:	4c0d      	ldr	r4, [pc, #52]	@ (80027d4 <__libc_init_array+0x3c>)
 80027a0:	1b64      	subs	r4, r4, r5
 80027a2:	10a4      	asrs	r4, r4, #2
 80027a4:	42a6      	cmp	r6, r4
 80027a6:	d109      	bne.n	80027bc <__libc_init_array+0x24>
 80027a8:	f000 f81a 	bl	80027e0 <_init>
 80027ac:	2600      	movs	r6, #0
 80027ae:	4d0a      	ldr	r5, [pc, #40]	@ (80027d8 <__libc_init_array+0x40>)
 80027b0:	4c0a      	ldr	r4, [pc, #40]	@ (80027dc <__libc_init_array+0x44>)
 80027b2:	1b64      	subs	r4, r4, r5
 80027b4:	10a4      	asrs	r4, r4, #2
 80027b6:	42a6      	cmp	r6, r4
 80027b8:	d105      	bne.n	80027c6 <__libc_init_array+0x2e>
 80027ba:	bd70      	pop	{r4, r5, r6, pc}
 80027bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c0:	4798      	blx	r3
 80027c2:	3601      	adds	r6, #1
 80027c4:	e7ee      	b.n	80027a4 <__libc_init_array+0xc>
 80027c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ca:	4798      	blx	r3
 80027cc:	3601      	adds	r6, #1
 80027ce:	e7f2      	b.n	80027b6 <__libc_init_array+0x1e>
 80027d0:	08002830 	.word	0x08002830
 80027d4:	08002830 	.word	0x08002830
 80027d8:	08002830 	.word	0x08002830
 80027dc:	08002834 	.word	0x08002834

080027e0 <_init>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr

080027ec <_fini>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	bf00      	nop
 80027f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f2:	bc08      	pop	{r3}
 80027f4:	469e      	mov	lr, r3
 80027f6:	4770      	bx	lr
