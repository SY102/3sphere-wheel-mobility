
567.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003958  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003a64  08003a64  00004a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba0  08003ba0  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ba0  08003ba0  00004ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ba8  08003ba8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba8  08003ba8  00004ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bac  08003bac  00004bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003bb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08003c18  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003c18  00005278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f46  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebd  00000000  00000000  0000efd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00010e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000813  00000000  00000000  00011948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018934  00000000  00000000  0001215b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c603  00000000  00000000  0002aa8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086065  00000000  00000000  00037092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd0f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ec  00000000  00000000  000bd13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c0328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a4c 	.word	0x08003a4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003a4c 	.word	0x08003a4c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2101      	movs	r1, #1
 8000168:	4802      	ldr	r0, [pc, #8]	@ (8000174 <csn_high+0x14>)
 800016a:	f001 f8f5 	bl	8001358 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 시작 표시
	   // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
	}
 800016e:	bf00      	nop
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40010800 	.word	0x40010800

08000178 <csn_low>:



void csn_low(void){
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_RESET);
 800017c:	2200      	movs	r2, #0
 800017e:	2101      	movs	r1, #1
 8000180:	4802      	ldr	r0, [pc, #8]	@ (800018c <csn_low+0x14>)
 8000182:	f001 f8e9 	bl	8001358 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 종료 표시
	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800

08000190 <ce_high>:

void ce_high(void){
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_SET);
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800019a:	4802      	ldr	r0, [pc, #8]	@ (80001a4 <ce_high+0x14>)
 800019c:	f001 f8dc 	bl	8001358 <HAL_GPIO_WritePin>
}
 80001a0:	bf00      	nop
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40010800 	.word	0x40010800

080001a8 <ce_low>:

void ce_low(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001b2:	4802      	ldr	r0, [pc, #8]	@ (80001bc <ce_low+0x14>)
 80001b4:	f001 f8d0 	bl	8001358 <HAL_GPIO_WritePin>
}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40010800 	.word	0x40010800

080001c0 <nrf24_w_reg>:


void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	6039      	str	r1, [r7, #0]
 80001ca:	71fb      	strb	r3, [r7, #7]
 80001cc:	4613      	mov	r3, r2
 80001ce:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80001da:	f7ff ffcd 	bl	8000178 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80001de:	f107 010f 	add.w	r1, r7, #15
 80001e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e6:	2201      	movs	r2, #1
 80001e8:	4808      	ldr	r0, [pc, #32]	@ (800020c <nrf24_w_reg+0x4c>)
 80001ea:	f001 fd61 	bl	8001cb0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	b29a      	uxth	r2, r3
 80001f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001f6:	6839      	ldr	r1, [r7, #0]
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <nrf24_w_reg+0x4c>)
 80001fa:	f001 fd59 	bl	8001cb0 <HAL_SPI_Transmit>

	csn_high();
 80001fe:	f7ff ffaf 	bl	8000160 <csn_high>
}
 8000202:	bf00      	nop
 8000204:	3710      	adds	r7, #16
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000084 	.word	0x20000084

08000210 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	460a      	mov	r2, r1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	4613      	mov	r3, r2
 800021e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000228:	f7ff ffa6 	bl	8000178 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800022c:	f107 010f 	add.w	r1, r7, #15
 8000230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000234:	2201      	movs	r2, #1
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <nrf24_r_reg+0x4c>)
 8000238:	f001 fd3a 	bl	8001cb0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	b29a      	uxth	r2, r3
 8000240:	f107 010e 	add.w	r1, r7, #14
 8000244:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000248:	4804      	ldr	r0, [pc, #16]	@ (800025c <nrf24_r_reg+0x4c>)
 800024a:	f001 fe75 	bl	8001f38 <HAL_SPI_Receive>

	csn_high();
 800024e:	f7ff ff87 	bl	8000160 <csn_high>

	return data;
 8000252:	7bbb      	ldrb	r3, [r7, #14]
}
 8000254:	4618      	mov	r0, r3
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000084 	.word	0x20000084

08000260 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800026a:	1df9      	adds	r1, r7, #7
 800026c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000270:	2201      	movs	r2, #1
 8000272:	4803      	ldr	r0, [pc, #12]	@ (8000280 <nrf24_w_spec_cmd+0x20>)
 8000274:	f001 fd1c 	bl	8001cb0 <HAL_SPI_Transmit>
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000084 	.word	0x20000084

08000284 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800028e:	2101      	movs	r1, #1
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ffbd 	bl	8000210 <nrf24_r_reg>
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f043 0302 	orr.w	r3, r3, #2
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	2201      	movs	r2, #1
 80002a8:	4619      	mov	r1, r3
 80002aa:	2000      	movs	r0, #0
 80002ac:	f7ff ff88 	bl	80001c0 <nrf24_w_reg>
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <nrf24_open_rx_pipe>:

		break;
	}
}

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 80002c8:	2101      	movs	r1, #1
 80002ca:	2002      	movs	r0, #2
 80002cc:	f7ff ffa0 	bl	8000210 <nrf24_r_reg>
 80002d0:	4603      	mov	r3, r0
 80002d2:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b05      	cmp	r3, #5
 80002d8:	d850      	bhi.n	800037c <nrf24_open_rx_pipe+0xc4>
 80002da:	a201      	add	r2, pc, #4	@ (adr r2, 80002e0 <nrf24_open_rx_pipe+0x28>)
 80002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e0:	080002f9 	.word	0x080002f9
 80002e4:	0800030f 	.word	0x0800030f
 80002e8:	08000325 	.word	0x08000325
 80002ec:	0800033b 	.word	0x0800033b
 80002f0:	08000351 	.word	0x08000351
 80002f4:	08000367 	.word	0x08000367
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 80002f8:	2205      	movs	r2, #5
 80002fa:	6839      	ldr	r1, [r7, #0]
 80002fc:	200a      	movs	r0, #10
 80002fe:	f7ff ff5f 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	b2db      	uxtb	r3, r3
 800030a:	73fb      	strb	r3, [r7, #15]
		break;
 800030c:	e036      	b.n	800037c <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 800030e:	2205      	movs	r2, #5
 8000310:	6839      	ldr	r1, [r7, #0]
 8000312:	200b      	movs	r0, #11
 8000314:	f7ff ff54 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	b2db      	uxtb	r3, r3
 8000320:	73fb      	strb	r3, [r7, #15]
		break;
 8000322:	e02b      	b.n	800037c <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	6839      	ldr	r1, [r7, #0]
 8000328:	200c      	movs	r0, #12
 800032a:	f7ff ff49 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 800032e:	7bfb      	ldrb	r3, [r7, #15]
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	b2db      	uxtb	r3, r3
 8000336:	73fb      	strb	r3, [r7, #15]
		break;
 8000338:	e020      	b.n	800037c <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 800033a:	2201      	movs	r2, #1
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	200d      	movs	r0, #13
 8000340:	f7ff ff3e 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	b2db      	uxtb	r3, r3
 800034c:	73fb      	strb	r3, [r7, #15]
		break;
 800034e:	e015      	b.n	800037c <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 8000350:	2201      	movs	r2, #1
 8000352:	6839      	ldr	r1, [r7, #0]
 8000354:	200e      	movs	r0, #14
 8000356:	f7ff ff33 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	f043 0310 	orr.w	r3, r3, #16
 8000360:	b2db      	uxtb	r3, r3
 8000362:	73fb      	strb	r3, [r7, #15]
		break;
 8000364:	e00a      	b.n	800037c <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 8000366:	2201      	movs	r2, #1
 8000368:	6839      	ldr	r1, [r7, #0]
 800036a:	200f      	movs	r0, #15
 800036c:	f7ff ff28 	bl	80001c0 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	b2db      	uxtb	r3, r3
 8000378:	73fb      	strb	r3, [r7, #15]
		break;
 800037a:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 800037c:	f107 030f 	add.w	r3, r7, #15
 8000380:	2201      	movs	r2, #1
 8000382:	4619      	mov	r1, r3
 8000384:	2002      	movs	r0, #2
 8000386:	f7ff ff1b 	bl	80001c0 <nrf24_w_reg>
}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop

08000394 <nrf24_flush_rx>:
	csn_low();
	nrf24_w_spec_cmd(FLUSH_TX);
	csn_high();
}

void nrf24_flush_rx(void){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	csn_low();
 8000398:	f7ff feee 	bl	8000178 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 800039c:	20e2      	movs	r0, #226	@ 0xe2
 800039e:	f7ff ff5f 	bl	8000260 <nrf24_w_spec_cmd>
	csn_high();
 80003a2:	f7ff fedd 	bl	8000160 <csn_high>
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 80003b6:	23ff      	movs	r3, #255	@ 0xff
 80003b8:	71bb      	strb	r3, [r7, #6]

	csn_low();
 80003ba:	f7ff fedd 	bl	8000178 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 80003be:	1dfa      	adds	r2, r7, #7
 80003c0:	1db9      	adds	r1, r7, #6
 80003c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2301      	movs	r3, #1
 80003ca:	4805      	ldr	r0, [pc, #20]	@ (80003e0 <nrf24_r_status+0x34>)
 80003cc:	f001 fecd 	bl	800216a <HAL_SPI_TransmitReceive>
	csn_high();
 80003d0:	f7ff fec6 	bl	8000160 <csn_high>

	return data;
 80003d4:	79fb      	ldrb	r3, [r7, #7]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000084 	.word	0x20000084

080003e4 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80003ee:	f7ff ffdd 	bl	80003ac <nrf24_r_status>
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	2201      	movs	r2, #1
 8000404:	4619      	mov	r1, r3
 8000406:	2007      	movs	r0, #7
 8000408:	f7ff feda 	bl	80001c0 <nrf24_w_reg>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <nrf24_auto_ack>:
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
}

void nrf24_auto_ack(uint8_t pipe, uint8_t ack){
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	460a      	mov	r2, r1
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	4613      	mov	r3, r2
 8000422:	71bb      	strb	r3, [r7, #6]

	if(pipe > 5){
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	2b05      	cmp	r3, #5
 8000428:	d901      	bls.n	800042e <nrf24_auto_ack+0x1a>
		pipe = 5;
 800042a:	2305      	movs	r3, #5
 800042c:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 800042e:	2101      	movs	r1, #1
 8000430:	2001      	movs	r0, #1
 8000432:	f7ff feed 	bl	8000210 <nrf24_r_reg>
 8000436:	4603      	mov	r3, r0
 8000438:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00b      	beq.n	8000458 <nrf24_auto_ack+0x44>
		enaa |= (1 << pipe);
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	2201      	movs	r2, #1
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	b25a      	sxtb	r2, r3
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	b25b      	sxtb	r3, r3
 800044e:	4313      	orrs	r3, r2
 8000450:	b25b      	sxtb	r3, r3
 8000452:	b2db      	uxtb	r3, r3
 8000454:	73fb      	strb	r3, [r7, #15]
 8000456:	e00c      	b.n	8000472 <nrf24_auto_ack+0x5e>
	}else{
		enaa &= ~(1 << pipe);
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	2201      	movs	r2, #1
 800045c:	fa02 f303 	lsl.w	r3, r2, r3
 8000460:	b25b      	sxtb	r3, r3
 8000462:	43db      	mvns	r3, r3
 8000464:	b25a      	sxtb	r2, r3
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	b25b      	sxtb	r3, r3
 800046a:	4013      	ands	r3, r2
 800046c:	b25b      	sxtb	r3, r3
 800046e:	b2db      	uxtb	r3, r3
 8000470:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000472:	f107 030f 	add.w	r3, r7, #15
 8000476:	2201      	movs	r2, #1
 8000478:	4619      	mov	r1, r3
 800047a:	2001      	movs	r0, #1
 800047c:	f7ff fea0 	bl	80001c0 <nrf24_w_reg>
}
 8000480:	bf00      	nop
 8000482:	3710      	adds	r7, #16
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <nrf24_data_available>:

uint8_t nrf24_carrier_detect(void){
	return nrf24_r_reg(RPD, 1);
}

uint8_t nrf24_data_available(void){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0

 	uint8_t reg_dt = nrf24_r_reg(FIFO_STATUS, 1);
 800048e:	2101      	movs	r1, #1
 8000490:	2017      	movs	r0, #23
 8000492:	f7ff febd 	bl	8000210 <nrf24_r_reg>
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]

	if(!(reg_dt & (1 << RX_EMPTY))){
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d101      	bne.n	80004a8 <nrf24_data_available+0x20>
		return 1;
 80004a4:	2301      	movs	r3, #1
 80004a6:	e000      	b.n	80004aa <nrf24_data_available+0x22>
	}

	return 0;
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <nrf24_receive>:

void nrf24_receive(uint8_t *data, uint8_t size){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_RX_PAYLOAD;
 80004c0:	2361      	movs	r3, #97	@ 0x61
 80004c2:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80004c4:	f7ff fe58 	bl	8000178 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80004c8:	f107 010f 	add.w	r1, r7, #15
 80004cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004d0:	2201      	movs	r2, #1
 80004d2:	4809      	ldr	r0, [pc, #36]	@ (80004f8 <nrf24_receive+0x44>)
 80004d4:	f001 fbec 	bl	8001cb0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
 80004d8:	78fb      	ldrb	r3, [r7, #3]
 80004da:	b29a      	uxth	r2, r3
 80004dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004e0:	6879      	ldr	r1, [r7, #4]
 80004e2:	4805      	ldr	r0, [pc, #20]	@ (80004f8 <nrf24_receive+0x44>)
 80004e4:	f001 fd28 	bl	8001f38 <HAL_SPI_Receive>
	csn_high();
 80004e8:	f7ff fe3a 	bl	8000160 <csn_high>

	nrf24_clear_rx_dr();
 80004ec:	f7ff ff7a 	bl	80003e4 <nrf24_clear_rx_dr>
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000084 	.word	0x20000084

080004fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000510:	4b38      	ldr	r3, [pc, #224]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a37      	ldr	r2, [pc, #220]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b35      	ldr	r3, [pc, #212]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0320 	and.w	r3, r3, #32
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b32      	ldr	r3, [pc, #200]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a31      	ldr	r2, [pc, #196]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b2f      	ldr	r3, [pc, #188]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000540:	4b2c      	ldr	r3, [pc, #176]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a2b      	ldr	r2, [pc, #172]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 8000546:	f043 0310 	orr.w	r3, r3, #16
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b29      	ldr	r3, [pc, #164]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0310 	and.w	r3, r3, #16
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin_Pin, GPIO_PIN_SET);   // CSN HIGH
 8000558:	2201      	movs	r2, #1
 800055a:	2101      	movs	r1, #1
 800055c:	4826      	ldr	r0, [pc, #152]	@ (80005f8 <MX_GPIO_Init+0xfc>)
 800055e:	f000 fefb 	bl	8001358 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CE_Pin_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000568:	4823      	ldr	r0, [pc, #140]	@ (80005f8 <MX_GPIO_Init+0xfc>)
 800056a:	f000 fef5 	bl	8001358 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000574:	4821      	ldr	r0, [pc, #132]	@ (80005fc <MX_GPIO_Init+0x100>)
 8000576:	f000 feef 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_pin_Pin PA4 CE_pin_Pin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin|CE_Pin_Pin;
 800057a:	f240 1301 	movw	r3, #257	@ 0x101
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2302      	movs	r3, #2
 800058a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4619      	mov	r1, r3
 8000592:	4819      	ldr	r0, [pc, #100]	@ (80005f8 <MX_GPIO_Init+0xfc>)
 8000594:	f000 fd5c 	bl	8001050 <HAL_GPIO_Init>


  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000598:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800059c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2302      	movs	r3, #2
 80005a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	4812      	ldr	r0, [pc, #72]	@ (80005fc <MX_GPIO_Init+0x100>)
 80005b2:	f000 fd4d 	bl	8001050 <HAL_GPIO_Init>

  /* PA5 = SPI1_SCK, PA7 = SPI1_MOSI → AF Push-Pull */
     GPIO_InitStruct.Pin   = GPIO_PIN_5|GPIO_PIN_7;
 80005b6:	23a0      	movs	r3, #160	@ 0xa0
 80005b8:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 80005ba:	2302      	movs	r3, #2
 80005bc:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	61fb      	str	r3, [r7, #28]
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	4619      	mov	r1, r3
 80005cc:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <MX_GPIO_Init+0xfc>)
 80005ce:	f000 fd3f 	bl	8001050 <HAL_GPIO_Init>

     /* PA6 = SPI1_MISO → Input Floating or Pull-Down */
     GPIO_InitStruct.Pin   = GPIO_PIN_6;
 80005d2:	2340      	movs	r3, #64	@ 0x40
 80005d4:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <MX_GPIO_Init+0xfc>)
 80005e6:	f000 fd33 	bl	8001050 <HAL_GPIO_Init>


}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010800 	.word	0x40010800
 80005fc:	40011000 	.word	0x40011000

08000600 <nrf24_receiver_setup>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void nrf24_receiver_setup(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0

	  // 1) PWR-DOWN 상태에서 시작
	uint8_t rx_address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7}; // 수신기 주소
 8000606:	4a29      	ldr	r2, [pc, #164]	@ (80006ac <nrf24_receiver_setup+0xac>)
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000610:	6018      	str	r0, [r3, #0]
 8000612:	3304      	adds	r3, #4
 8000614:	7019      	strb	r1, [r3, #0]

	ce_low();
 8000616:	f7ff fdc7 	bl	80001a8 <ce_low>
	    nrf24_pwr_up();
 800061a:	f7ff fe33 	bl	8000284 <nrf24_pwr_up>
	    HAL_Delay(5);
 800061e:	2005      	movs	r0, #5
 8000620:	f000 fc0e 	bl	8000e40 <HAL_Delay>

	    // CONFIG 설정
	    uint8_t cfg = nrf24_r_reg(CONFIG,1);
 8000624:	2101      	movs	r1, #1
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff fdf2 	bl	8000210 <nrf24_r_reg>
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]
	    cfg |= (1<<PWR_UP)|(1<<PRIM_RX);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	f043 0303 	orr.w	r3, r3, #3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	73fb      	strb	r3, [r7, #15]
	    nrf24_w_reg(CONFIG,&cfg,1);
 800063a:	f107 030f 	add.w	r3, r7, #15
 800063e:	2201      	movs	r2, #1
 8000640:	4619      	mov	r1, r3
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff fdbc 	bl	80001c0 <nrf24_w_reg>
	    HAL_Delay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f000 fbf9 	bl	8000e40 <HAL_Delay>

	    // 채널
	    nrf24_w_reg(RF_CH,    (uint8_t[]){40}, 1);
 800064e:	2328      	movs	r3, #40	@ 0x28
 8000650:	733b      	strb	r3, [r7, #12]
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2201      	movs	r2, #1
 8000658:	4619      	mov	r1, r3
 800065a:	2005      	movs	r0, #5
 800065c:	f7ff fdb0 	bl	80001c0 <nrf24_w_reg>

	    // 파이프0 활성화 + ACK
	    nrf24_w_reg(EN_RXADDR,(uint8_t[]){0x01},1);
 8000660:	2301      	movs	r3, #1
 8000662:	723b      	strb	r3, [r7, #8]
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2201      	movs	r2, #1
 800066a:	4619      	mov	r1, r3
 800066c:	2002      	movs	r0, #2
 800066e:	f7ff fda7 	bl	80001c0 <nrf24_w_reg>
	    nrf24_auto_ack(0, enable);
 8000672:	2101      	movs	r1, #1
 8000674:	2000      	movs	r0, #0
 8000676:	f7ff fecd 	bl	8000414 <nrf24_auto_ack>

	    nrf24_w_reg(RX_PW_P0, (uint8_t[]){2}, 1);   //
 800067a:	2302      	movs	r3, #2
 800067c:	713b      	strb	r3, [r7, #4]
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2201      	movs	r2, #1
 8000682:	4619      	mov	r1, r3
 8000684:	2011      	movs	r0, #17
 8000686:	f7ff fd9b 	bl	80001c0 <nrf24_w_reg>


	        nrf24_open_rx_pipe(0, rx_address);
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff fe11 	bl	80002b8 <nrf24_open_rx_pipe>
	       //       nrf24_r_reg(CONFIG,1), nrf24_r_reg(CONFIG,1)&1);

	      // printf(" After listen: CONFIG=0x%02X (PRIM_RX=%u)\r\n",
	        //      nrf24_r_reg(CONFIG,1), nrf24_r_reg(CONFIG,1)&1);

	       debug_check_channel();       // RAW RF_CH = 40 …
 8000696:	f000 f80b 	bl	80006b0 <debug_check_channel>
	           debug_dump_settings();       // RF_CH = 40, RX_ADDR_P0 = E7…
 800069a:	f000 f831 	bl	8000700 <debug_dump_settings>
	           ce_high();
 800069e:	f7ff fd77 	bl	8000190 <ce_high>

	        }
 80006a2:	bf00      	nop
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	08003a64 	.word	0x08003a64

080006b0 <debug_check_channel>:

void debug_check_channel(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af02      	add	r7, sp, #8
	uint8_t cmd = R_REGISTER | RF_CH;
 80006b6:	2305      	movs	r3, #5
 80006b8:	71fb      	strb	r3, [r7, #7]
	    uint8_t buf[2] = { cmd, NOP_CMD };   // NOP_CMD = 0xFF
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	713b      	strb	r3, [r7, #4]
 80006be:	23ff      	movs	r3, #255	@ 0xff
 80006c0:	717b      	strb	r3, [r7, #5]
	    uint8_t rx[2]  = { 0 };
 80006c2:	2300      	movs	r3, #0
 80006c4:	803b      	strh	r3, [r7, #0]

	    csn_low();
 80006c6:	f7ff fd57 	bl	8000178 <csn_low>
	      // 한 번에 두 바이트 교환
	      HAL_SPI_TransmitReceive(&hspi1, buf, rx, 2, spi_rw_timeout);
 80006ca:	463a      	mov	r2, r7
 80006cc:	1d39      	adds	r1, r7, #4
 80006ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2302      	movs	r3, #2
 80006d6:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <debug_check_channel+0x48>)
 80006d8:	f001 fd47 	bl	800216a <HAL_SPI_TransmitReceive>
	    csn_high();
 80006dc:	f7ff fd40 	bl	8000160 <csn_high>

	    // rx[0] 에는 STATUS, rx[1] 에는 RF_CH 레지스터 값
	    printf("RAW RF_CH = %u (STATUS=0x%02X)\n", rx[1], rx[0]);
 80006e0:	787b      	ldrb	r3, [r7, #1]
 80006e2:	4619      	mov	r1, r3
 80006e4:	783b      	ldrb	r3, [r7, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <debug_check_channel+0x4c>)
 80006ea:	f002 fad9 	bl	8002ca0 <iprintf>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000084 	.word	0x20000084
 80006fc:	08003a6c 	.word	0x08003a6c

08000700 <debug_dump_settings>:
void debug_dump_settings(void) {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b087      	sub	sp, #28
 8000704:	af02      	add	r7, sp, #8
    uint8_t ch   = nrf24_r_reg(RF_CH,      1);
 8000706:	2101      	movs	r1, #1
 8000708:	2005      	movs	r0, #5
 800070a:	f7ff fd81 	bl	8000210 <nrf24_r_reg>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
    uint8_t pw   = nrf24_r_reg(RX_PW_P0,   1);
 8000712:	2101      	movs	r1, #1
 8000714:	2011      	movs	r0, #17
 8000716:	f7ff fd7b 	bl	8000210 <nrf24_r_reg>
 800071a:	4603      	mov	r3, r0
 800071c:	73bb      	strb	r3, [r7, #14]
    uint8_t addr[5] = {0};
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	2300      	movs	r3, #0
 8000724:	733b      	strb	r3, [r7, #12]

    // *정확히* RX_ADDR_P0 레지스터(0x0A)부터 5바이트 읽으려면:
    csn_low();
 8000726:	f7ff fd27 	bl	8000178 <csn_low>
      uint8_t cmd = R_REGISTER | RX_ADDR_P0;
 800072a:	230a      	movs	r3, #10
 800072c:	71fb      	strb	r3, [r7, #7]
      HAL_SPI_Transmit(&hspi1, &cmd, 1, spi_w_timeout);
 800072e:	1df9      	adds	r1, r7, #7
 8000730:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000734:	2201      	movs	r2, #1
 8000736:	4818      	ldr	r0, [pc, #96]	@ (8000798 <debug_dump_settings+0x98>)
 8000738:	f001 faba 	bl	8001cb0 <HAL_SPI_Transmit>
      HAL_SPI_Receive (&hspi1, addr, 5, spi_r_timeout);
 800073c:	f107 0108 	add.w	r1, r7, #8
 8000740:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000744:	2205      	movs	r2, #5
 8000746:	4814      	ldr	r0, [pc, #80]	@ (8000798 <debug_dump_settings+0x98>)
 8000748:	f001 fbf6 	bl	8001f38 <HAL_SPI_Receive>
    csn_high();
 800074c:	f7ff fd08 	bl	8000160 <csn_high>

    printf("=== DEBUG SETTINGS ===\r\n");
 8000750:	4812      	ldr	r0, [pc, #72]	@ (800079c <debug_dump_settings+0x9c>)
 8000752:	f002 fb0d 	bl	8002d70 <puts>
    printf(" RF_CH       = %u\r\n", ch);
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	4619      	mov	r1, r3
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <debug_dump_settings+0xa0>)
 800075c:	f002 faa0 	bl	8002ca0 <iprintf>
    printf(" RX_PW_P0    = %u bytes\r\n", pw);
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	4619      	mov	r1, r3
 8000764:	480f      	ldr	r0, [pc, #60]	@ (80007a4 <debug_dump_settings+0xa4>)
 8000766:	f002 fa9b 	bl	8002ca0 <iprintf>
    printf(" RX_ADDR_P0  = %02X %02X %02X %02X %02X\r\n",
           addr[0], addr[1], addr[2], addr[3], addr[4]);
 800076a:	7a3b      	ldrb	r3, [r7, #8]
    printf(" RX_ADDR_P0  = %02X %02X %02X %02X %02X\r\n",
 800076c:	4619      	mov	r1, r3
           addr[0], addr[1], addr[2], addr[3], addr[4]);
 800076e:	7a7b      	ldrb	r3, [r7, #9]
    printf(" RX_ADDR_P0  = %02X %02X %02X %02X %02X\r\n",
 8000770:	4618      	mov	r0, r3
           addr[0], addr[1], addr[2], addr[3], addr[4]);
 8000772:	7abb      	ldrb	r3, [r7, #10]
    printf(" RX_ADDR_P0  = %02X %02X %02X %02X %02X\r\n",
 8000774:	461c      	mov	r4, r3
           addr[0], addr[1], addr[2], addr[3], addr[4]);
 8000776:	7afb      	ldrb	r3, [r7, #11]
 8000778:	7b3a      	ldrb	r2, [r7, #12]
    printf(" RX_ADDR_P0  = %02X %02X %02X %02X %02X\r\n",
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	4623      	mov	r3, r4
 8000780:	4602      	mov	r2, r0
 8000782:	4809      	ldr	r0, [pc, #36]	@ (80007a8 <debug_dump_settings+0xa8>)
 8000784:	f002 fa8c 	bl	8002ca0 <iprintf>
    printf("======================\r\n");
 8000788:	4808      	ldr	r0, [pc, #32]	@ (80007ac <debug_dump_settings+0xac>)
 800078a:	f002 faf1 	bl	8002d70 <puts>
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	bf00      	nop
 8000798:	20000084 	.word	0x20000084
 800079c:	08003a8c 	.word	0x08003a8c
 80007a0:	08003aa4 	.word	0x08003aa4
 80007a4:	08003ab8 	.word	0x08003ab8
 80007a8:	08003ad4 	.word	0x08003ad4
 80007ac:	08003b00 	.word	0x08003b00

080007b0 <receive_data>:
void receive_data(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

	  if (!nrf24_data_available()) {
 80007b6:	f7ff fe67 	bl	8000488 <nrf24_data_available>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d03a      	beq.n	8000836 <receive_data+0x86>
	        return;
	    }

	    // 2바이트 읽고 문자열 종료
	    uint8_t buf[PAYLOAD_SIZE+1] = {0};
 80007c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <receive_data+0x90>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	80bb      	strh	r3, [r7, #4]
 80007c6:	2300      	movs	r3, #0
 80007c8:	71bb      	strb	r3, [r7, #6]
	    nrf24_receive(buf, PAYLOAD_SIZE);
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2102      	movs	r1, #2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe70 	bl	80004b4 <nrf24_receive>
	    buf[PAYLOAD_SIZE] = '\0';
 80007d4:	2300      	movs	r3, #0
 80007d6:	71bb      	strb	r3, [r7, #6]

	    // 출력
	    printf("Received: %s\r\n", buf);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <receive_data+0x94>)
 80007de:	f002 fa5f 	bl	8002ca0 <iprintf>



            // 수신된 데이터가 "hi"와 일치하는지 확인
            if (strcmp((char*)buf, "hi") == 0) {
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4918      	ldr	r1, [pc, #96]	@ (8000848 <receive_data+0x98>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fcb0 	bl	800014c <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10e      	bne.n	8000810 <receive_data+0x60>
                // 수신된 데이터가 "hi"이면 PC8 LED 켜기
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);  // PC8 LED 켜기
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f8:	4814      	ldr	r0, [pc, #80]	@ (800084c <receive_data+0x9c>)
 80007fa:	f000 fdad 	bl	8001358 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // PC6 LED 끄기
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	@ 0x40
 8000802:	4812      	ldr	r0, [pc, #72]	@ (800084c <receive_data+0x9c>)
 8000804:	f000 fda8 	bl	8001358 <HAL_GPIO_WritePin>
                printf("성공");
 8000808:	4811      	ldr	r0, [pc, #68]	@ (8000850 <receive_data+0xa0>)
 800080a:	f002 fa49 	bl	8002ca0 <iprintf>
 800080e:	e00d      	b.n	800082c <receive_data+0x7c>
            } else {
                // 수신된 데이터가 "hi"가 아니면 PC6 LED 켜기
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);  // PC6 LED 켜기
 8000810:	2201      	movs	r2, #1
 8000812:	2140      	movs	r1, #64	@ 0x40
 8000814:	480d      	ldr	r0, [pc, #52]	@ (800084c <receive_data+0x9c>)
 8000816:	f000 fd9f 	bl	8001358 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);  // PC8 LED 끄기
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000820:	480a      	ldr	r0, [pc, #40]	@ (800084c <receive_data+0x9c>)
 8000822:	f000 fd99 	bl	8001358 <HAL_GPIO_WritePin>
                printf("실패");
 8000826:	480b      	ldr	r0, [pc, #44]	@ (8000854 <receive_data+0xa4>)
 8000828:	f002 fa3a 	bl	8002ca0 <iprintf>
            }

            nrf24_clear_rx_dr();
 800082c:	f7ff fdda 	bl	80003e4 <nrf24_clear_rx_dr>
              nrf24_flush_rx();
 8000830:	f7ff fdb0 	bl	8000394 <nrf24_flush_rx>
 8000834:	e000      	b.n	8000838 <receive_data+0x88>
	        return;
 8000836:	bf00      	nop

}
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	08003b3c 	.word	0x08003b3c
 8000844:	08003b18 	.word	0x08003b18
 8000848:	08003b28 	.word	0x08003b28
 800084c:	40011000 	.word	0x40011000
 8000850:	08003b2c 	.word	0x08003b2c
 8000854:	08003b34 	.word	0x08003b34

08000858 <__io_putchar>:


int __io_putchar(int ch)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);  // UART2로 데이터 전송
 8000860:	1d39      	adds	r1, r7, #4
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
 8000866:	2201      	movs	r2, #1
 8000868:	4803      	ldr	r0, [pc, #12]	@ (8000878 <__io_putchar+0x20>)
 800086a:	f001 ff82 	bl	8002772 <HAL_UART_Transmit>
    return ch;
 800086e:	687b      	ldr	r3, [r7, #4]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000e0 	.word	0x200000e0

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 fa7c 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f815 	bl	80008b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f7ff fe38 	bl	80004fc <MX_GPIO_Init>
  MX_SPI1_Init();
 800088c:	f000 f858 	bl	8000940 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000890:	f000 f9da 	bl	8000c48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 nrf24_receiver_setup();
 8000894:	f7ff feb4 	bl	8000600 <nrf24_receiver_setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  receive_data();  // 데이터 수신 시도
 8000898:	f7ff ff8a 	bl	80007b0 <receive_data>
	 	  if (nrf24_data_available())
 800089c:	f7ff fdf4 	bl	8000488 <nrf24_data_available>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <main+0x2e>
	 	       receive_data();       // 실제로 "hi" 를 수신하면 LED 켜고 printf
 80008a6:	f7ff ff83 	bl	80007b0 <receive_data>
	 	     // }
	 	  //debug_check_channel();
	 	          HAL_Delay(100);  // 짧은 지연
 80008aa:	2064      	movs	r0, #100	@ 0x64
 80008ac:	f000 fac8 	bl	8000e40 <HAL_Delay>
	  receive_data();  // 데이터 수신 시도
 80008b0:	e7f2      	b.n	8000898 <main+0x1c>

080008b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b090      	sub	sp, #64	@ 0x40
 80008b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b8:	f107 0318 	add.w	r3, r7, #24
 80008bc:	2228      	movs	r2, #40	@ 0x28
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fb35 	bl	8002f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008dc:	2310      	movs	r3, #16
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e0:	2302      	movs	r3, #2
 80008e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008e8:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80008ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fd48 	bl	8001388 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008fe:	f000 f819 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2302      	movs	r3, #2
 8000908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2102      	movs	r1, #2
 800091c:	4618      	mov	r0, r3
 800091e:	f000 ffb5 	bl	800188c <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000928:	f000 f804 	bl	8000934 <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	3740      	adds	r7, #64	@ 0x40
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_SPI1_Init+0x64>)
 8000946:	4a18      	ldr	r2, [pc, #96]	@ (80009a8 <MX_SPI1_Init+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_SPI1_Init+0x64>)
 800094c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000950:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_SPI1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <MX_SPI1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_SPI1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_SPI1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_SPI1_Init+0x64>)
 800096c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000970:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_SPI1_Init+0x64>)
 8000974:	2218      	movs	r2, #24
 8000976:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <MX_SPI1_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_SPI1_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <MX_SPI1_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_SPI1_Init+0x64>)
 800098c:	220a      	movs	r2, #10
 800098e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_SPI1_Init+0x64>)
 8000992:	f001 f909 	bl	8001ba8 <HAL_SPI_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800099c:	f7ff ffca 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000084 	.word	0x20000084
 80009a8:	40013000 	.word	0x40013000

080009ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a34 <HAL_SPI_MspInit+0x88>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d12f      	bne.n	8000a2c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a13      	ldr	r2, [pc, #76]	@ (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80009fc:	23a0      	movs	r3, #160	@ 0xa0
 80009fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480b      	ldr	r0, [pc, #44]	@ (8000a3c <HAL_SPI_MspInit+0x90>)
 8000a10:	f000 fb1e 	bl	8001050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a14:	2340      	movs	r3, #64	@ 0x40
 8000a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <HAL_SPI_MspInit+0x90>)
 8000a28:	f000 fb12 	bl	8001050 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40013000 	.word	0x40013000
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010800 	.word	0x40010800

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	4a14      	ldr	r2, [pc, #80]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6193      	str	r3, [r2, #24]
 8000a52:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a0e      	ldr	r2, [pc, #56]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_MspInit+0x60>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <HAL_MspInit+0x60>)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010000 	.word	0x40010000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f988 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00a      	b.n	8000b24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0e:	f3af 8000 	nop.w
 8000b12:	4601      	mov	r1, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf0      	blt.n	8000b0e <_read+0x12>
  }

  return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e009      	b.n	8000b5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	60ba      	str	r2, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe81 	bl	8000858 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf1      	blt.n	8000b48 <_write+0x12>
  }
  return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b94:	605a      	str	r2, [r3, #4]
  return 0;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <_isatty>:

int _isatty(int file)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr

08000bb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
	...

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f002 f9e4 	bl	8002fcc <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20005000 	.word	0x20005000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	200000dc 	.word	0x200000dc
 8000c38:	20000278 	.word	0x20000278

08000c3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <MX_USART2_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f001 fd27 	bl	80026d2 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f7ff fe53 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000e0 	.word	0x200000e0
 8000c98:	40004400 	.word	0x40004400

08000c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d12f      	bne.n	8000d1c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <HAL_UART_MspInit+0x8c>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	@ (8000d28 <HAL_UART_MspInit+0x8c>)
 8000cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc6:	61d3      	str	r3, [r2, #28]
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <HAL_UART_MspInit+0x8c>)
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <HAL_UART_MspInit+0x8c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a13      	ldr	r2, [pc, #76]	@ (8000d28 <HAL_UART_MspInit+0x8c>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <HAL_UART_MspInit+0x8c>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cec:	2304      	movs	r3, #4
 8000cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480b      	ldr	r0, [pc, #44]	@ (8000d2c <HAL_UART_MspInit+0x90>)
 8000d00:	f000 f9a6 	bl	8001050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d04:	2308      	movs	r3, #8
 8000d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <HAL_UART_MspInit+0x90>)
 8000d18:	f000 f99a 	bl	8001050 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40004400 	.word	0x40004400
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010800 	.word	0x40010800

08000d30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d30:	f7ff ff84 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d36:	490c      	ldr	r1, [pc, #48]	@ (8000d68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d38:	4a0c      	ldr	r2, [pc, #48]	@ (8000d6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a09      	ldr	r2, [pc, #36]	@ (8000d70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d4c:	4c09      	ldr	r4, [pc, #36]	@ (8000d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f002 f93d 	bl	8002fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5e:	f7ff fd8d 	bl	800087c <main>
  bx lr
 8000d62:	4770      	bx	lr
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d6c:	08003bb0 	.word	0x08003bb0
  ldr r2, =_sbss
 8000d70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d74:	20000278 	.word	0x20000278

08000d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_2_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <HAL_Init+0x28>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	@ (8000da4 <HAL_Init+0x28>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f92b 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f808 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fe52 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_InitTick+0x54>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_InitTick+0x58>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f935 	bl	8001036 <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00e      	b.n	8000df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d80a      	bhi.n	8000df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 f90b 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4a06      	ldr	r2, [pc, #24]	@ (8000e04 <HAL_InitTick+0x5c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000004 	.word	0x20000004

08000e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_IncTick+0x1c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a03      	ldr	r2, [pc, #12]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000128 	.word	0x20000128

08000e2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b02      	ldr	r3, [pc, #8]	@ (8000e3c <HAL_GetTick+0x10>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000128 	.word	0x20000128

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff fff0 	bl	8000e2c <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffe0 	bl	8000e2c <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	@ (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	@ (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	@ 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	@ 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff90 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff49 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff5e 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff90 	bl	8000f40 <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5f 	bl	8000eec <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffb0 	bl	8000fa4 <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b08b      	sub	sp, #44	@ 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001062:	e169      	b.n	8001338 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001064:	2201      	movs	r2, #1
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	69fa      	ldr	r2, [r7, #28]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8158 	bne.w	8001332 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	4a9a      	ldr	r2, [pc, #616]	@ (80012f0 <HAL_GPIO_Init+0x2a0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d05e      	beq.n	800114a <HAL_GPIO_Init+0xfa>
 800108c:	4a98      	ldr	r2, [pc, #608]	@ (80012f0 <HAL_GPIO_Init+0x2a0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d875      	bhi.n	800117e <HAL_GPIO_Init+0x12e>
 8001092:	4a98      	ldr	r2, [pc, #608]	@ (80012f4 <HAL_GPIO_Init+0x2a4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d058      	beq.n	800114a <HAL_GPIO_Init+0xfa>
 8001098:	4a96      	ldr	r2, [pc, #600]	@ (80012f4 <HAL_GPIO_Init+0x2a4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d86f      	bhi.n	800117e <HAL_GPIO_Init+0x12e>
 800109e:	4a96      	ldr	r2, [pc, #600]	@ (80012f8 <HAL_GPIO_Init+0x2a8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d052      	beq.n	800114a <HAL_GPIO_Init+0xfa>
 80010a4:	4a94      	ldr	r2, [pc, #592]	@ (80012f8 <HAL_GPIO_Init+0x2a8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d869      	bhi.n	800117e <HAL_GPIO_Init+0x12e>
 80010aa:	4a94      	ldr	r2, [pc, #592]	@ (80012fc <HAL_GPIO_Init+0x2ac>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d04c      	beq.n	800114a <HAL_GPIO_Init+0xfa>
 80010b0:	4a92      	ldr	r2, [pc, #584]	@ (80012fc <HAL_GPIO_Init+0x2ac>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d863      	bhi.n	800117e <HAL_GPIO_Init+0x12e>
 80010b6:	4a92      	ldr	r2, [pc, #584]	@ (8001300 <HAL_GPIO_Init+0x2b0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d046      	beq.n	800114a <HAL_GPIO_Init+0xfa>
 80010bc:	4a90      	ldr	r2, [pc, #576]	@ (8001300 <HAL_GPIO_Init+0x2b0>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d85d      	bhi.n	800117e <HAL_GPIO_Init+0x12e>
 80010c2:	2b12      	cmp	r3, #18
 80010c4:	d82a      	bhi.n	800111c <HAL_GPIO_Init+0xcc>
 80010c6:	2b12      	cmp	r3, #18
 80010c8:	d859      	bhi.n	800117e <HAL_GPIO_Init+0x12e>
 80010ca:	a201      	add	r2, pc, #4	@ (adr r2, 80010d0 <HAL_GPIO_Init+0x80>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	0800114b 	.word	0x0800114b
 80010d4:	08001125 	.word	0x08001125
 80010d8:	08001137 	.word	0x08001137
 80010dc:	08001179 	.word	0x08001179
 80010e0:	0800117f 	.word	0x0800117f
 80010e4:	0800117f 	.word	0x0800117f
 80010e8:	0800117f 	.word	0x0800117f
 80010ec:	0800117f 	.word	0x0800117f
 80010f0:	0800117f 	.word	0x0800117f
 80010f4:	0800117f 	.word	0x0800117f
 80010f8:	0800117f 	.word	0x0800117f
 80010fc:	0800117f 	.word	0x0800117f
 8001100:	0800117f 	.word	0x0800117f
 8001104:	0800117f 	.word	0x0800117f
 8001108:	0800117f 	.word	0x0800117f
 800110c:	0800117f 	.word	0x0800117f
 8001110:	0800117f 	.word	0x0800117f
 8001114:	0800112d 	.word	0x0800112d
 8001118:	08001141 	.word	0x08001141
 800111c:	4a79      	ldr	r2, [pc, #484]	@ (8001304 <HAL_GPIO_Init+0x2b4>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001122:	e02c      	b.n	800117e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	623b      	str	r3, [r7, #32]
          break;
 800112a:	e029      	b.n	8001180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	3304      	adds	r3, #4
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	e024      	b.n	8001180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	3308      	adds	r3, #8
 800113c:	623b      	str	r3, [r7, #32]
          break;
 800113e:	e01f      	b.n	8001180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	330c      	adds	r3, #12
 8001146:	623b      	str	r3, [r7, #32]
          break;
 8001148:	e01a      	b.n	8001180 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001152:	2304      	movs	r3, #4
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e013      	b.n	8001180 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d105      	bne.n	800116c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001160:	2308      	movs	r3, #8
 8001162:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	611a      	str	r2, [r3, #16]
          break;
 800116a:	e009      	b.n	8001180 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800116c:	2308      	movs	r3, #8
 800116e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	615a      	str	r2, [r3, #20]
          break;
 8001176:	e003      	b.n	8001180 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
          break;
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x130>
          break;
 800117e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2bff      	cmp	r3, #255	@ 0xff
 8001184:	d801      	bhi.n	800118a <HAL_GPIO_Init+0x13a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	e001      	b.n	800118e <HAL_GPIO_Init+0x13e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3304      	adds	r3, #4
 800118e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2bff      	cmp	r3, #255	@ 0xff
 8001194:	d802      	bhi.n	800119c <HAL_GPIO_Init+0x14c>
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	e002      	b.n	80011a2 <HAL_GPIO_Init+0x152>
 800119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119e:	3b08      	subs	r3, #8
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	210f      	movs	r1, #15
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	401a      	ands	r2, r3
 80011b4:	6a39      	ldr	r1, [r7, #32]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	431a      	orrs	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 80b1 	beq.w	8001332 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001308 <HAL_GPIO_Init+0x2b8>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001308 <HAL_GPIO_Init+0x2b8>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001308 <HAL_GPIO_Init+0x2b8>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011e8:	4a48      	ldr	r2, [pc, #288]	@ (800130c <HAL_GPIO_Init+0x2bc>)
 80011ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4013      	ands	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a40      	ldr	r2, [pc, #256]	@ (8001310 <HAL_GPIO_Init+0x2c0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d013      	beq.n	800123c <HAL_GPIO_Init+0x1ec>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a3f      	ldr	r2, [pc, #252]	@ (8001314 <HAL_GPIO_Init+0x2c4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d00d      	beq.n	8001238 <HAL_GPIO_Init+0x1e8>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a3e      	ldr	r2, [pc, #248]	@ (8001318 <HAL_GPIO_Init+0x2c8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d007      	beq.n	8001234 <HAL_GPIO_Init+0x1e4>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a3d      	ldr	r2, [pc, #244]	@ (800131c <HAL_GPIO_Init+0x2cc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d101      	bne.n	8001230 <HAL_GPIO_Init+0x1e0>
 800122c:	2303      	movs	r3, #3
 800122e:	e006      	b.n	800123e <HAL_GPIO_Init+0x1ee>
 8001230:	2304      	movs	r3, #4
 8001232:	e004      	b.n	800123e <HAL_GPIO_Init+0x1ee>
 8001234:	2302      	movs	r3, #2
 8001236:	e002      	b.n	800123e <HAL_GPIO_Init+0x1ee>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <HAL_GPIO_Init+0x1ee>
 800123c:	2300      	movs	r3, #0
 800123e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001240:	f002 0203 	and.w	r2, r2, #3
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	4093      	lsls	r3, r2
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800124e:	492f      	ldr	r1, [pc, #188]	@ (800130c <HAL_GPIO_Init+0x2bc>)
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001268:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	492c      	ldr	r1, [pc, #176]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	608b      	str	r3, [r1, #8]
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	43db      	mvns	r3, r3
 800127e:	4928      	ldr	r1, [pc, #160]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 8001280:	4013      	ands	r3, r2
 8001282:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001290:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	4922      	ldr	r1, [pc, #136]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	60cb      	str	r3, [r1, #12]
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800129e:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	491e      	ldr	r1, [pc, #120]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b8:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4918      	ldr	r1, [pc, #96]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012c6:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4914      	ldr	r1, [pc, #80]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d021      	beq.n	8001324 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	490e      	ldr	r1, [pc, #56]	@ (8001320 <HAL_GPIO_Init+0x2d0>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
 80012ec:	e021      	b.n	8001332 <HAL_GPIO_Init+0x2e2>
 80012ee:	bf00      	nop
 80012f0:	10320000 	.word	0x10320000
 80012f4:	10310000 	.word	0x10310000
 80012f8:	10220000 	.word	0x10220000
 80012fc:	10210000 	.word	0x10210000
 8001300:	10120000 	.word	0x10120000
 8001304:	10110000 	.word	0x10110000
 8001308:	40021000 	.word	0x40021000
 800130c:	40010000 	.word	0x40010000
 8001310:	40010800 	.word	0x40010800
 8001314:	40010c00 	.word	0x40010c00
 8001318:	40011000 	.word	0x40011000
 800131c:	40011400 	.word	0x40011400
 8001320:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <HAL_GPIO_Init+0x304>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	43db      	mvns	r3, r3
 800132c:	4909      	ldr	r1, [pc, #36]	@ (8001354 <HAL_GPIO_Init+0x304>)
 800132e:	4013      	ands	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	3301      	adds	r3, #1
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133e:	fa22 f303 	lsr.w	r3, r2, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	f47f ae8e 	bne.w	8001064 <HAL_GPIO_Init+0x14>
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	372c      	adds	r7, #44	@ 0x2c
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001374:	e003      	b.n	800137e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	041a      	lsls	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	611a      	str	r2, [r3, #16]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e272      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8087 	beq.w	80014b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a8:	4b92      	ldr	r3, [pc, #584]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d00c      	beq.n	80013ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b4:	4b8f      	ldr	r3, [pc, #572]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d112      	bne.n	80013e6 <HAL_RCC_OscConfig+0x5e>
 80013c0:	4b8c      	ldr	r3, [pc, #560]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013cc:	d10b      	bne.n	80013e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ce:	4b89      	ldr	r3, [pc, #548]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d06c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x12c>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d168      	bne.n	80014b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e24c      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x76>
 80013f0:	4b80      	ldr	r3, [pc, #512]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a7f      	ldr	r2, [pc, #508]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e02e      	b.n	800145c <HAL_RCC_OscConfig+0xd4>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x98>
 8001406:	4b7b      	ldr	r3, [pc, #492]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a7a      	ldr	r2, [pc, #488]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800140c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b78      	ldr	r3, [pc, #480]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a77      	ldr	r2, [pc, #476]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001418:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e01d      	b.n	800145c <HAL_RCC_OscConfig+0xd4>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0xbc>
 800142a:	4b72      	ldr	r3, [pc, #456]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a71      	ldr	r2, [pc, #452]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b6f      	ldr	r3, [pc, #444]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a6e      	ldr	r2, [pc, #440]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0xd4>
 8001444:	4b6b      	ldr	r3, [pc, #428]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a6a      	ldr	r2, [pc, #424]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800144a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b68      	ldr	r3, [pc, #416]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a67      	ldr	r2, [pc, #412]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800145a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fce2 	bl	8000e2c <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fcde 	bl	8000e2c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	@ 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e200      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	4b5d      	ldr	r3, [pc, #372]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0xe4>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fcce 	bl	8000e2c <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fcca 	bl	8000e2c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	@ 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1ec      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	4b53      	ldr	r3, [pc, #332]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x10c>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d063      	beq.n	800158a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c2:	4b4c      	ldr	r3, [pc, #304]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014ce:	4b49      	ldr	r3, [pc, #292]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d11c      	bne.n	8001514 <HAL_RCC_OscConfig+0x18c>
 80014da:	4b46      	ldr	r3, [pc, #280]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d116      	bne.n	8001514 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	4b43      	ldr	r3, [pc, #268]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x176>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e1c0      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b3d      	ldr	r3, [pc, #244]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4939      	ldr	r1, [pc, #228]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	e03a      	b.n	800158a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151c:	4b36      	ldr	r3, [pc, #216]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fc83 	bl	8000e2c <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fc7f 	bl	8000e2c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1a1      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	4b2d      	ldr	r3, [pc, #180]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4927      	ldr	r1, [pc, #156]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fc62 	bl	8000e2c <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff fc5e 	bl	8000e2c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e180      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d03a      	beq.n	800160c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d019      	beq.n	80015d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <HAL_RCC_OscConfig+0x274>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fc42 	bl	8000e2c <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fc3e 	bl	8000e2c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e160      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 face 	bl	8001b6c <RCC_Delay>
 80015d0:	e01c      	b.n	800160c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_RCC_OscConfig+0x274>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff fc28 	bl	8000e2c <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015de:	e00f      	b.n	8001600 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc24 	bl	8000e2c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d908      	bls.n	8001600 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e146      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	42420000 	.word	0x42420000
 80015fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	4b92      	ldr	r3, [pc, #584]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e9      	bne.n	80015e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80a6 	beq.w	8001766 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b8b      	ldr	r3, [pc, #556]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10d      	bne.n	8001646 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b88      	ldr	r3, [pc, #544]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a87      	ldr	r2, [pc, #540]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001634:	61d3      	str	r3, [r2, #28]
 8001636:	4b85      	ldr	r3, [pc, #532]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b82      	ldr	r3, [pc, #520]	@ (8001850 <HAL_RCC_OscConfig+0x4c8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d118      	bne.n	8001684 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4b7f      	ldr	r3, [pc, #508]	@ (8001850 <HAL_RCC_OscConfig+0x4c8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a7e      	ldr	r2, [pc, #504]	@ (8001850 <HAL_RCC_OscConfig+0x4c8>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165e:	f7ff fbe5 	bl	8000e2c <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7ff fbe1 	bl	8000e2c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	@ 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e103      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b75      	ldr	r3, [pc, #468]	@ (8001850 <HAL_RCC_OscConfig+0x4c8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x312>
 800168c:	4b6f      	ldr	r3, [pc, #444]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a6e      	ldr	r2, [pc, #440]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	e02d      	b.n	80016f6 <HAL_RCC_OscConfig+0x36e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x334>
 80016a2:	4b6a      	ldr	r3, [pc, #424]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4a69      	ldr	r2, [pc, #420]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6213      	str	r3, [r2, #32]
 80016ae:	4b67      	ldr	r3, [pc, #412]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a66      	ldr	r2, [pc, #408]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	f023 0304 	bic.w	r3, r3, #4
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	e01c      	b.n	80016f6 <HAL_RCC_OscConfig+0x36e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d10c      	bne.n	80016de <HAL_RCC_OscConfig+0x356>
 80016c4:	4b61      	ldr	r3, [pc, #388]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a60      	ldr	r2, [pc, #384]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6213      	str	r3, [r2, #32]
 80016d0:	4b5e      	ldr	r3, [pc, #376]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a5d      	ldr	r2, [pc, #372]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	e00b      	b.n	80016f6 <HAL_RCC_OscConfig+0x36e>
 80016de:	4b5b      	ldr	r3, [pc, #364]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4a5a      	ldr	r2, [pc, #360]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	4b58      	ldr	r3, [pc, #352]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a57      	ldr	r2, [pc, #348]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d015      	beq.n	800172a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fb95 	bl	8000e2c <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fb91 	bl	8000e2c <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0b1      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	4b4b      	ldr	r3, [pc, #300]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ee      	beq.n	8001706 <HAL_RCC_OscConfig+0x37e>
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff fb7f 	bl	8000e2c <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fb7b 	bl	8000e2c <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e09b      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	4b40      	ldr	r3, [pc, #256]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ee      	bne.n	8001732 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d105      	bne.n	8001766 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175a:	4b3c      	ldr	r3, [pc, #240]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a3b      	ldr	r2, [pc, #236]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001764:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8087 	beq.w	800187e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001770:	4b36      	ldr	r3, [pc, #216]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d061      	beq.n	8001840 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d146      	bne.n	8001812 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001784:	4b33      	ldr	r3, [pc, #204]	@ (8001854 <HAL_RCC_OscConfig+0x4cc>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fb4f 	bl	8000e2c <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001792:	f7ff fb4b 	bl	8000e2c <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e06d      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a4:	4b29      	ldr	r3, [pc, #164]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b8:	d108      	bne.n	80017cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	4921      	ldr	r1, [pc, #132]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a19      	ldr	r1, [r3, #32]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	430b      	orrs	r3, r1
 80017de:	491b      	ldr	r1, [pc, #108]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <HAL_RCC_OscConfig+0x4cc>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fb1f 	bl	8000e2c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff fb1b 	bl	8000e2c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e03d      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x46a>
 8001810:	e035      	b.n	800187e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <HAL_RCC_OscConfig+0x4cc>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fb08 	bl	8000e2c <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fb04 	bl	8000e2c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e026      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x498>
 800183e:	e01e      	b.n	800187e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d107      	bne.n	8001858 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e019      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
 800184c:	40021000 	.word	0x40021000
 8001850:	40007000 	.word	0x40007000
 8001854:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <HAL_RCC_OscConfig+0x500>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	429a      	cmp	r2, r3
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000

0800188c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0d0      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d910      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b67      	ldr	r3, [pc, #412]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 0207 	bic.w	r2, r3, #7
 80018b6:	4965      	ldr	r1, [pc, #404]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b63      	ldr	r3, [pc, #396]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0b8      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e8:	4b59      	ldr	r3, [pc, #356]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a58      	ldr	r2, [pc, #352]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001900:	4b53      	ldr	r3, [pc, #332]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a52      	ldr	r2, [pc, #328]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800190a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190c:	4b50      	ldr	r3, [pc, #320]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	494d      	ldr	r1, [pc, #308]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d040      	beq.n	80019ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d115      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e07f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e073      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e06b      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b39      	ldr	r3, [pc, #228]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4936      	ldr	r1, [pc, #216]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff fa56 	bl	8000e2c <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff fa52 	bl	8000e2c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e053      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b27      	ldr	r3, [pc, #156]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d210      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 0207 	bic.w	r2, r3, #7
 80019c2:	4922      	ldr	r1, [pc, #136]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e032      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4916      	ldr	r1, [pc, #88]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a06:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	490e      	ldr	r1, [pc, #56]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a1a:	f000 f821 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	490a      	ldr	r1, [pc, #40]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	5ccb      	ldrb	r3, [r1, r3]
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	4a09      	ldr	r2, [pc, #36]	@ (8001a58 <HAL_RCC_ClockConfig+0x1cc>)
 8001a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_RCC_ClockConfig+0x1d0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f9b4 	bl	8000da8 <HAL_InitTick>

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	08003b40 	.word	0x08003b40
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x30>
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d003      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0x36>
 8001a8e:	e027      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a92:	613b      	str	r3, [r7, #16]
      break;
 8001a94:	e027      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	0c9b      	lsrs	r3, r3, #18
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001aa0:	5cd3      	ldrb	r3, [r2, r3]
 8001aa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d010      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	0c5b      	lsrs	r3, r3, #17
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	4a11      	ldr	r2, [pc, #68]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ac2:	fb03 f202 	mul.w	r2, r3, r2
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e004      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	613b      	str	r3, [r7, #16]
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ae2:	613b      	str	r3, [r7, #16]
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	693b      	ldr	r3, [r7, #16]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	007a1200 	.word	0x007a1200
 8001afc:	08003b58 	.word	0x08003b58
 8001b00:	08003b68 	.word	0x08003b68
 8001b04:	003d0900 	.word	0x003d0900

08001b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b02      	ldr	r3, [pc, #8]	@ (8001b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b20:	f7ff fff2 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	@ (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	08003b50 	.word	0x08003b50

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b48:	f7ff ffde 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0adb      	lsrs	r3, r3, #11
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	@ (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08003b50 	.word	0x08003b50

08001b6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <RCC_Delay+0x34>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <RCC_Delay+0x38>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0a5b      	lsrs	r3, r3, #9
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b88:	bf00      	nop
  }
  while (Delay --);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1e5a      	subs	r2, r3, #1
 8001b8e:	60fa      	str	r2, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f9      	bne.n	8001b88 <RCC_Delay+0x1c>
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	10624dd3 	.word	0x10624dd3

08001ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e076      	b.n	8001ca8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d108      	bne.n	8001bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bca:	d009      	beq.n	8001be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
 8001bd2:	e005      	b.n	8001be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe fed6 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c64:	ea42 0103 	orr.w	r1, r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	0c1a      	lsrs	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f002 0204 	and.w	r2, r2, #4
 8001c86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cc0:	f7ff f8b4 	bl	8000e2c <HAL_GetTick>
 8001cc4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d001      	beq.n	8001cda <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e12a      	b.n	8001f30 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_SPI_Transmit+0x36>
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e122      	b.n	8001f30 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_SPI_Transmit+0x48>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e11b      	b.n	8001f30 <HAL_SPI_Transmit+0x280>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2203      	movs	r2, #3
 8001d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	88fa      	ldrh	r2, [r7, #6]
 8001d18:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	88fa      	ldrh	r2, [r7, #6]
 8001d1e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d46:	d10f      	bne.n	8001d68 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d72:	2b40      	cmp	r3, #64	@ 0x40
 8001d74:	d007      	beq.n	8001d86 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d8e:	d152      	bne.n	8001e36 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_SPI_Transmit+0xee>
 8001d98:	8b7b      	ldrh	r3, [r7, #26]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d145      	bne.n	8001e2a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	881a      	ldrh	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	1c9a      	adds	r2, r3, #2
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dc2:	e032      	b.n	8001e2a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d112      	bne.n	8001df8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	881a      	ldrh	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	1c9a      	adds	r2, r3, #2
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001df6:	e018      	b.n	8001e2a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001df8:	f7ff f818 	bl	8000e2c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d803      	bhi.n	8001e10 <HAL_SPI_Transmit+0x160>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0e:	d102      	bne.n	8001e16 <HAL_SPI_Transmit+0x166>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e082      	b.n	8001f30 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1c7      	bne.n	8001dc4 <HAL_SPI_Transmit+0x114>
 8001e34:	e053      	b.n	8001ede <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_SPI_Transmit+0x194>
 8001e3e:	8b7b      	ldrh	r3, [r7, #26]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d147      	bne.n	8001ed4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	330c      	adds	r3, #12
 8001e4e:	7812      	ldrb	r2, [r2, #0]
 8001e50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e6a:	e033      	b.n	8001ed4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d113      	bne.n	8001ea2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	330c      	adds	r3, #12
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001ea0:	e018      	b.n	8001ed4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ea2:	f7fe ffc3 	bl	8000e2c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d803      	bhi.n	8001eba <HAL_SPI_Transmit+0x20a>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d102      	bne.n	8001ec0 <HAL_SPI_Transmit+0x210>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e02d      	b.n	8001f30 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1c6      	bne.n	8001e6c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fbc4 	bl	8002670 <SPI_EndRxTxTransaction>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10a      	bne.n	8001f12 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
  }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	4613      	mov	r3, r2
 8001f46:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d001      	beq.n	8001f58 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
 8001f56:	e104      	b.n	8002162 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f60:	d112      	bne.n	8001f88 <HAL_SPI_Receive+0x50>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10e      	bne.n	8001f88 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f8f3 	bl	800216a <HAL_SPI_TransmitReceive>
 8001f84:	4603      	mov	r3, r0
 8001f86:	e0ec      	b.n	8002162 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f88:	f7fe ff50 	bl	8000e2c <HAL_GetTick>
 8001f8c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_SPI_Receive+0x62>
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0e1      	b.n	8002162 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_SPI_Receive+0x74>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e0da      	b.n	8002162 <HAL_SPI_Receive+0x22a>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	88fa      	ldrh	r2, [r7, #6]
 8001fcc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	88fa      	ldrh	r2, [r7, #6]
 8001fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ffa:	d10f      	bne.n	800201c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800200a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800201a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002026:	2b40      	cmp	r3, #64	@ 0x40
 8002028:	d007      	beq.n	800203a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d170      	bne.n	8002124 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002042:	e035      	b.n	80020b0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d115      	bne.n	800207e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f103 020c 	add.w	r2, r3, #12
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205e:	7812      	ldrb	r2, [r2, #0]
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800207c:	e018      	b.n	80020b0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800207e:	f7fe fed5 	bl	8000e2c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d803      	bhi.n	8002096 <HAL_SPI_Receive+0x15e>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d102      	bne.n	800209c <HAL_SPI_Receive+0x164>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e058      	b.n	8002162 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1c4      	bne.n	8002044 <HAL_SPI_Receive+0x10c>
 80020ba:	e038      	b.n	800212e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d113      	bne.n	80020f2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d4:	b292      	uxth	r2, r2
 80020d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020dc:	1c9a      	adds	r2, r3, #2
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80020f0:	e018      	b.n	8002124 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f2:	f7fe fe9b 	bl	8000e2c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d803      	bhi.n	800210a <HAL_SPI_Receive+0x1d2>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d102      	bne.n	8002110 <HAL_SPI_Receive+0x1d8>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d109      	bne.n	8002124 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e01e      	b.n	8002162 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1c6      	bne.n	80020bc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fa4a 	bl	80025cc <SPI_EndRxTransaction>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002160:	2300      	movs	r3, #0
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b08a      	sub	sp, #40	@ 0x28
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002178:	2301      	movs	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800217c:	f7fe fe56 	bl	8000e2c <HAL_GetTick>
 8002180:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002188:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002194:	7ffb      	ldrb	r3, [r7, #31]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d00c      	beq.n	80021b4 <HAL_SPI_TransmitReceive+0x4a>
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021a0:	d106      	bne.n	80021b0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <HAL_SPI_TransmitReceive+0x46>
 80021aa:	7ffb      	ldrb	r3, [r7, #31]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d001      	beq.n	80021b4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
 80021b2:	e17f      	b.n	80024b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_SPI_TransmitReceive+0x5c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_SPI_TransmitReceive+0x5c>
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e174      	b.n	80024b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_SPI_TransmitReceive+0x6e>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e16d      	b.n	80024b4 <HAL_SPI_TransmitReceive+0x34a>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d003      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2205      	movs	r2, #5
 80021f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	887a      	ldrh	r2, [r7, #2]
 800220a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	887a      	ldrh	r2, [r7, #2]
 8002216:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002234:	2b40      	cmp	r3, #64	@ 0x40
 8002236:	d007      	beq.n	8002248 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002246:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002250:	d17e      	bne.n	8002350 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_SPI_TransmitReceive+0xf6>
 800225a:	8afb      	ldrh	r3, [r7, #22]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d16c      	bne.n	800233a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	1c9a      	adds	r2, r3, #2
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002284:	e059      	b.n	800233a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b02      	cmp	r3, #2
 8002292:	d11b      	bne.n	80022cc <HAL_SPI_TransmitReceive+0x162>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <HAL_SPI_TransmitReceive+0x162>
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d113      	bne.n	80022cc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a8:	881a      	ldrh	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	1c9a      	adds	r2, r3, #2
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d119      	bne.n	800230e <HAL_SPI_TransmitReceive+0x1a4>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d014      	beq.n	800230e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ee:	b292      	uxth	r2, r2
 80022f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f6:	1c9a      	adds	r2, r3, #2
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800230a:	2301      	movs	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800230e:	f7fe fd8d 	bl	8000e2c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800231a:	429a      	cmp	r2, r3
 800231c:	d80d      	bhi.n	800233a <HAL_SPI_TransmitReceive+0x1d0>
 800231e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d009      	beq.n	800233a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e0bc      	b.n	80024b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1a0      	bne.n	8002286 <HAL_SPI_TransmitReceive+0x11c>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d19b      	bne.n	8002286 <HAL_SPI_TransmitReceive+0x11c>
 800234e:	e082      	b.n	8002456 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_SPI_TransmitReceive+0x1f4>
 8002358:	8afb      	ldrh	r3, [r7, #22]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d171      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	330c      	adds	r3, #12
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002384:	e05d      	b.n	8002442 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b02      	cmp	r3, #2
 8002392:	d11c      	bne.n	80023ce <HAL_SPI_TransmitReceive+0x264>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d017      	beq.n	80023ce <HAL_SPI_TransmitReceive+0x264>
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d114      	bne.n	80023ce <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	330c      	adds	r3, #12
 80023ae:	7812      	ldrb	r2, [r2, #0]
 80023b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d119      	bne.n	8002410 <HAL_SPI_TransmitReceive+0x2a6>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d014      	beq.n	8002410 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800240c:	2301      	movs	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002410:	f7fe fd0c 	bl	8000e2c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800241c:	429a      	cmp	r2, r3
 800241e:	d803      	bhi.n	8002428 <HAL_SPI_TransmitReceive+0x2be>
 8002420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d102      	bne.n	800242e <HAL_SPI_TransmitReceive+0x2c4>
 8002428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e038      	b.n	80024b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d19c      	bne.n	8002386 <HAL_SPI_TransmitReceive+0x21c>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d197      	bne.n	8002386 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002456:	6a3a      	ldr	r2, [r7, #32]
 8002458:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f908 	bl	8002670 <SPI_EndRxTxTransaction>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e01d      	b.n	80024b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80024b2:	2300      	movs	r3, #0
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3728      	adds	r7, #40	@ 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024cc:	f7fe fcae 	bl	8000e2c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024dc:	f7fe fca6 	bl	8000e2c <HAL_GetTick>
 80024e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024e2:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	0d1b      	lsrs	r3, r3, #20
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024f2:	e054      	b.n	800259e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d050      	beq.n	800259e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024fc:	f7fe fc96 	bl	8000e2c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	429a      	cmp	r2, r3
 800250a:	d902      	bls.n	8002512 <SPI_WaitFlagStateUntilTimeout+0x56>
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d13d      	bne.n	800258e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002520:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800252a:	d111      	bne.n	8002550 <SPI_WaitFlagStateUntilTimeout+0x94>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002534:	d004      	beq.n	8002540 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800253e:	d107      	bne.n	8002550 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800254e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002558:	d10f      	bne.n	800257a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002578:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e017      	b.n	80025be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3b01      	subs	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4013      	ands	r3, r2
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d19b      	bne.n	80024f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000

080025cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025e0:	d111      	bne.n	8002606 <SPI_EndRxTransaction+0x3a>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025ea:	d004      	beq.n	80025f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f4:	d107      	bne.n	8002606 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002604:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800260e:	d117      	bne.n	8002640 <SPI_EndRxTransaction+0x74>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002618:	d112      	bne.n	8002640 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2200      	movs	r2, #0
 8002622:	2101      	movs	r1, #1
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7ff ff49 	bl	80024bc <SPI_WaitFlagStateUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01a      	beq.n	8002666 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e013      	b.n	8002668 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2200      	movs	r2, #0
 8002648:	2180      	movs	r1, #128	@ 0x80
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7ff ff36 	bl	80024bc <SPI_WaitFlagStateUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265a:	f043 0220 	orr.w	r2, r3, #32
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e000      	b.n	8002668 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2201      	movs	r2, #1
 8002684:	2102      	movs	r1, #2
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7ff ff18 	bl	80024bc <SPI_WaitFlagStateUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e013      	b.n	80026ca <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	2180      	movs	r1, #128	@ 0x80
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7ff ff05 	bl	80024bc <SPI_WaitFlagStateUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e000      	b.n	80026ca <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e042      	b.n	800276a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d106      	bne.n	80026fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7fe facf 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2224      	movs	r2, #36	@ 0x24
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002714:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f972 	bl	8002a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800272a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800273a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800274a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b08a      	sub	sp, #40	@ 0x28
 8002776:	af02      	add	r7, sp, #8
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b20      	cmp	r3, #32
 8002790:	d175      	bne.n	800287e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_UART_Transmit+0x2c>
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e06e      	b.n	8002880 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2221      	movs	r2, #33	@ 0x21
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027b0:	f7fe fb3c 	bl	8000e2c <HAL_GetTick>
 80027b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	88fa      	ldrh	r2, [r7, #6]
 80027c0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ca:	d108      	bne.n	80027de <HAL_UART_Transmit+0x6c>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d104      	bne.n	80027de <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	e003      	b.n	80027e6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027e6:	e02e      	b.n	8002846 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2200      	movs	r2, #0
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f848 	bl	8002888 <UART_WaitOnFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e03a      	b.n	8002880 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10b      	bne.n	8002828 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800281e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	3302      	adds	r3, #2
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e007      	b.n	8002838 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3301      	adds	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1cb      	bne.n	80027e8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2200      	movs	r2, #0
 8002858:	2140      	movs	r1, #64	@ 0x40
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f814 	bl	8002888 <UART_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e006      	b.n	8002880 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
  }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002898:	e03b      	b.n	8002912 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d037      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a2:	f7fe fac3 	bl	8000e2c <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	6a3a      	ldr	r2, [r7, #32]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d302      	bcc.n	80028b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e03a      	b.n	8002932 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d023      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b80      	cmp	r3, #128	@ 0x80
 80028ce:	d020      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b40      	cmp	r3, #64	@ 0x40
 80028d4:	d01d      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d116      	bne.n	8002912 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f81d 	bl	800293a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2208      	movs	r2, #8
 8002904:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00f      	b.n	8002932 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4013      	ands	r3, r2
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	bf0c      	ite	eq
 8002922:	2301      	moveq	r3, #1
 8002924:	2300      	movne	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	429a      	cmp	r2, r3
 800292e:	d0b4      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800293a:	b480      	push	{r7}
 800293c:	b095      	sub	sp, #84	@ 0x54
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	330c      	adds	r3, #12
 8002948:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294c:	e853 3f00 	ldrex	r3, [r3]
 8002950:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002958:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	330c      	adds	r3, #12
 8002960:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002962:	643a      	str	r2, [r7, #64]	@ 0x40
 8002964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002966:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002968:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800296a:	e841 2300 	strex	r3, r2, [r1]
 800296e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1e5      	bne.n	8002942 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3314      	adds	r3, #20
 800297c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	e853 3f00 	ldrex	r3, [r3]
 8002984:	61fb      	str	r3, [r7, #28]
   return(result);
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3314      	adds	r3, #20
 8002994:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002996:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002998:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800299c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800299e:	e841 2300 	strex	r3, r2, [r1]
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e5      	bne.n	8002976 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d119      	bne.n	80029e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	330c      	adds	r3, #12
 80029b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f023 0310 	bic.w	r3, r3, #16
 80029c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	330c      	adds	r3, #12
 80029d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029d2:	61ba      	str	r2, [r7, #24]
 80029d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d6:	6979      	ldr	r1, [r7, #20]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	613b      	str	r3, [r7, #16]
   return(result);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e5      	bne.n	80029b2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029f4:	bf00      	nop
 80029f6:	3754      	adds	r7, #84	@ 0x54
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
	...

08002a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a3a:	f023 030c 	bic.w	r3, r3, #12
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2c      	ldr	r2, [pc, #176]	@ (8002b14 <UART_SetConfig+0x114>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d103      	bne.n	8002a70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a68:	f7ff f86c 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	e002      	b.n	8002a76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a70:	f7ff f854 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8002a74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	4a22      	ldr	r2, [pc, #136]	@ (8002b18 <UART_SetConfig+0x118>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	0119      	lsls	r1, r3, #4
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009a      	lsls	r2, r3, #2
 8002aa0:	441a      	add	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aac:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <UART_SetConfig+0x118>)
 8002aae:	fba3 0302 	umull	r0, r3, r3, r2
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2064      	movs	r0, #100	@ 0x64
 8002ab6:	fb00 f303 	mul.w	r3, r0, r3
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	3332      	adds	r3, #50	@ 0x32
 8002ac0:	4a15      	ldr	r2, [pc, #84]	@ (8002b18 <UART_SetConfig+0x118>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002acc:	4419      	add	r1, r3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009a      	lsls	r2, r3, #2
 8002ad8:	441a      	add	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b18 <UART_SetConfig+0x118>)
 8002ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2064      	movs	r0, #100	@ 0x64
 8002aee:	fb00 f303 	mul.w	r3, r0, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	3332      	adds	r3, #50	@ 0x32
 8002af8:	4a07      	ldr	r2, [pc, #28]	@ (8002b18 <UART_SetConfig+0x118>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	f003 020f 	and.w	r2, r3, #15
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	440a      	add	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40013800 	.word	0x40013800
 8002b18:	51eb851f 	.word	0x51eb851f

08002b1c <std>:
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	4604      	mov	r4, r0
 8002b22:	e9c0 3300 	strd	r3, r3, [r0]
 8002b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b2a:	6083      	str	r3, [r0, #8]
 8002b2c:	8181      	strh	r1, [r0, #12]
 8002b2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b30:	81c2      	strh	r2, [r0, #14]
 8002b32:	6183      	str	r3, [r0, #24]
 8002b34:	4619      	mov	r1, r3
 8002b36:	2208      	movs	r2, #8
 8002b38:	305c      	adds	r0, #92	@ 0x5c
 8002b3a:	f000 f9f9 	bl	8002f30 <memset>
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <std+0x58>)
 8002b40:	6224      	str	r4, [r4, #32]
 8002b42:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b44:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <std+0x5c>)
 8002b46:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b48:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <std+0x60>)
 8002b4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <std+0x64>)
 8002b4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b50:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <std+0x68>)
 8002b52:	429c      	cmp	r4, r3
 8002b54:	d006      	beq.n	8002b64 <std+0x48>
 8002b56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b5a:	4294      	cmp	r4, r2
 8002b5c:	d002      	beq.n	8002b64 <std+0x48>
 8002b5e:	33d0      	adds	r3, #208	@ 0xd0
 8002b60:	429c      	cmp	r4, r3
 8002b62:	d105      	bne.n	8002b70 <std+0x54>
 8002b64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b6c:	f000 ba58 	b.w	8003020 <__retarget_lock_init_recursive>
 8002b70:	bd10      	pop	{r4, pc}
 8002b72:	bf00      	nop
 8002b74:	08002d81 	.word	0x08002d81
 8002b78:	08002da3 	.word	0x08002da3
 8002b7c:	08002ddb 	.word	0x08002ddb
 8002b80:	08002dff 	.word	0x08002dff
 8002b84:	2000012c 	.word	0x2000012c

08002b88 <stdio_exit_handler>:
 8002b88:	4a02      	ldr	r2, [pc, #8]	@ (8002b94 <stdio_exit_handler+0xc>)
 8002b8a:	4903      	ldr	r1, [pc, #12]	@ (8002b98 <stdio_exit_handler+0x10>)
 8002b8c:	4803      	ldr	r0, [pc, #12]	@ (8002b9c <stdio_exit_handler+0x14>)
 8002b8e:	f000 b869 	b.w	8002c64 <_fwalk_sglue>
 8002b92:	bf00      	nop
 8002b94:	2000000c 	.word	0x2000000c
 8002b98:	080038b9 	.word	0x080038b9
 8002b9c:	2000001c 	.word	0x2000001c

08002ba0 <cleanup_stdio>:
 8002ba0:	6841      	ldr	r1, [r0, #4]
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <cleanup_stdio+0x34>)
 8002ba4:	b510      	push	{r4, lr}
 8002ba6:	4299      	cmp	r1, r3
 8002ba8:	4604      	mov	r4, r0
 8002baa:	d001      	beq.n	8002bb0 <cleanup_stdio+0x10>
 8002bac:	f000 fe84 	bl	80038b8 <_fflush_r>
 8002bb0:	68a1      	ldr	r1, [r4, #8]
 8002bb2:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <cleanup_stdio+0x38>)
 8002bb4:	4299      	cmp	r1, r3
 8002bb6:	d002      	beq.n	8002bbe <cleanup_stdio+0x1e>
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f000 fe7d 	bl	80038b8 <_fflush_r>
 8002bbe:	68e1      	ldr	r1, [r4, #12]
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <cleanup_stdio+0x3c>)
 8002bc2:	4299      	cmp	r1, r3
 8002bc4:	d004      	beq.n	8002bd0 <cleanup_stdio+0x30>
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bcc:	f000 be74 	b.w	80038b8 <_fflush_r>
 8002bd0:	bd10      	pop	{r4, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000012c 	.word	0x2000012c
 8002bd8:	20000194 	.word	0x20000194
 8002bdc:	200001fc 	.word	0x200001fc

08002be0 <global_stdio_init.part.0>:
 8002be0:	b510      	push	{r4, lr}
 8002be2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <global_stdio_init.part.0+0x30>)
 8002be4:	4c0b      	ldr	r4, [pc, #44]	@ (8002c14 <global_stdio_init.part.0+0x34>)
 8002be6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c18 <global_stdio_init.part.0+0x38>)
 8002be8:	4620      	mov	r0, r4
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	2104      	movs	r1, #4
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f7ff ff94 	bl	8002b1c <std>
 8002bf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2109      	movs	r1, #9
 8002bfc:	f7ff ff8e 	bl	8002b1c <std>
 8002c00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c04:	2202      	movs	r2, #2
 8002c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c0a:	2112      	movs	r1, #18
 8002c0c:	f7ff bf86 	b.w	8002b1c <std>
 8002c10:	20000264 	.word	0x20000264
 8002c14:	2000012c 	.word	0x2000012c
 8002c18:	08002b89 	.word	0x08002b89

08002c1c <__sfp_lock_acquire>:
 8002c1c:	4801      	ldr	r0, [pc, #4]	@ (8002c24 <__sfp_lock_acquire+0x8>)
 8002c1e:	f000 ba00 	b.w	8003022 <__retarget_lock_acquire_recursive>
 8002c22:	bf00      	nop
 8002c24:	2000026d 	.word	0x2000026d

08002c28 <__sfp_lock_release>:
 8002c28:	4801      	ldr	r0, [pc, #4]	@ (8002c30 <__sfp_lock_release+0x8>)
 8002c2a:	f000 b9fb 	b.w	8003024 <__retarget_lock_release_recursive>
 8002c2e:	bf00      	nop
 8002c30:	2000026d 	.word	0x2000026d

08002c34 <__sinit>:
 8002c34:	b510      	push	{r4, lr}
 8002c36:	4604      	mov	r4, r0
 8002c38:	f7ff fff0 	bl	8002c1c <__sfp_lock_acquire>
 8002c3c:	6a23      	ldr	r3, [r4, #32]
 8002c3e:	b11b      	cbz	r3, 8002c48 <__sinit+0x14>
 8002c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c44:	f7ff bff0 	b.w	8002c28 <__sfp_lock_release>
 8002c48:	4b04      	ldr	r3, [pc, #16]	@ (8002c5c <__sinit+0x28>)
 8002c4a:	6223      	str	r3, [r4, #32]
 8002c4c:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <__sinit+0x2c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f5      	bne.n	8002c40 <__sinit+0xc>
 8002c54:	f7ff ffc4 	bl	8002be0 <global_stdio_init.part.0>
 8002c58:	e7f2      	b.n	8002c40 <__sinit+0xc>
 8002c5a:	bf00      	nop
 8002c5c:	08002ba1 	.word	0x08002ba1
 8002c60:	20000264 	.word	0x20000264

08002c64 <_fwalk_sglue>:
 8002c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c68:	4607      	mov	r7, r0
 8002c6a:	4688      	mov	r8, r1
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	2600      	movs	r6, #0
 8002c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c74:	f1b9 0901 	subs.w	r9, r9, #1
 8002c78:	d505      	bpl.n	8002c86 <_fwalk_sglue+0x22>
 8002c7a:	6824      	ldr	r4, [r4, #0]
 8002c7c:	2c00      	cmp	r4, #0
 8002c7e:	d1f7      	bne.n	8002c70 <_fwalk_sglue+0xc>
 8002c80:	4630      	mov	r0, r6
 8002c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c86:	89ab      	ldrh	r3, [r5, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d907      	bls.n	8002c9c <_fwalk_sglue+0x38>
 8002c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c90:	3301      	adds	r3, #1
 8002c92:	d003      	beq.n	8002c9c <_fwalk_sglue+0x38>
 8002c94:	4629      	mov	r1, r5
 8002c96:	4638      	mov	r0, r7
 8002c98:	47c0      	blx	r8
 8002c9a:	4306      	orrs	r6, r0
 8002c9c:	3568      	adds	r5, #104	@ 0x68
 8002c9e:	e7e9      	b.n	8002c74 <_fwalk_sglue+0x10>

08002ca0 <iprintf>:
 8002ca0:	b40f      	push	{r0, r1, r2, r3}
 8002ca2:	b507      	push	{r0, r1, r2, lr}
 8002ca4:	4906      	ldr	r1, [pc, #24]	@ (8002cc0 <iprintf+0x20>)
 8002ca6:	ab04      	add	r3, sp, #16
 8002ca8:	6808      	ldr	r0, [r1, #0]
 8002caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cae:	6881      	ldr	r1, [r0, #8]
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	f000 fad7 	bl	8003264 <_vfiprintf_r>
 8002cb6:	b003      	add	sp, #12
 8002cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cbc:	b004      	add	sp, #16
 8002cbe:	4770      	bx	lr
 8002cc0:	20000018 	.word	0x20000018

08002cc4 <_puts_r>:
 8002cc4:	6a03      	ldr	r3, [r0, #32]
 8002cc6:	b570      	push	{r4, r5, r6, lr}
 8002cc8:	4605      	mov	r5, r0
 8002cca:	460e      	mov	r6, r1
 8002ccc:	6884      	ldr	r4, [r0, #8]
 8002cce:	b90b      	cbnz	r3, 8002cd4 <_puts_r+0x10>
 8002cd0:	f7ff ffb0 	bl	8002c34 <__sinit>
 8002cd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002cd6:	07db      	lsls	r3, r3, #31
 8002cd8:	d405      	bmi.n	8002ce6 <_puts_r+0x22>
 8002cda:	89a3      	ldrh	r3, [r4, #12]
 8002cdc:	0598      	lsls	r0, r3, #22
 8002cde:	d402      	bmi.n	8002ce6 <_puts_r+0x22>
 8002ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ce2:	f000 f99e 	bl	8003022 <__retarget_lock_acquire_recursive>
 8002ce6:	89a3      	ldrh	r3, [r4, #12]
 8002ce8:	0719      	lsls	r1, r3, #28
 8002cea:	d502      	bpl.n	8002cf2 <_puts_r+0x2e>
 8002cec:	6923      	ldr	r3, [r4, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d135      	bne.n	8002d5e <_puts_r+0x9a>
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	f000 f8c5 	bl	8002e84 <__swsetup_r>
 8002cfa:	b380      	cbz	r0, 8002d5e <_puts_r+0x9a>
 8002cfc:	f04f 35ff 	mov.w	r5, #4294967295
 8002d00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d02:	07da      	lsls	r2, r3, #31
 8002d04:	d405      	bmi.n	8002d12 <_puts_r+0x4e>
 8002d06:	89a3      	ldrh	r3, [r4, #12]
 8002d08:	059b      	lsls	r3, r3, #22
 8002d0a:	d402      	bmi.n	8002d12 <_puts_r+0x4e>
 8002d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d0e:	f000 f989 	bl	8003024 <__retarget_lock_release_recursive>
 8002d12:	4628      	mov	r0, r5
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	da04      	bge.n	8002d24 <_puts_r+0x60>
 8002d1a:	69a2      	ldr	r2, [r4, #24]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	dc17      	bgt.n	8002d50 <_puts_r+0x8c>
 8002d20:	290a      	cmp	r1, #10
 8002d22:	d015      	beq.n	8002d50 <_puts_r+0x8c>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	6022      	str	r2, [r4, #0]
 8002d2a:	7019      	strb	r1, [r3, #0]
 8002d2c:	68a3      	ldr	r3, [r4, #8]
 8002d2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d32:	3b01      	subs	r3, #1
 8002d34:	60a3      	str	r3, [r4, #8]
 8002d36:	2900      	cmp	r1, #0
 8002d38:	d1ed      	bne.n	8002d16 <_puts_r+0x52>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	da11      	bge.n	8002d62 <_puts_r+0x9e>
 8002d3e:	4622      	mov	r2, r4
 8002d40:	210a      	movs	r1, #10
 8002d42:	4628      	mov	r0, r5
 8002d44:	f000 f85f 	bl	8002e06 <__swbuf_r>
 8002d48:	3001      	adds	r0, #1
 8002d4a:	d0d7      	beq.n	8002cfc <_puts_r+0x38>
 8002d4c:	250a      	movs	r5, #10
 8002d4e:	e7d7      	b.n	8002d00 <_puts_r+0x3c>
 8002d50:	4622      	mov	r2, r4
 8002d52:	4628      	mov	r0, r5
 8002d54:	f000 f857 	bl	8002e06 <__swbuf_r>
 8002d58:	3001      	adds	r0, #1
 8002d5a:	d1e7      	bne.n	8002d2c <_puts_r+0x68>
 8002d5c:	e7ce      	b.n	8002cfc <_puts_r+0x38>
 8002d5e:	3e01      	subs	r6, #1
 8002d60:	e7e4      	b.n	8002d2c <_puts_r+0x68>
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	6022      	str	r2, [r4, #0]
 8002d68:	220a      	movs	r2, #10
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e7ee      	b.n	8002d4c <_puts_r+0x88>
	...

08002d70 <puts>:
 8002d70:	4b02      	ldr	r3, [pc, #8]	@ (8002d7c <puts+0xc>)
 8002d72:	4601      	mov	r1, r0
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	f7ff bfa5 	b.w	8002cc4 <_puts_r>
 8002d7a:	bf00      	nop
 8002d7c:	20000018 	.word	0x20000018

08002d80 <__sread>:
 8002d80:	b510      	push	{r4, lr}
 8002d82:	460c      	mov	r4, r1
 8002d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d88:	f000 f8fc 	bl	8002f84 <_read_r>
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	bfab      	itete	ge
 8002d90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d92:	89a3      	ldrhlt	r3, [r4, #12]
 8002d94:	181b      	addge	r3, r3, r0
 8002d96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002d9a:	bfac      	ite	ge
 8002d9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d9e:	81a3      	strhlt	r3, [r4, #12]
 8002da0:	bd10      	pop	{r4, pc}

08002da2 <__swrite>:
 8002da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da6:	461f      	mov	r7, r3
 8002da8:	898b      	ldrh	r3, [r1, #12]
 8002daa:	4605      	mov	r5, r0
 8002dac:	05db      	lsls	r3, r3, #23
 8002dae:	460c      	mov	r4, r1
 8002db0:	4616      	mov	r6, r2
 8002db2:	d505      	bpl.n	8002dc0 <__swrite+0x1e>
 8002db4:	2302      	movs	r3, #2
 8002db6:	2200      	movs	r2, #0
 8002db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dbc:	f000 f8d0 	bl	8002f60 <_lseek_r>
 8002dc0:	89a3      	ldrh	r3, [r4, #12]
 8002dc2:	4632      	mov	r2, r6
 8002dc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dc8:	81a3      	strh	r3, [r4, #12]
 8002dca:	4628      	mov	r0, r5
 8002dcc:	463b      	mov	r3, r7
 8002dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd6:	f000 b8e7 	b.w	8002fa8 <_write_r>

08002dda <__sseek>:
 8002dda:	b510      	push	{r4, lr}
 8002ddc:	460c      	mov	r4, r1
 8002dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de2:	f000 f8bd 	bl	8002f60 <_lseek_r>
 8002de6:	1c43      	adds	r3, r0, #1
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	bf15      	itete	ne
 8002dec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002dee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002df2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002df6:	81a3      	strheq	r3, [r4, #12]
 8002df8:	bf18      	it	ne
 8002dfa:	81a3      	strhne	r3, [r4, #12]
 8002dfc:	bd10      	pop	{r4, pc}

08002dfe <__sclose>:
 8002dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e02:	f000 b89d 	b.w	8002f40 <_close_r>

08002e06 <__swbuf_r>:
 8002e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e08:	460e      	mov	r6, r1
 8002e0a:	4614      	mov	r4, r2
 8002e0c:	4605      	mov	r5, r0
 8002e0e:	b118      	cbz	r0, 8002e18 <__swbuf_r+0x12>
 8002e10:	6a03      	ldr	r3, [r0, #32]
 8002e12:	b90b      	cbnz	r3, 8002e18 <__swbuf_r+0x12>
 8002e14:	f7ff ff0e 	bl	8002c34 <__sinit>
 8002e18:	69a3      	ldr	r3, [r4, #24]
 8002e1a:	60a3      	str	r3, [r4, #8]
 8002e1c:	89a3      	ldrh	r3, [r4, #12]
 8002e1e:	071a      	lsls	r2, r3, #28
 8002e20:	d501      	bpl.n	8002e26 <__swbuf_r+0x20>
 8002e22:	6923      	ldr	r3, [r4, #16]
 8002e24:	b943      	cbnz	r3, 8002e38 <__swbuf_r+0x32>
 8002e26:	4621      	mov	r1, r4
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 f82b 	bl	8002e84 <__swsetup_r>
 8002e2e:	b118      	cbz	r0, 8002e38 <__swbuf_r+0x32>
 8002e30:	f04f 37ff 	mov.w	r7, #4294967295
 8002e34:	4638      	mov	r0, r7
 8002e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	6922      	ldr	r2, [r4, #16]
 8002e3c:	b2f6      	uxtb	r6, r6
 8002e3e:	1a98      	subs	r0, r3, r2
 8002e40:	6963      	ldr	r3, [r4, #20]
 8002e42:	4637      	mov	r7, r6
 8002e44:	4283      	cmp	r3, r0
 8002e46:	dc05      	bgt.n	8002e54 <__swbuf_r+0x4e>
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f000 fd34 	bl	80038b8 <_fflush_r>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d1ed      	bne.n	8002e30 <__swbuf_r+0x2a>
 8002e54:	68a3      	ldr	r3, [r4, #8]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	60a3      	str	r3, [r4, #8]
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	6022      	str	r2, [r4, #0]
 8002e60:	701e      	strb	r6, [r3, #0]
 8002e62:	6962      	ldr	r2, [r4, #20]
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d004      	beq.n	8002e74 <__swbuf_r+0x6e>
 8002e6a:	89a3      	ldrh	r3, [r4, #12]
 8002e6c:	07db      	lsls	r3, r3, #31
 8002e6e:	d5e1      	bpl.n	8002e34 <__swbuf_r+0x2e>
 8002e70:	2e0a      	cmp	r6, #10
 8002e72:	d1df      	bne.n	8002e34 <__swbuf_r+0x2e>
 8002e74:	4621      	mov	r1, r4
 8002e76:	4628      	mov	r0, r5
 8002e78:	f000 fd1e 	bl	80038b8 <_fflush_r>
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d0d9      	beq.n	8002e34 <__swbuf_r+0x2e>
 8002e80:	e7d6      	b.n	8002e30 <__swbuf_r+0x2a>
	...

08002e84 <__swsetup_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	4b29      	ldr	r3, [pc, #164]	@ (8002f2c <__swsetup_r+0xa8>)
 8002e88:	4605      	mov	r5, r0
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	460c      	mov	r4, r1
 8002e8e:	b118      	cbz	r0, 8002e98 <__swsetup_r+0x14>
 8002e90:	6a03      	ldr	r3, [r0, #32]
 8002e92:	b90b      	cbnz	r3, 8002e98 <__swsetup_r+0x14>
 8002e94:	f7ff fece 	bl	8002c34 <__sinit>
 8002e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e9c:	0719      	lsls	r1, r3, #28
 8002e9e:	d422      	bmi.n	8002ee6 <__swsetup_r+0x62>
 8002ea0:	06da      	lsls	r2, r3, #27
 8002ea2:	d407      	bmi.n	8002eb4 <__swsetup_r+0x30>
 8002ea4:	2209      	movs	r2, #9
 8002ea6:	602a      	str	r2, [r5, #0]
 8002ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	81a3      	strh	r3, [r4, #12]
 8002eb2:	e033      	b.n	8002f1c <__swsetup_r+0x98>
 8002eb4:	0758      	lsls	r0, r3, #29
 8002eb6:	d512      	bpl.n	8002ede <__swsetup_r+0x5a>
 8002eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002eba:	b141      	cbz	r1, 8002ece <__swsetup_r+0x4a>
 8002ebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ec0:	4299      	cmp	r1, r3
 8002ec2:	d002      	beq.n	8002eca <__swsetup_r+0x46>
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f000 f8af 	bl	8003028 <_free_r>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002ed4:	81a3      	strh	r3, [r4, #12]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6063      	str	r3, [r4, #4]
 8002eda:	6923      	ldr	r3, [r4, #16]
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	89a3      	ldrh	r3, [r4, #12]
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	81a3      	strh	r3, [r4, #12]
 8002ee6:	6923      	ldr	r3, [r4, #16]
 8002ee8:	b94b      	cbnz	r3, 8002efe <__swsetup_r+0x7a>
 8002eea:	89a3      	ldrh	r3, [r4, #12]
 8002eec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef4:	d003      	beq.n	8002efe <__swsetup_r+0x7a>
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f000 fd2a 	bl	8003952 <__smakebuf_r>
 8002efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f02:	f013 0201 	ands.w	r2, r3, #1
 8002f06:	d00a      	beq.n	8002f1e <__swsetup_r+0x9a>
 8002f08:	2200      	movs	r2, #0
 8002f0a:	60a2      	str	r2, [r4, #8]
 8002f0c:	6962      	ldr	r2, [r4, #20]
 8002f0e:	4252      	negs	r2, r2
 8002f10:	61a2      	str	r2, [r4, #24]
 8002f12:	6922      	ldr	r2, [r4, #16]
 8002f14:	b942      	cbnz	r2, 8002f28 <__swsetup_r+0xa4>
 8002f16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f1a:	d1c5      	bne.n	8002ea8 <__swsetup_r+0x24>
 8002f1c:	bd38      	pop	{r3, r4, r5, pc}
 8002f1e:	0799      	lsls	r1, r3, #30
 8002f20:	bf58      	it	pl
 8002f22:	6962      	ldrpl	r2, [r4, #20]
 8002f24:	60a2      	str	r2, [r4, #8]
 8002f26:	e7f4      	b.n	8002f12 <__swsetup_r+0x8e>
 8002f28:	2000      	movs	r0, #0
 8002f2a:	e7f7      	b.n	8002f1c <__swsetup_r+0x98>
 8002f2c:	20000018 	.word	0x20000018

08002f30 <memset>:
 8002f30:	4603      	mov	r3, r0
 8002f32:	4402      	add	r2, r0
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d100      	bne.n	8002f3a <memset+0xa>
 8002f38:	4770      	bx	lr
 8002f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f3e:	e7f9      	b.n	8002f34 <memset+0x4>

08002f40 <_close_r>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	2300      	movs	r3, #0
 8002f44:	4d05      	ldr	r5, [pc, #20]	@ (8002f5c <_close_r+0x1c>)
 8002f46:	4604      	mov	r4, r0
 8002f48:	4608      	mov	r0, r1
 8002f4a:	602b      	str	r3, [r5, #0]
 8002f4c:	f7fd fe0f 	bl	8000b6e <_close>
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	d102      	bne.n	8002f5a <_close_r+0x1a>
 8002f54:	682b      	ldr	r3, [r5, #0]
 8002f56:	b103      	cbz	r3, 8002f5a <_close_r+0x1a>
 8002f58:	6023      	str	r3, [r4, #0]
 8002f5a:	bd38      	pop	{r3, r4, r5, pc}
 8002f5c:	20000268 	.word	0x20000268

08002f60 <_lseek_r>:
 8002f60:	b538      	push	{r3, r4, r5, lr}
 8002f62:	4604      	mov	r4, r0
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4d05      	ldr	r5, [pc, #20]	@ (8002f80 <_lseek_r+0x20>)
 8002f6c:	602a      	str	r2, [r5, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f7fd fe21 	bl	8000bb6 <_lseek>
 8002f74:	1c43      	adds	r3, r0, #1
 8002f76:	d102      	bne.n	8002f7e <_lseek_r+0x1e>
 8002f78:	682b      	ldr	r3, [r5, #0]
 8002f7a:	b103      	cbz	r3, 8002f7e <_lseek_r+0x1e>
 8002f7c:	6023      	str	r3, [r4, #0]
 8002f7e:	bd38      	pop	{r3, r4, r5, pc}
 8002f80:	20000268 	.word	0x20000268

08002f84 <_read_r>:
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	4604      	mov	r4, r0
 8002f88:	4608      	mov	r0, r1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	4d05      	ldr	r5, [pc, #20]	@ (8002fa4 <_read_r+0x20>)
 8002f90:	602a      	str	r2, [r5, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f7fd fdb2 	bl	8000afc <_read>
 8002f98:	1c43      	adds	r3, r0, #1
 8002f9a:	d102      	bne.n	8002fa2 <_read_r+0x1e>
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	b103      	cbz	r3, 8002fa2 <_read_r+0x1e>
 8002fa0:	6023      	str	r3, [r4, #0]
 8002fa2:	bd38      	pop	{r3, r4, r5, pc}
 8002fa4:	20000268 	.word	0x20000268

08002fa8 <_write_r>:
 8002fa8:	b538      	push	{r3, r4, r5, lr}
 8002faa:	4604      	mov	r4, r0
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	4d05      	ldr	r5, [pc, #20]	@ (8002fc8 <_write_r+0x20>)
 8002fb4:	602a      	str	r2, [r5, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f7fd fdbd 	bl	8000b36 <_write>
 8002fbc:	1c43      	adds	r3, r0, #1
 8002fbe:	d102      	bne.n	8002fc6 <_write_r+0x1e>
 8002fc0:	682b      	ldr	r3, [r5, #0]
 8002fc2:	b103      	cbz	r3, 8002fc6 <_write_r+0x1e>
 8002fc4:	6023      	str	r3, [r4, #0]
 8002fc6:	bd38      	pop	{r3, r4, r5, pc}
 8002fc8:	20000268 	.word	0x20000268

08002fcc <__errno>:
 8002fcc:	4b01      	ldr	r3, [pc, #4]	@ (8002fd4 <__errno+0x8>)
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000018 	.word	0x20000018

08002fd8 <__libc_init_array>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	2600      	movs	r6, #0
 8002fdc:	4d0c      	ldr	r5, [pc, #48]	@ (8003010 <__libc_init_array+0x38>)
 8002fde:	4c0d      	ldr	r4, [pc, #52]	@ (8003014 <__libc_init_array+0x3c>)
 8002fe0:	1b64      	subs	r4, r4, r5
 8002fe2:	10a4      	asrs	r4, r4, #2
 8002fe4:	42a6      	cmp	r6, r4
 8002fe6:	d109      	bne.n	8002ffc <__libc_init_array+0x24>
 8002fe8:	f000 fd30 	bl	8003a4c <_init>
 8002fec:	2600      	movs	r6, #0
 8002fee:	4d0a      	ldr	r5, [pc, #40]	@ (8003018 <__libc_init_array+0x40>)
 8002ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800301c <__libc_init_array+0x44>)
 8002ff2:	1b64      	subs	r4, r4, r5
 8002ff4:	10a4      	asrs	r4, r4, #2
 8002ff6:	42a6      	cmp	r6, r4
 8002ff8:	d105      	bne.n	8003006 <__libc_init_array+0x2e>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003000:	4798      	blx	r3
 8003002:	3601      	adds	r6, #1
 8003004:	e7ee      	b.n	8002fe4 <__libc_init_array+0xc>
 8003006:	f855 3b04 	ldr.w	r3, [r5], #4
 800300a:	4798      	blx	r3
 800300c:	3601      	adds	r6, #1
 800300e:	e7f2      	b.n	8002ff6 <__libc_init_array+0x1e>
 8003010:	08003ba8 	.word	0x08003ba8
 8003014:	08003ba8 	.word	0x08003ba8
 8003018:	08003ba8 	.word	0x08003ba8
 800301c:	08003bac 	.word	0x08003bac

08003020 <__retarget_lock_init_recursive>:
 8003020:	4770      	bx	lr

08003022 <__retarget_lock_acquire_recursive>:
 8003022:	4770      	bx	lr

08003024 <__retarget_lock_release_recursive>:
 8003024:	4770      	bx	lr
	...

08003028 <_free_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4605      	mov	r5, r0
 800302c:	2900      	cmp	r1, #0
 800302e:	d040      	beq.n	80030b2 <_free_r+0x8a>
 8003030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003034:	1f0c      	subs	r4, r1, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	bfb8      	it	lt
 800303a:	18e4      	addlt	r4, r4, r3
 800303c:	f000 f8de 	bl	80031fc <__malloc_lock>
 8003040:	4a1c      	ldr	r2, [pc, #112]	@ (80030b4 <_free_r+0x8c>)
 8003042:	6813      	ldr	r3, [r2, #0]
 8003044:	b933      	cbnz	r3, 8003054 <_free_r+0x2c>
 8003046:	6063      	str	r3, [r4, #4]
 8003048:	6014      	str	r4, [r2, #0]
 800304a:	4628      	mov	r0, r5
 800304c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003050:	f000 b8da 	b.w	8003208 <__malloc_unlock>
 8003054:	42a3      	cmp	r3, r4
 8003056:	d908      	bls.n	800306a <_free_r+0x42>
 8003058:	6820      	ldr	r0, [r4, #0]
 800305a:	1821      	adds	r1, r4, r0
 800305c:	428b      	cmp	r3, r1
 800305e:	bf01      	itttt	eq
 8003060:	6819      	ldreq	r1, [r3, #0]
 8003062:	685b      	ldreq	r3, [r3, #4]
 8003064:	1809      	addeq	r1, r1, r0
 8003066:	6021      	streq	r1, [r4, #0]
 8003068:	e7ed      	b.n	8003046 <_free_r+0x1e>
 800306a:	461a      	mov	r2, r3
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b10b      	cbz	r3, 8003074 <_free_r+0x4c>
 8003070:	42a3      	cmp	r3, r4
 8003072:	d9fa      	bls.n	800306a <_free_r+0x42>
 8003074:	6811      	ldr	r1, [r2, #0]
 8003076:	1850      	adds	r0, r2, r1
 8003078:	42a0      	cmp	r0, r4
 800307a:	d10b      	bne.n	8003094 <_free_r+0x6c>
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	4401      	add	r1, r0
 8003080:	1850      	adds	r0, r2, r1
 8003082:	4283      	cmp	r3, r0
 8003084:	6011      	str	r1, [r2, #0]
 8003086:	d1e0      	bne.n	800304a <_free_r+0x22>
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4408      	add	r0, r1
 800308e:	6010      	str	r0, [r2, #0]
 8003090:	6053      	str	r3, [r2, #4]
 8003092:	e7da      	b.n	800304a <_free_r+0x22>
 8003094:	d902      	bls.n	800309c <_free_r+0x74>
 8003096:	230c      	movs	r3, #12
 8003098:	602b      	str	r3, [r5, #0]
 800309a:	e7d6      	b.n	800304a <_free_r+0x22>
 800309c:	6820      	ldr	r0, [r4, #0]
 800309e:	1821      	adds	r1, r4, r0
 80030a0:	428b      	cmp	r3, r1
 80030a2:	bf01      	itttt	eq
 80030a4:	6819      	ldreq	r1, [r3, #0]
 80030a6:	685b      	ldreq	r3, [r3, #4]
 80030a8:	1809      	addeq	r1, r1, r0
 80030aa:	6021      	streq	r1, [r4, #0]
 80030ac:	6063      	str	r3, [r4, #4]
 80030ae:	6054      	str	r4, [r2, #4]
 80030b0:	e7cb      	b.n	800304a <_free_r+0x22>
 80030b2:	bd38      	pop	{r3, r4, r5, pc}
 80030b4:	20000274 	.word	0x20000274

080030b8 <sbrk_aligned>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	4e0f      	ldr	r6, [pc, #60]	@ (80030f8 <sbrk_aligned+0x40>)
 80030bc:	460c      	mov	r4, r1
 80030be:	6831      	ldr	r1, [r6, #0]
 80030c0:	4605      	mov	r5, r0
 80030c2:	b911      	cbnz	r1, 80030ca <sbrk_aligned+0x12>
 80030c4:	f000 fca4 	bl	8003a10 <_sbrk_r>
 80030c8:	6030      	str	r0, [r6, #0]
 80030ca:	4621      	mov	r1, r4
 80030cc:	4628      	mov	r0, r5
 80030ce:	f000 fc9f 	bl	8003a10 <_sbrk_r>
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	d103      	bne.n	80030de <sbrk_aligned+0x26>
 80030d6:	f04f 34ff 	mov.w	r4, #4294967295
 80030da:	4620      	mov	r0, r4
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	1cc4      	adds	r4, r0, #3
 80030e0:	f024 0403 	bic.w	r4, r4, #3
 80030e4:	42a0      	cmp	r0, r4
 80030e6:	d0f8      	beq.n	80030da <sbrk_aligned+0x22>
 80030e8:	1a21      	subs	r1, r4, r0
 80030ea:	4628      	mov	r0, r5
 80030ec:	f000 fc90 	bl	8003a10 <_sbrk_r>
 80030f0:	3001      	adds	r0, #1
 80030f2:	d1f2      	bne.n	80030da <sbrk_aligned+0x22>
 80030f4:	e7ef      	b.n	80030d6 <sbrk_aligned+0x1e>
 80030f6:	bf00      	nop
 80030f8:	20000270 	.word	0x20000270

080030fc <_malloc_r>:
 80030fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003100:	1ccd      	adds	r5, r1, #3
 8003102:	f025 0503 	bic.w	r5, r5, #3
 8003106:	3508      	adds	r5, #8
 8003108:	2d0c      	cmp	r5, #12
 800310a:	bf38      	it	cc
 800310c:	250c      	movcc	r5, #12
 800310e:	2d00      	cmp	r5, #0
 8003110:	4606      	mov	r6, r0
 8003112:	db01      	blt.n	8003118 <_malloc_r+0x1c>
 8003114:	42a9      	cmp	r1, r5
 8003116:	d904      	bls.n	8003122 <_malloc_r+0x26>
 8003118:	230c      	movs	r3, #12
 800311a:	6033      	str	r3, [r6, #0]
 800311c:	2000      	movs	r0, #0
 800311e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003122:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031f8 <_malloc_r+0xfc>
 8003126:	f000 f869 	bl	80031fc <__malloc_lock>
 800312a:	f8d8 3000 	ldr.w	r3, [r8]
 800312e:	461c      	mov	r4, r3
 8003130:	bb44      	cbnz	r4, 8003184 <_malloc_r+0x88>
 8003132:	4629      	mov	r1, r5
 8003134:	4630      	mov	r0, r6
 8003136:	f7ff ffbf 	bl	80030b8 <sbrk_aligned>
 800313a:	1c43      	adds	r3, r0, #1
 800313c:	4604      	mov	r4, r0
 800313e:	d158      	bne.n	80031f2 <_malloc_r+0xf6>
 8003140:	f8d8 4000 	ldr.w	r4, [r8]
 8003144:	4627      	mov	r7, r4
 8003146:	2f00      	cmp	r7, #0
 8003148:	d143      	bne.n	80031d2 <_malloc_r+0xd6>
 800314a:	2c00      	cmp	r4, #0
 800314c:	d04b      	beq.n	80031e6 <_malloc_r+0xea>
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	4639      	mov	r1, r7
 8003152:	4630      	mov	r0, r6
 8003154:	eb04 0903 	add.w	r9, r4, r3
 8003158:	f000 fc5a 	bl	8003a10 <_sbrk_r>
 800315c:	4581      	cmp	r9, r0
 800315e:	d142      	bne.n	80031e6 <_malloc_r+0xea>
 8003160:	6821      	ldr	r1, [r4, #0]
 8003162:	4630      	mov	r0, r6
 8003164:	1a6d      	subs	r5, r5, r1
 8003166:	4629      	mov	r1, r5
 8003168:	f7ff ffa6 	bl	80030b8 <sbrk_aligned>
 800316c:	3001      	adds	r0, #1
 800316e:	d03a      	beq.n	80031e6 <_malloc_r+0xea>
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	442b      	add	r3, r5
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	f8d8 3000 	ldr.w	r3, [r8]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	bb62      	cbnz	r2, 80031d8 <_malloc_r+0xdc>
 800317e:	f8c8 7000 	str.w	r7, [r8]
 8003182:	e00f      	b.n	80031a4 <_malloc_r+0xa8>
 8003184:	6822      	ldr	r2, [r4, #0]
 8003186:	1b52      	subs	r2, r2, r5
 8003188:	d420      	bmi.n	80031cc <_malloc_r+0xd0>
 800318a:	2a0b      	cmp	r2, #11
 800318c:	d917      	bls.n	80031be <_malloc_r+0xc2>
 800318e:	1961      	adds	r1, r4, r5
 8003190:	42a3      	cmp	r3, r4
 8003192:	6025      	str	r5, [r4, #0]
 8003194:	bf18      	it	ne
 8003196:	6059      	strne	r1, [r3, #4]
 8003198:	6863      	ldr	r3, [r4, #4]
 800319a:	bf08      	it	eq
 800319c:	f8c8 1000 	streq.w	r1, [r8]
 80031a0:	5162      	str	r2, [r4, r5]
 80031a2:	604b      	str	r3, [r1, #4]
 80031a4:	4630      	mov	r0, r6
 80031a6:	f000 f82f 	bl	8003208 <__malloc_unlock>
 80031aa:	f104 000b 	add.w	r0, r4, #11
 80031ae:	1d23      	adds	r3, r4, #4
 80031b0:	f020 0007 	bic.w	r0, r0, #7
 80031b4:	1ac2      	subs	r2, r0, r3
 80031b6:	bf1c      	itt	ne
 80031b8:	1a1b      	subne	r3, r3, r0
 80031ba:	50a3      	strne	r3, [r4, r2]
 80031bc:	e7af      	b.n	800311e <_malloc_r+0x22>
 80031be:	6862      	ldr	r2, [r4, #4]
 80031c0:	42a3      	cmp	r3, r4
 80031c2:	bf0c      	ite	eq
 80031c4:	f8c8 2000 	streq.w	r2, [r8]
 80031c8:	605a      	strne	r2, [r3, #4]
 80031ca:	e7eb      	b.n	80031a4 <_malloc_r+0xa8>
 80031cc:	4623      	mov	r3, r4
 80031ce:	6864      	ldr	r4, [r4, #4]
 80031d0:	e7ae      	b.n	8003130 <_malloc_r+0x34>
 80031d2:	463c      	mov	r4, r7
 80031d4:	687f      	ldr	r7, [r7, #4]
 80031d6:	e7b6      	b.n	8003146 <_malloc_r+0x4a>
 80031d8:	461a      	mov	r2, r3
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	42a3      	cmp	r3, r4
 80031de:	d1fb      	bne.n	80031d8 <_malloc_r+0xdc>
 80031e0:	2300      	movs	r3, #0
 80031e2:	6053      	str	r3, [r2, #4]
 80031e4:	e7de      	b.n	80031a4 <_malloc_r+0xa8>
 80031e6:	230c      	movs	r3, #12
 80031e8:	4630      	mov	r0, r6
 80031ea:	6033      	str	r3, [r6, #0]
 80031ec:	f000 f80c 	bl	8003208 <__malloc_unlock>
 80031f0:	e794      	b.n	800311c <_malloc_r+0x20>
 80031f2:	6005      	str	r5, [r0, #0]
 80031f4:	e7d6      	b.n	80031a4 <_malloc_r+0xa8>
 80031f6:	bf00      	nop
 80031f8:	20000274 	.word	0x20000274

080031fc <__malloc_lock>:
 80031fc:	4801      	ldr	r0, [pc, #4]	@ (8003204 <__malloc_lock+0x8>)
 80031fe:	f7ff bf10 	b.w	8003022 <__retarget_lock_acquire_recursive>
 8003202:	bf00      	nop
 8003204:	2000026c 	.word	0x2000026c

08003208 <__malloc_unlock>:
 8003208:	4801      	ldr	r0, [pc, #4]	@ (8003210 <__malloc_unlock+0x8>)
 800320a:	f7ff bf0b 	b.w	8003024 <__retarget_lock_release_recursive>
 800320e:	bf00      	nop
 8003210:	2000026c 	.word	0x2000026c

08003214 <__sfputc_r>:
 8003214:	6893      	ldr	r3, [r2, #8]
 8003216:	b410      	push	{r4}
 8003218:	3b01      	subs	r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	6093      	str	r3, [r2, #8]
 800321e:	da07      	bge.n	8003230 <__sfputc_r+0x1c>
 8003220:	6994      	ldr	r4, [r2, #24]
 8003222:	42a3      	cmp	r3, r4
 8003224:	db01      	blt.n	800322a <__sfputc_r+0x16>
 8003226:	290a      	cmp	r1, #10
 8003228:	d102      	bne.n	8003230 <__sfputc_r+0x1c>
 800322a:	bc10      	pop	{r4}
 800322c:	f7ff bdeb 	b.w	8002e06 <__swbuf_r>
 8003230:	6813      	ldr	r3, [r2, #0]
 8003232:	1c58      	adds	r0, r3, #1
 8003234:	6010      	str	r0, [r2, #0]
 8003236:	7019      	strb	r1, [r3, #0]
 8003238:	4608      	mov	r0, r1
 800323a:	bc10      	pop	{r4}
 800323c:	4770      	bx	lr

0800323e <__sfputs_r>:
 800323e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003240:	4606      	mov	r6, r0
 8003242:	460f      	mov	r7, r1
 8003244:	4614      	mov	r4, r2
 8003246:	18d5      	adds	r5, r2, r3
 8003248:	42ac      	cmp	r4, r5
 800324a:	d101      	bne.n	8003250 <__sfputs_r+0x12>
 800324c:	2000      	movs	r0, #0
 800324e:	e007      	b.n	8003260 <__sfputs_r+0x22>
 8003250:	463a      	mov	r2, r7
 8003252:	4630      	mov	r0, r6
 8003254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003258:	f7ff ffdc 	bl	8003214 <__sfputc_r>
 800325c:	1c43      	adds	r3, r0, #1
 800325e:	d1f3      	bne.n	8003248 <__sfputs_r+0xa>
 8003260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003264 <_vfiprintf_r>:
 8003264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003268:	460d      	mov	r5, r1
 800326a:	4614      	mov	r4, r2
 800326c:	4698      	mov	r8, r3
 800326e:	4606      	mov	r6, r0
 8003270:	b09d      	sub	sp, #116	@ 0x74
 8003272:	b118      	cbz	r0, 800327c <_vfiprintf_r+0x18>
 8003274:	6a03      	ldr	r3, [r0, #32]
 8003276:	b90b      	cbnz	r3, 800327c <_vfiprintf_r+0x18>
 8003278:	f7ff fcdc 	bl	8002c34 <__sinit>
 800327c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800327e:	07d9      	lsls	r1, r3, #31
 8003280:	d405      	bmi.n	800328e <_vfiprintf_r+0x2a>
 8003282:	89ab      	ldrh	r3, [r5, #12]
 8003284:	059a      	lsls	r2, r3, #22
 8003286:	d402      	bmi.n	800328e <_vfiprintf_r+0x2a>
 8003288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800328a:	f7ff feca 	bl	8003022 <__retarget_lock_acquire_recursive>
 800328e:	89ab      	ldrh	r3, [r5, #12]
 8003290:	071b      	lsls	r3, r3, #28
 8003292:	d501      	bpl.n	8003298 <_vfiprintf_r+0x34>
 8003294:	692b      	ldr	r3, [r5, #16]
 8003296:	b99b      	cbnz	r3, 80032c0 <_vfiprintf_r+0x5c>
 8003298:	4629      	mov	r1, r5
 800329a:	4630      	mov	r0, r6
 800329c:	f7ff fdf2 	bl	8002e84 <__swsetup_r>
 80032a0:	b170      	cbz	r0, 80032c0 <_vfiprintf_r+0x5c>
 80032a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032a4:	07dc      	lsls	r4, r3, #31
 80032a6:	d504      	bpl.n	80032b2 <_vfiprintf_r+0x4e>
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	b01d      	add	sp, #116	@ 0x74
 80032ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b2:	89ab      	ldrh	r3, [r5, #12]
 80032b4:	0598      	lsls	r0, r3, #22
 80032b6:	d4f7      	bmi.n	80032a8 <_vfiprintf_r+0x44>
 80032b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032ba:	f7ff feb3 	bl	8003024 <__retarget_lock_release_recursive>
 80032be:	e7f3      	b.n	80032a8 <_vfiprintf_r+0x44>
 80032c0:	2300      	movs	r3, #0
 80032c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80032c4:	2320      	movs	r3, #32
 80032c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032ca:	2330      	movs	r3, #48	@ 0x30
 80032cc:	f04f 0901 	mov.w	r9, #1
 80032d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80032d4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003480 <_vfiprintf_r+0x21c>
 80032d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032dc:	4623      	mov	r3, r4
 80032de:	469a      	mov	sl, r3
 80032e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032e4:	b10a      	cbz	r2, 80032ea <_vfiprintf_r+0x86>
 80032e6:	2a25      	cmp	r2, #37	@ 0x25
 80032e8:	d1f9      	bne.n	80032de <_vfiprintf_r+0x7a>
 80032ea:	ebba 0b04 	subs.w	fp, sl, r4
 80032ee:	d00b      	beq.n	8003308 <_vfiprintf_r+0xa4>
 80032f0:	465b      	mov	r3, fp
 80032f2:	4622      	mov	r2, r4
 80032f4:	4629      	mov	r1, r5
 80032f6:	4630      	mov	r0, r6
 80032f8:	f7ff ffa1 	bl	800323e <__sfputs_r>
 80032fc:	3001      	adds	r0, #1
 80032fe:	f000 80a7 	beq.w	8003450 <_vfiprintf_r+0x1ec>
 8003302:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003304:	445a      	add	r2, fp
 8003306:	9209      	str	r2, [sp, #36]	@ 0x24
 8003308:	f89a 3000 	ldrb.w	r3, [sl]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 809f 	beq.w	8003450 <_vfiprintf_r+0x1ec>
 8003312:	2300      	movs	r3, #0
 8003314:	f04f 32ff 	mov.w	r2, #4294967295
 8003318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800331c:	f10a 0a01 	add.w	sl, sl, #1
 8003320:	9304      	str	r3, [sp, #16]
 8003322:	9307      	str	r3, [sp, #28]
 8003324:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003328:	931a      	str	r3, [sp, #104]	@ 0x68
 800332a:	4654      	mov	r4, sl
 800332c:	2205      	movs	r2, #5
 800332e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003332:	4853      	ldr	r0, [pc, #332]	@ (8003480 <_vfiprintf_r+0x21c>)
 8003334:	f000 fb7c 	bl	8003a30 <memchr>
 8003338:	9a04      	ldr	r2, [sp, #16]
 800333a:	b9d8      	cbnz	r0, 8003374 <_vfiprintf_r+0x110>
 800333c:	06d1      	lsls	r1, r2, #27
 800333e:	bf44      	itt	mi
 8003340:	2320      	movmi	r3, #32
 8003342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003346:	0713      	lsls	r3, r2, #28
 8003348:	bf44      	itt	mi
 800334a:	232b      	movmi	r3, #43	@ 0x2b
 800334c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003350:	f89a 3000 	ldrb.w	r3, [sl]
 8003354:	2b2a      	cmp	r3, #42	@ 0x2a
 8003356:	d015      	beq.n	8003384 <_vfiprintf_r+0x120>
 8003358:	4654      	mov	r4, sl
 800335a:	2000      	movs	r0, #0
 800335c:	f04f 0c0a 	mov.w	ip, #10
 8003360:	9a07      	ldr	r2, [sp, #28]
 8003362:	4621      	mov	r1, r4
 8003364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003368:	3b30      	subs	r3, #48	@ 0x30
 800336a:	2b09      	cmp	r3, #9
 800336c:	d94b      	bls.n	8003406 <_vfiprintf_r+0x1a2>
 800336e:	b1b0      	cbz	r0, 800339e <_vfiprintf_r+0x13a>
 8003370:	9207      	str	r2, [sp, #28]
 8003372:	e014      	b.n	800339e <_vfiprintf_r+0x13a>
 8003374:	eba0 0308 	sub.w	r3, r0, r8
 8003378:	fa09 f303 	lsl.w	r3, r9, r3
 800337c:	4313      	orrs	r3, r2
 800337e:	46a2      	mov	sl, r4
 8003380:	9304      	str	r3, [sp, #16]
 8003382:	e7d2      	b.n	800332a <_vfiprintf_r+0xc6>
 8003384:	9b03      	ldr	r3, [sp, #12]
 8003386:	1d19      	adds	r1, r3, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	9103      	str	r1, [sp, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	bfbb      	ittet	lt
 8003390:	425b      	neglt	r3, r3
 8003392:	f042 0202 	orrlt.w	r2, r2, #2
 8003396:	9307      	strge	r3, [sp, #28]
 8003398:	9307      	strlt	r3, [sp, #28]
 800339a:	bfb8      	it	lt
 800339c:	9204      	strlt	r2, [sp, #16]
 800339e:	7823      	ldrb	r3, [r4, #0]
 80033a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80033a2:	d10a      	bne.n	80033ba <_vfiprintf_r+0x156>
 80033a4:	7863      	ldrb	r3, [r4, #1]
 80033a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80033a8:	d132      	bne.n	8003410 <_vfiprintf_r+0x1ac>
 80033aa:	9b03      	ldr	r3, [sp, #12]
 80033ac:	3402      	adds	r4, #2
 80033ae:	1d1a      	adds	r2, r3, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	9203      	str	r2, [sp, #12]
 80033b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033b8:	9305      	str	r3, [sp, #20]
 80033ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003484 <_vfiprintf_r+0x220>
 80033be:	2203      	movs	r2, #3
 80033c0:	4650      	mov	r0, sl
 80033c2:	7821      	ldrb	r1, [r4, #0]
 80033c4:	f000 fb34 	bl	8003a30 <memchr>
 80033c8:	b138      	cbz	r0, 80033da <_vfiprintf_r+0x176>
 80033ca:	2240      	movs	r2, #64	@ 0x40
 80033cc:	9b04      	ldr	r3, [sp, #16]
 80033ce:	eba0 000a 	sub.w	r0, r0, sl
 80033d2:	4082      	lsls	r2, r0
 80033d4:	4313      	orrs	r3, r2
 80033d6:	3401      	adds	r4, #1
 80033d8:	9304      	str	r3, [sp, #16]
 80033da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033de:	2206      	movs	r2, #6
 80033e0:	4829      	ldr	r0, [pc, #164]	@ (8003488 <_vfiprintf_r+0x224>)
 80033e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033e6:	f000 fb23 	bl	8003a30 <memchr>
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d03f      	beq.n	800346e <_vfiprintf_r+0x20a>
 80033ee:	4b27      	ldr	r3, [pc, #156]	@ (800348c <_vfiprintf_r+0x228>)
 80033f0:	bb1b      	cbnz	r3, 800343a <_vfiprintf_r+0x1d6>
 80033f2:	9b03      	ldr	r3, [sp, #12]
 80033f4:	3307      	adds	r3, #7
 80033f6:	f023 0307 	bic.w	r3, r3, #7
 80033fa:	3308      	adds	r3, #8
 80033fc:	9303      	str	r3, [sp, #12]
 80033fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003400:	443b      	add	r3, r7
 8003402:	9309      	str	r3, [sp, #36]	@ 0x24
 8003404:	e76a      	b.n	80032dc <_vfiprintf_r+0x78>
 8003406:	460c      	mov	r4, r1
 8003408:	2001      	movs	r0, #1
 800340a:	fb0c 3202 	mla	r2, ip, r2, r3
 800340e:	e7a8      	b.n	8003362 <_vfiprintf_r+0xfe>
 8003410:	2300      	movs	r3, #0
 8003412:	f04f 0c0a 	mov.w	ip, #10
 8003416:	4619      	mov	r1, r3
 8003418:	3401      	adds	r4, #1
 800341a:	9305      	str	r3, [sp, #20]
 800341c:	4620      	mov	r0, r4
 800341e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003422:	3a30      	subs	r2, #48	@ 0x30
 8003424:	2a09      	cmp	r2, #9
 8003426:	d903      	bls.n	8003430 <_vfiprintf_r+0x1cc>
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0c6      	beq.n	80033ba <_vfiprintf_r+0x156>
 800342c:	9105      	str	r1, [sp, #20]
 800342e:	e7c4      	b.n	80033ba <_vfiprintf_r+0x156>
 8003430:	4604      	mov	r4, r0
 8003432:	2301      	movs	r3, #1
 8003434:	fb0c 2101 	mla	r1, ip, r1, r2
 8003438:	e7f0      	b.n	800341c <_vfiprintf_r+0x1b8>
 800343a:	ab03      	add	r3, sp, #12
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	462a      	mov	r2, r5
 8003440:	4630      	mov	r0, r6
 8003442:	4b13      	ldr	r3, [pc, #76]	@ (8003490 <_vfiprintf_r+0x22c>)
 8003444:	a904      	add	r1, sp, #16
 8003446:	f3af 8000 	nop.w
 800344a:	4607      	mov	r7, r0
 800344c:	1c78      	adds	r0, r7, #1
 800344e:	d1d6      	bne.n	80033fe <_vfiprintf_r+0x19a>
 8003450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003452:	07d9      	lsls	r1, r3, #31
 8003454:	d405      	bmi.n	8003462 <_vfiprintf_r+0x1fe>
 8003456:	89ab      	ldrh	r3, [r5, #12]
 8003458:	059a      	lsls	r2, r3, #22
 800345a:	d402      	bmi.n	8003462 <_vfiprintf_r+0x1fe>
 800345c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800345e:	f7ff fde1 	bl	8003024 <__retarget_lock_release_recursive>
 8003462:	89ab      	ldrh	r3, [r5, #12]
 8003464:	065b      	lsls	r3, r3, #25
 8003466:	f53f af1f 	bmi.w	80032a8 <_vfiprintf_r+0x44>
 800346a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800346c:	e71e      	b.n	80032ac <_vfiprintf_r+0x48>
 800346e:	ab03      	add	r3, sp, #12
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	462a      	mov	r2, r5
 8003474:	4630      	mov	r0, r6
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <_vfiprintf_r+0x22c>)
 8003478:	a904      	add	r1, sp, #16
 800347a:	f000 f87d 	bl	8003578 <_printf_i>
 800347e:	e7e4      	b.n	800344a <_vfiprintf_r+0x1e6>
 8003480:	08003b6a 	.word	0x08003b6a
 8003484:	08003b70 	.word	0x08003b70
 8003488:	08003b74 	.word	0x08003b74
 800348c:	00000000 	.word	0x00000000
 8003490:	0800323f 	.word	0x0800323f

08003494 <_printf_common>:
 8003494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003498:	4616      	mov	r6, r2
 800349a:	4698      	mov	r8, r3
 800349c:	688a      	ldr	r2, [r1, #8]
 800349e:	690b      	ldr	r3, [r1, #16]
 80034a0:	4607      	mov	r7, r0
 80034a2:	4293      	cmp	r3, r2
 80034a4:	bfb8      	it	lt
 80034a6:	4613      	movlt	r3, r2
 80034a8:	6033      	str	r3, [r6, #0]
 80034aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034ae:	460c      	mov	r4, r1
 80034b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034b4:	b10a      	cbz	r2, 80034ba <_printf_common+0x26>
 80034b6:	3301      	adds	r3, #1
 80034b8:	6033      	str	r3, [r6, #0]
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	0699      	lsls	r1, r3, #26
 80034be:	bf42      	ittt	mi
 80034c0:	6833      	ldrmi	r3, [r6, #0]
 80034c2:	3302      	addmi	r3, #2
 80034c4:	6033      	strmi	r3, [r6, #0]
 80034c6:	6825      	ldr	r5, [r4, #0]
 80034c8:	f015 0506 	ands.w	r5, r5, #6
 80034cc:	d106      	bne.n	80034dc <_printf_common+0x48>
 80034ce:	f104 0a19 	add.w	sl, r4, #25
 80034d2:	68e3      	ldr	r3, [r4, #12]
 80034d4:	6832      	ldr	r2, [r6, #0]
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	42ab      	cmp	r3, r5
 80034da:	dc2b      	bgt.n	8003534 <_printf_common+0xa0>
 80034dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034e0:	6822      	ldr	r2, [r4, #0]
 80034e2:	3b00      	subs	r3, #0
 80034e4:	bf18      	it	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	0692      	lsls	r2, r2, #26
 80034ea:	d430      	bmi.n	800354e <_printf_common+0xba>
 80034ec:	4641      	mov	r1, r8
 80034ee:	4638      	mov	r0, r7
 80034f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034f4:	47c8      	blx	r9
 80034f6:	3001      	adds	r0, #1
 80034f8:	d023      	beq.n	8003542 <_printf_common+0xae>
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	6922      	ldr	r2, [r4, #16]
 80034fe:	f003 0306 	and.w	r3, r3, #6
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf14      	ite	ne
 8003506:	2500      	movne	r5, #0
 8003508:	6833      	ldreq	r3, [r6, #0]
 800350a:	f04f 0600 	mov.w	r6, #0
 800350e:	bf08      	it	eq
 8003510:	68e5      	ldreq	r5, [r4, #12]
 8003512:	f104 041a 	add.w	r4, r4, #26
 8003516:	bf08      	it	eq
 8003518:	1aed      	subeq	r5, r5, r3
 800351a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800351e:	bf08      	it	eq
 8003520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003524:	4293      	cmp	r3, r2
 8003526:	bfc4      	itt	gt
 8003528:	1a9b      	subgt	r3, r3, r2
 800352a:	18ed      	addgt	r5, r5, r3
 800352c:	42b5      	cmp	r5, r6
 800352e:	d11a      	bne.n	8003566 <_printf_common+0xd2>
 8003530:	2000      	movs	r0, #0
 8003532:	e008      	b.n	8003546 <_printf_common+0xb2>
 8003534:	2301      	movs	r3, #1
 8003536:	4652      	mov	r2, sl
 8003538:	4641      	mov	r1, r8
 800353a:	4638      	mov	r0, r7
 800353c:	47c8      	blx	r9
 800353e:	3001      	adds	r0, #1
 8003540:	d103      	bne.n	800354a <_printf_common+0xb6>
 8003542:	f04f 30ff 	mov.w	r0, #4294967295
 8003546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800354a:	3501      	adds	r5, #1
 800354c:	e7c1      	b.n	80034d2 <_printf_common+0x3e>
 800354e:	2030      	movs	r0, #48	@ 0x30
 8003550:	18e1      	adds	r1, r4, r3
 8003552:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800355c:	4422      	add	r2, r4
 800355e:	3302      	adds	r3, #2
 8003560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003564:	e7c2      	b.n	80034ec <_printf_common+0x58>
 8003566:	2301      	movs	r3, #1
 8003568:	4622      	mov	r2, r4
 800356a:	4641      	mov	r1, r8
 800356c:	4638      	mov	r0, r7
 800356e:	47c8      	blx	r9
 8003570:	3001      	adds	r0, #1
 8003572:	d0e6      	beq.n	8003542 <_printf_common+0xae>
 8003574:	3601      	adds	r6, #1
 8003576:	e7d9      	b.n	800352c <_printf_common+0x98>

08003578 <_printf_i>:
 8003578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800357c:	7e0f      	ldrb	r7, [r1, #24]
 800357e:	4691      	mov	r9, r2
 8003580:	2f78      	cmp	r7, #120	@ 0x78
 8003582:	4680      	mov	r8, r0
 8003584:	460c      	mov	r4, r1
 8003586:	469a      	mov	sl, r3
 8003588:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800358a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800358e:	d807      	bhi.n	80035a0 <_printf_i+0x28>
 8003590:	2f62      	cmp	r7, #98	@ 0x62
 8003592:	d80a      	bhi.n	80035aa <_printf_i+0x32>
 8003594:	2f00      	cmp	r7, #0
 8003596:	f000 80d3 	beq.w	8003740 <_printf_i+0x1c8>
 800359a:	2f58      	cmp	r7, #88	@ 0x58
 800359c:	f000 80ba 	beq.w	8003714 <_printf_i+0x19c>
 80035a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035a8:	e03a      	b.n	8003620 <_printf_i+0xa8>
 80035aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035ae:	2b15      	cmp	r3, #21
 80035b0:	d8f6      	bhi.n	80035a0 <_printf_i+0x28>
 80035b2:	a101      	add	r1, pc, #4	@ (adr r1, 80035b8 <_printf_i+0x40>)
 80035b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035b8:	08003611 	.word	0x08003611
 80035bc:	08003625 	.word	0x08003625
 80035c0:	080035a1 	.word	0x080035a1
 80035c4:	080035a1 	.word	0x080035a1
 80035c8:	080035a1 	.word	0x080035a1
 80035cc:	080035a1 	.word	0x080035a1
 80035d0:	08003625 	.word	0x08003625
 80035d4:	080035a1 	.word	0x080035a1
 80035d8:	080035a1 	.word	0x080035a1
 80035dc:	080035a1 	.word	0x080035a1
 80035e0:	080035a1 	.word	0x080035a1
 80035e4:	08003727 	.word	0x08003727
 80035e8:	0800364f 	.word	0x0800364f
 80035ec:	080036e1 	.word	0x080036e1
 80035f0:	080035a1 	.word	0x080035a1
 80035f4:	080035a1 	.word	0x080035a1
 80035f8:	08003749 	.word	0x08003749
 80035fc:	080035a1 	.word	0x080035a1
 8003600:	0800364f 	.word	0x0800364f
 8003604:	080035a1 	.word	0x080035a1
 8003608:	080035a1 	.word	0x080035a1
 800360c:	080036e9 	.word	0x080036e9
 8003610:	6833      	ldr	r3, [r6, #0]
 8003612:	1d1a      	adds	r2, r3, #4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6032      	str	r2, [r6, #0]
 8003618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800361c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003620:	2301      	movs	r3, #1
 8003622:	e09e      	b.n	8003762 <_printf_i+0x1ea>
 8003624:	6833      	ldr	r3, [r6, #0]
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	1d19      	adds	r1, r3, #4
 800362a:	6031      	str	r1, [r6, #0]
 800362c:	0606      	lsls	r6, r0, #24
 800362e:	d501      	bpl.n	8003634 <_printf_i+0xbc>
 8003630:	681d      	ldr	r5, [r3, #0]
 8003632:	e003      	b.n	800363c <_printf_i+0xc4>
 8003634:	0645      	lsls	r5, r0, #25
 8003636:	d5fb      	bpl.n	8003630 <_printf_i+0xb8>
 8003638:	f9b3 5000 	ldrsh.w	r5, [r3]
 800363c:	2d00      	cmp	r5, #0
 800363e:	da03      	bge.n	8003648 <_printf_i+0xd0>
 8003640:	232d      	movs	r3, #45	@ 0x2d
 8003642:	426d      	negs	r5, r5
 8003644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003648:	230a      	movs	r3, #10
 800364a:	4859      	ldr	r0, [pc, #356]	@ (80037b0 <_printf_i+0x238>)
 800364c:	e011      	b.n	8003672 <_printf_i+0xfa>
 800364e:	6821      	ldr	r1, [r4, #0]
 8003650:	6833      	ldr	r3, [r6, #0]
 8003652:	0608      	lsls	r0, r1, #24
 8003654:	f853 5b04 	ldr.w	r5, [r3], #4
 8003658:	d402      	bmi.n	8003660 <_printf_i+0xe8>
 800365a:	0649      	lsls	r1, r1, #25
 800365c:	bf48      	it	mi
 800365e:	b2ad      	uxthmi	r5, r5
 8003660:	2f6f      	cmp	r7, #111	@ 0x6f
 8003662:	6033      	str	r3, [r6, #0]
 8003664:	bf14      	ite	ne
 8003666:	230a      	movne	r3, #10
 8003668:	2308      	moveq	r3, #8
 800366a:	4851      	ldr	r0, [pc, #324]	@ (80037b0 <_printf_i+0x238>)
 800366c:	2100      	movs	r1, #0
 800366e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003672:	6866      	ldr	r6, [r4, #4]
 8003674:	2e00      	cmp	r6, #0
 8003676:	bfa8      	it	ge
 8003678:	6821      	ldrge	r1, [r4, #0]
 800367a:	60a6      	str	r6, [r4, #8]
 800367c:	bfa4      	itt	ge
 800367e:	f021 0104 	bicge.w	r1, r1, #4
 8003682:	6021      	strge	r1, [r4, #0]
 8003684:	b90d      	cbnz	r5, 800368a <_printf_i+0x112>
 8003686:	2e00      	cmp	r6, #0
 8003688:	d04b      	beq.n	8003722 <_printf_i+0x1aa>
 800368a:	4616      	mov	r6, r2
 800368c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003690:	fb03 5711 	mls	r7, r3, r1, r5
 8003694:	5dc7      	ldrb	r7, [r0, r7]
 8003696:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800369a:	462f      	mov	r7, r5
 800369c:	42bb      	cmp	r3, r7
 800369e:	460d      	mov	r5, r1
 80036a0:	d9f4      	bls.n	800368c <_printf_i+0x114>
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d10b      	bne.n	80036be <_printf_i+0x146>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	07df      	lsls	r7, r3, #31
 80036aa:	d508      	bpl.n	80036be <_printf_i+0x146>
 80036ac:	6923      	ldr	r3, [r4, #16]
 80036ae:	6861      	ldr	r1, [r4, #4]
 80036b0:	4299      	cmp	r1, r3
 80036b2:	bfde      	ittt	le
 80036b4:	2330      	movle	r3, #48	@ 0x30
 80036b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036be:	1b92      	subs	r2, r2, r6
 80036c0:	6122      	str	r2, [r4, #16]
 80036c2:	464b      	mov	r3, r9
 80036c4:	4621      	mov	r1, r4
 80036c6:	4640      	mov	r0, r8
 80036c8:	f8cd a000 	str.w	sl, [sp]
 80036cc:	aa03      	add	r2, sp, #12
 80036ce:	f7ff fee1 	bl	8003494 <_printf_common>
 80036d2:	3001      	adds	r0, #1
 80036d4:	d14a      	bne.n	800376c <_printf_i+0x1f4>
 80036d6:	f04f 30ff 	mov.w	r0, #4294967295
 80036da:	b004      	add	sp, #16
 80036dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	f043 0320 	orr.w	r3, r3, #32
 80036e6:	6023      	str	r3, [r4, #0]
 80036e8:	2778      	movs	r7, #120	@ 0x78
 80036ea:	4832      	ldr	r0, [pc, #200]	@ (80037b4 <_printf_i+0x23c>)
 80036ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	6831      	ldr	r1, [r6, #0]
 80036f4:	061f      	lsls	r7, r3, #24
 80036f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80036fa:	d402      	bmi.n	8003702 <_printf_i+0x18a>
 80036fc:	065f      	lsls	r7, r3, #25
 80036fe:	bf48      	it	mi
 8003700:	b2ad      	uxthmi	r5, r5
 8003702:	6031      	str	r1, [r6, #0]
 8003704:	07d9      	lsls	r1, r3, #31
 8003706:	bf44      	itt	mi
 8003708:	f043 0320 	orrmi.w	r3, r3, #32
 800370c:	6023      	strmi	r3, [r4, #0]
 800370e:	b11d      	cbz	r5, 8003718 <_printf_i+0x1a0>
 8003710:	2310      	movs	r3, #16
 8003712:	e7ab      	b.n	800366c <_printf_i+0xf4>
 8003714:	4826      	ldr	r0, [pc, #152]	@ (80037b0 <_printf_i+0x238>)
 8003716:	e7e9      	b.n	80036ec <_printf_i+0x174>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	f023 0320 	bic.w	r3, r3, #32
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	e7f6      	b.n	8003710 <_printf_i+0x198>
 8003722:	4616      	mov	r6, r2
 8003724:	e7bd      	b.n	80036a2 <_printf_i+0x12a>
 8003726:	6833      	ldr	r3, [r6, #0]
 8003728:	6825      	ldr	r5, [r4, #0]
 800372a:	1d18      	adds	r0, r3, #4
 800372c:	6961      	ldr	r1, [r4, #20]
 800372e:	6030      	str	r0, [r6, #0]
 8003730:	062e      	lsls	r6, r5, #24
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	d501      	bpl.n	800373a <_printf_i+0x1c2>
 8003736:	6019      	str	r1, [r3, #0]
 8003738:	e002      	b.n	8003740 <_printf_i+0x1c8>
 800373a:	0668      	lsls	r0, r5, #25
 800373c:	d5fb      	bpl.n	8003736 <_printf_i+0x1be>
 800373e:	8019      	strh	r1, [r3, #0]
 8003740:	2300      	movs	r3, #0
 8003742:	4616      	mov	r6, r2
 8003744:	6123      	str	r3, [r4, #16]
 8003746:	e7bc      	b.n	80036c2 <_printf_i+0x14a>
 8003748:	6833      	ldr	r3, [r6, #0]
 800374a:	2100      	movs	r1, #0
 800374c:	1d1a      	adds	r2, r3, #4
 800374e:	6032      	str	r2, [r6, #0]
 8003750:	681e      	ldr	r6, [r3, #0]
 8003752:	6862      	ldr	r2, [r4, #4]
 8003754:	4630      	mov	r0, r6
 8003756:	f000 f96b 	bl	8003a30 <memchr>
 800375a:	b108      	cbz	r0, 8003760 <_printf_i+0x1e8>
 800375c:	1b80      	subs	r0, r0, r6
 800375e:	6060      	str	r0, [r4, #4]
 8003760:	6863      	ldr	r3, [r4, #4]
 8003762:	6123      	str	r3, [r4, #16]
 8003764:	2300      	movs	r3, #0
 8003766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800376a:	e7aa      	b.n	80036c2 <_printf_i+0x14a>
 800376c:	4632      	mov	r2, r6
 800376e:	4649      	mov	r1, r9
 8003770:	4640      	mov	r0, r8
 8003772:	6923      	ldr	r3, [r4, #16]
 8003774:	47d0      	blx	sl
 8003776:	3001      	adds	r0, #1
 8003778:	d0ad      	beq.n	80036d6 <_printf_i+0x15e>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	079b      	lsls	r3, r3, #30
 800377e:	d413      	bmi.n	80037a8 <_printf_i+0x230>
 8003780:	68e0      	ldr	r0, [r4, #12]
 8003782:	9b03      	ldr	r3, [sp, #12]
 8003784:	4298      	cmp	r0, r3
 8003786:	bfb8      	it	lt
 8003788:	4618      	movlt	r0, r3
 800378a:	e7a6      	b.n	80036da <_printf_i+0x162>
 800378c:	2301      	movs	r3, #1
 800378e:	4632      	mov	r2, r6
 8003790:	4649      	mov	r1, r9
 8003792:	4640      	mov	r0, r8
 8003794:	47d0      	blx	sl
 8003796:	3001      	adds	r0, #1
 8003798:	d09d      	beq.n	80036d6 <_printf_i+0x15e>
 800379a:	3501      	adds	r5, #1
 800379c:	68e3      	ldr	r3, [r4, #12]
 800379e:	9903      	ldr	r1, [sp, #12]
 80037a0:	1a5b      	subs	r3, r3, r1
 80037a2:	42ab      	cmp	r3, r5
 80037a4:	dcf2      	bgt.n	800378c <_printf_i+0x214>
 80037a6:	e7eb      	b.n	8003780 <_printf_i+0x208>
 80037a8:	2500      	movs	r5, #0
 80037aa:	f104 0619 	add.w	r6, r4, #25
 80037ae:	e7f5      	b.n	800379c <_printf_i+0x224>
 80037b0:	08003b7b 	.word	0x08003b7b
 80037b4:	08003b8c 	.word	0x08003b8c

080037b8 <__sflush_r>:
 80037b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	0716      	lsls	r6, r2, #28
 80037c0:	4605      	mov	r5, r0
 80037c2:	460c      	mov	r4, r1
 80037c4:	d454      	bmi.n	8003870 <__sflush_r+0xb8>
 80037c6:	684b      	ldr	r3, [r1, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	dc02      	bgt.n	80037d2 <__sflush_r+0x1a>
 80037cc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	dd48      	ble.n	8003864 <__sflush_r+0xac>
 80037d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037d4:	2e00      	cmp	r6, #0
 80037d6:	d045      	beq.n	8003864 <__sflush_r+0xac>
 80037d8:	2300      	movs	r3, #0
 80037da:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80037de:	682f      	ldr	r7, [r5, #0]
 80037e0:	6a21      	ldr	r1, [r4, #32]
 80037e2:	602b      	str	r3, [r5, #0]
 80037e4:	d030      	beq.n	8003848 <__sflush_r+0x90>
 80037e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	0759      	lsls	r1, r3, #29
 80037ec:	d505      	bpl.n	80037fa <__sflush_r+0x42>
 80037ee:	6863      	ldr	r3, [r4, #4]
 80037f0:	1ad2      	subs	r2, r2, r3
 80037f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037f4:	b10b      	cbz	r3, 80037fa <__sflush_r+0x42>
 80037f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037f8:	1ad2      	subs	r2, r2, r3
 80037fa:	2300      	movs	r3, #0
 80037fc:	4628      	mov	r0, r5
 80037fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003800:	6a21      	ldr	r1, [r4, #32]
 8003802:	47b0      	blx	r6
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	d106      	bne.n	8003818 <__sflush_r+0x60>
 800380a:	6829      	ldr	r1, [r5, #0]
 800380c:	291d      	cmp	r1, #29
 800380e:	d82b      	bhi.n	8003868 <__sflush_r+0xb0>
 8003810:	4a28      	ldr	r2, [pc, #160]	@ (80038b4 <__sflush_r+0xfc>)
 8003812:	410a      	asrs	r2, r1
 8003814:	07d6      	lsls	r6, r2, #31
 8003816:	d427      	bmi.n	8003868 <__sflush_r+0xb0>
 8003818:	2200      	movs	r2, #0
 800381a:	6062      	str	r2, [r4, #4]
 800381c:	6922      	ldr	r2, [r4, #16]
 800381e:	04d9      	lsls	r1, r3, #19
 8003820:	6022      	str	r2, [r4, #0]
 8003822:	d504      	bpl.n	800382e <__sflush_r+0x76>
 8003824:	1c42      	adds	r2, r0, #1
 8003826:	d101      	bne.n	800382c <__sflush_r+0x74>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	b903      	cbnz	r3, 800382e <__sflush_r+0x76>
 800382c:	6560      	str	r0, [r4, #84]	@ 0x54
 800382e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003830:	602f      	str	r7, [r5, #0]
 8003832:	b1b9      	cbz	r1, 8003864 <__sflush_r+0xac>
 8003834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003838:	4299      	cmp	r1, r3
 800383a:	d002      	beq.n	8003842 <__sflush_r+0x8a>
 800383c:	4628      	mov	r0, r5
 800383e:	f7ff fbf3 	bl	8003028 <_free_r>
 8003842:	2300      	movs	r3, #0
 8003844:	6363      	str	r3, [r4, #52]	@ 0x34
 8003846:	e00d      	b.n	8003864 <__sflush_r+0xac>
 8003848:	2301      	movs	r3, #1
 800384a:	4628      	mov	r0, r5
 800384c:	47b0      	blx	r6
 800384e:	4602      	mov	r2, r0
 8003850:	1c50      	adds	r0, r2, #1
 8003852:	d1c9      	bne.n	80037e8 <__sflush_r+0x30>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0c6      	beq.n	80037e8 <__sflush_r+0x30>
 800385a:	2b1d      	cmp	r3, #29
 800385c:	d001      	beq.n	8003862 <__sflush_r+0xaa>
 800385e:	2b16      	cmp	r3, #22
 8003860:	d11d      	bne.n	800389e <__sflush_r+0xe6>
 8003862:	602f      	str	r7, [r5, #0]
 8003864:	2000      	movs	r0, #0
 8003866:	e021      	b.n	80038ac <__sflush_r+0xf4>
 8003868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800386c:	b21b      	sxth	r3, r3
 800386e:	e01a      	b.n	80038a6 <__sflush_r+0xee>
 8003870:	690f      	ldr	r7, [r1, #16]
 8003872:	2f00      	cmp	r7, #0
 8003874:	d0f6      	beq.n	8003864 <__sflush_r+0xac>
 8003876:	0793      	lsls	r3, r2, #30
 8003878:	bf18      	it	ne
 800387a:	2300      	movne	r3, #0
 800387c:	680e      	ldr	r6, [r1, #0]
 800387e:	bf08      	it	eq
 8003880:	694b      	ldreq	r3, [r1, #20]
 8003882:	1bf6      	subs	r6, r6, r7
 8003884:	600f      	str	r7, [r1, #0]
 8003886:	608b      	str	r3, [r1, #8]
 8003888:	2e00      	cmp	r6, #0
 800388a:	ddeb      	ble.n	8003864 <__sflush_r+0xac>
 800388c:	4633      	mov	r3, r6
 800388e:	463a      	mov	r2, r7
 8003890:	4628      	mov	r0, r5
 8003892:	6a21      	ldr	r1, [r4, #32]
 8003894:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003898:	47e0      	blx	ip
 800389a:	2800      	cmp	r0, #0
 800389c:	dc07      	bgt.n	80038ae <__sflush_r+0xf6>
 800389e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a6:	f04f 30ff 	mov.w	r0, #4294967295
 80038aa:	81a3      	strh	r3, [r4, #12]
 80038ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ae:	4407      	add	r7, r0
 80038b0:	1a36      	subs	r6, r6, r0
 80038b2:	e7e9      	b.n	8003888 <__sflush_r+0xd0>
 80038b4:	dfbffffe 	.word	0xdfbffffe

080038b8 <_fflush_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	690b      	ldr	r3, [r1, #16]
 80038bc:	4605      	mov	r5, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	b913      	cbnz	r3, 80038c8 <_fflush_r+0x10>
 80038c2:	2500      	movs	r5, #0
 80038c4:	4628      	mov	r0, r5
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	b118      	cbz	r0, 80038d2 <_fflush_r+0x1a>
 80038ca:	6a03      	ldr	r3, [r0, #32]
 80038cc:	b90b      	cbnz	r3, 80038d2 <_fflush_r+0x1a>
 80038ce:	f7ff f9b1 	bl	8002c34 <__sinit>
 80038d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f3      	beq.n	80038c2 <_fflush_r+0xa>
 80038da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038dc:	07d0      	lsls	r0, r2, #31
 80038de:	d404      	bmi.n	80038ea <_fflush_r+0x32>
 80038e0:	0599      	lsls	r1, r3, #22
 80038e2:	d402      	bmi.n	80038ea <_fflush_r+0x32>
 80038e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038e6:	f7ff fb9c 	bl	8003022 <__retarget_lock_acquire_recursive>
 80038ea:	4628      	mov	r0, r5
 80038ec:	4621      	mov	r1, r4
 80038ee:	f7ff ff63 	bl	80037b8 <__sflush_r>
 80038f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038f4:	4605      	mov	r5, r0
 80038f6:	07da      	lsls	r2, r3, #31
 80038f8:	d4e4      	bmi.n	80038c4 <_fflush_r+0xc>
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	059b      	lsls	r3, r3, #22
 80038fe:	d4e1      	bmi.n	80038c4 <_fflush_r+0xc>
 8003900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003902:	f7ff fb8f 	bl	8003024 <__retarget_lock_release_recursive>
 8003906:	e7dd      	b.n	80038c4 <_fflush_r+0xc>

08003908 <__swhatbuf_r>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	460c      	mov	r4, r1
 800390c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003910:	4615      	mov	r5, r2
 8003912:	2900      	cmp	r1, #0
 8003914:	461e      	mov	r6, r3
 8003916:	b096      	sub	sp, #88	@ 0x58
 8003918:	da0c      	bge.n	8003934 <__swhatbuf_r+0x2c>
 800391a:	89a3      	ldrh	r3, [r4, #12]
 800391c:	2100      	movs	r1, #0
 800391e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003922:	bf14      	ite	ne
 8003924:	2340      	movne	r3, #64	@ 0x40
 8003926:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800392a:	2000      	movs	r0, #0
 800392c:	6031      	str	r1, [r6, #0]
 800392e:	602b      	str	r3, [r5, #0]
 8003930:	b016      	add	sp, #88	@ 0x58
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	466a      	mov	r2, sp
 8003936:	f000 f849 	bl	80039cc <_fstat_r>
 800393a:	2800      	cmp	r0, #0
 800393c:	dbed      	blt.n	800391a <__swhatbuf_r+0x12>
 800393e:	9901      	ldr	r1, [sp, #4]
 8003940:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003944:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003948:	4259      	negs	r1, r3
 800394a:	4159      	adcs	r1, r3
 800394c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003950:	e7eb      	b.n	800392a <__swhatbuf_r+0x22>

08003952 <__smakebuf_r>:
 8003952:	898b      	ldrh	r3, [r1, #12]
 8003954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003956:	079d      	lsls	r5, r3, #30
 8003958:	4606      	mov	r6, r0
 800395a:	460c      	mov	r4, r1
 800395c:	d507      	bpl.n	800396e <__smakebuf_r+0x1c>
 800395e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	6123      	str	r3, [r4, #16]
 8003966:	2301      	movs	r3, #1
 8003968:	6163      	str	r3, [r4, #20]
 800396a:	b003      	add	sp, #12
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396e:	466a      	mov	r2, sp
 8003970:	ab01      	add	r3, sp, #4
 8003972:	f7ff ffc9 	bl	8003908 <__swhatbuf_r>
 8003976:	9f00      	ldr	r7, [sp, #0]
 8003978:	4605      	mov	r5, r0
 800397a:	4639      	mov	r1, r7
 800397c:	4630      	mov	r0, r6
 800397e:	f7ff fbbd 	bl	80030fc <_malloc_r>
 8003982:	b948      	cbnz	r0, 8003998 <__smakebuf_r+0x46>
 8003984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003988:	059a      	lsls	r2, r3, #22
 800398a:	d4ee      	bmi.n	800396a <__smakebuf_r+0x18>
 800398c:	f023 0303 	bic.w	r3, r3, #3
 8003990:	f043 0302 	orr.w	r3, r3, #2
 8003994:	81a3      	strh	r3, [r4, #12]
 8003996:	e7e2      	b.n	800395e <__smakebuf_r+0xc>
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800399e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a2:	81a3      	strh	r3, [r4, #12]
 80039a4:	9b01      	ldr	r3, [sp, #4]
 80039a6:	6020      	str	r0, [r4, #0]
 80039a8:	b15b      	cbz	r3, 80039c2 <__smakebuf_r+0x70>
 80039aa:	4630      	mov	r0, r6
 80039ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039b0:	f000 f81e 	bl	80039f0 <_isatty_r>
 80039b4:	b128      	cbz	r0, 80039c2 <__smakebuf_r+0x70>
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	f023 0303 	bic.w	r3, r3, #3
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	81a3      	strh	r3, [r4, #12]
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	431d      	orrs	r5, r3
 80039c6:	81a5      	strh	r5, [r4, #12]
 80039c8:	e7cf      	b.n	800396a <__smakebuf_r+0x18>
	...

080039cc <_fstat_r>:
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	2300      	movs	r3, #0
 80039d0:	4d06      	ldr	r5, [pc, #24]	@ (80039ec <_fstat_r+0x20>)
 80039d2:	4604      	mov	r4, r0
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	602b      	str	r3, [r5, #0]
 80039da:	f7fd f8d3 	bl	8000b84 <_fstat>
 80039de:	1c43      	adds	r3, r0, #1
 80039e0:	d102      	bne.n	80039e8 <_fstat_r+0x1c>
 80039e2:	682b      	ldr	r3, [r5, #0]
 80039e4:	b103      	cbz	r3, 80039e8 <_fstat_r+0x1c>
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	bd38      	pop	{r3, r4, r5, pc}
 80039ea:	bf00      	nop
 80039ec:	20000268 	.word	0x20000268

080039f0 <_isatty_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	2300      	movs	r3, #0
 80039f4:	4d05      	ldr	r5, [pc, #20]	@ (8003a0c <_isatty_r+0x1c>)
 80039f6:	4604      	mov	r4, r0
 80039f8:	4608      	mov	r0, r1
 80039fa:	602b      	str	r3, [r5, #0]
 80039fc:	f7fd f8d1 	bl	8000ba2 <_isatty>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	d102      	bne.n	8003a0a <_isatty_r+0x1a>
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	b103      	cbz	r3, 8003a0a <_isatty_r+0x1a>
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
 8003a0c:	20000268 	.word	0x20000268

08003a10 <_sbrk_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	2300      	movs	r3, #0
 8003a14:	4d05      	ldr	r5, [pc, #20]	@ (8003a2c <_sbrk_r+0x1c>)
 8003a16:	4604      	mov	r4, r0
 8003a18:	4608      	mov	r0, r1
 8003a1a:	602b      	str	r3, [r5, #0]
 8003a1c:	f7fd f8d8 	bl	8000bd0 <_sbrk>
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	d102      	bne.n	8003a2a <_sbrk_r+0x1a>
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	b103      	cbz	r3, 8003a2a <_sbrk_r+0x1a>
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
 8003a2c:	20000268 	.word	0x20000268

08003a30 <memchr>:
 8003a30:	4603      	mov	r3, r0
 8003a32:	b510      	push	{r4, lr}
 8003a34:	b2c9      	uxtb	r1, r1
 8003a36:	4402      	add	r2, r0
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	d101      	bne.n	8003a42 <memchr+0x12>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	e003      	b.n	8003a4a <memchr+0x1a>
 8003a42:	7804      	ldrb	r4, [r0, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	428c      	cmp	r4, r1
 8003a48:	d1f6      	bne.n	8003a38 <memchr+0x8>
 8003a4a:	bd10      	pop	{r4, pc}

08003a4c <_init>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	bf00      	nop
 8003a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a52:	bc08      	pop	{r3}
 8003a54:	469e      	mov	lr, r3
 8003a56:	4770      	bx	lr

08003a58 <_fini>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	bf00      	nop
 8003a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	469e      	mov	lr, r3
 8003a62:	4770      	bx	lr
