
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001edc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001fe8  08001fe8  00002fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002014  08002014  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002014  08002014  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002014  08002014  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002014  08002014  00003014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002018  08002018  00003018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800201c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002028  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002028  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e35  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c28  00000000  00000000  0000ae6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0000ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000664  00000000  00000000  0000d348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018035  00000000  00000000  0000d9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1b5  00000000  00000000  000259e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086864  00000000  00000000  0002fb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b63fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000218c  00000000  00000000  000b6440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b85cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fd0 	.word	0x08001fd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001fd0 	.word	0x08001fd0

0800014c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	0a1b      	lsrs	r3, r3, #8
 800015a:	b29a      	uxth	r2, r3
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	611a      	str	r2, [r3, #16]
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800016a:	b480      	push	{r7}
 800016c:	b083      	sub	sp, #12
 800016e:	af00      	add	r7, sp, #0
 8000170:	6078      	str	r0, [r7, #4]
 8000172:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	0a1b      	lsrs	r3, r3, #8
 8000178:	b29a      	uxth	r2, r3
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	615a      	str	r2, [r3, #20]
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <nrf_Write>:
 */

#include "NRF24L01.h"
#include <stdio.h>

void nrf_Write(NRF24L01* nrf,uint8_t address, uint8_t *data){
 8000188:	b580      	push	{r7, lr}
 800018a:	b088      	sub	sp, #32
 800018c:	af00      	add	r7, sp, #0
 800018e:	60f8      	str	r0, [r7, #12]
 8000190:	460b      	mov	r3, r1
 8000192:	607a      	str	r2, [r7, #4]
 8000194:	72fb      	strb	r3, [r7, #11]
	uint8_t spiTXbuf[6];

	spiTXbuf[0]=address|0x20;
 8000196:	7afb      	ldrb	r3, [r7, #11]
 8000198:	f043 0320 	orr.w	r3, r3, #32
 800019c:	b2db      	uxtb	r3, r3
 800019e:	753b      	strb	r3, [r7, #20]
	if(address==0x0a || address==0x0b||address==0x10){
 80001a0:	7afb      	ldrb	r3, [r7, #11]
 80001a2:	2b0a      	cmp	r3, #10
 80001a4:	d005      	beq.n	80001b2 <nrf_Write+0x2a>
 80001a6:	7afb      	ldrb	r3, [r7, #11]
 80001a8:	2b0b      	cmp	r3, #11
 80001aa:	d002      	beq.n	80001b2 <nrf_Write+0x2a>
 80001ac:	7afb      	ldrb	r3, [r7, #11]
 80001ae:	2b10      	cmp	r3, #16
 80001b0:	d12d      	bne.n	800020e <nrf_Write+0x86>
		for(int i=1;i<6;i++){
 80001b2:	2301      	movs	r3, #1
 80001b4:	61fb      	str	r3, [r7, #28]
 80001b6:	e00d      	b.n	80001d4 <nrf_Write+0x4c>
			spiTXbuf[i]=data[i-1];
 80001b8:	69fb      	ldr	r3, [r7, #28]
 80001ba:	3b01      	subs	r3, #1
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	4413      	add	r3, r2
 80001c0:	7819      	ldrb	r1, [r3, #0]
 80001c2:	f107 0214 	add.w	r2, r7, #20
 80001c6:	69fb      	ldr	r3, [r7, #28]
 80001c8:	4413      	add	r3, r2
 80001ca:	460a      	mov	r2, r1
 80001cc:	701a      	strb	r2, [r3, #0]
		for(int i=1;i<6;i++){
 80001ce:	69fb      	ldr	r3, [r7, #28]
 80001d0:	3301      	adds	r3, #1
 80001d2:	61fb      	str	r3, [r7, #28]
 80001d4:	69fb      	ldr	r3, [r7, #28]
 80001d6:	2b05      	cmp	r3, #5
 80001d8:	ddee      	ble.n	80001b8 <nrf_Write+0x30>
		}
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	689a      	ldr	r2, [r3, #8]
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	899b      	ldrh	r3, [r3, #12]
 80001e2:	4619      	mov	r1, r3
 80001e4:	4610      	mov	r0, r2
 80001e6:	f7ff ffc0 	bl	800016a <LL_GPIO_ResetOutputPin>
		SPI_Transmit(nrf->SPI,spiTXbuf,6);
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f107 0114 	add.w	r1, r7, #20
 80001f2:	2206      	movs	r2, #6
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f98d 	bl	8000514 <SPI_Transmit>
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	689a      	ldr	r2, [r3, #8]
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	899b      	ldrh	r3, [r3, #12]
 8000202:	4619      	mov	r1, r3
 8000204:	4610      	mov	r0, r2
 8000206:	f7ff ffa1 	bl	800014c <LL_GPIO_SetOutputPin>
	if(address==0x0a || address==0x0b||address==0x10){
 800020a:	bf00      	nop
		spiTXbuf[1]=data[0];
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
		SPI_Transmit(nrf->SPI,spiTXbuf,2);
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
	}
}
 800020c:	e036      	b.n	800027c <nrf_Write+0xf4>
	else if(data==0x00){
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d118      	bne.n	8000246 <nrf_Write+0xbe>
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	689a      	ldr	r2, [r3, #8]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	899b      	ldrh	r3, [r3, #12]
 800021c:	4619      	mov	r1, r3
 800021e:	4610      	mov	r0, r2
 8000220:	f7ff ffa3 	bl	800016a <LL_GPIO_ResetOutputPin>
		SPI_Transmit(nrf->SPI,spiTXbuf,1);
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f107 0114 	add.w	r1, r7, #20
 800022c:	2201      	movs	r2, #1
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f970 	bl	8000514 <SPI_Transmit>
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	689a      	ldr	r2, [r3, #8]
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	899b      	ldrh	r3, [r3, #12]
 800023c:	4619      	mov	r1, r3
 800023e:	4610      	mov	r0, r2
 8000240:	f7ff ff84 	bl	800014c <LL_GPIO_SetOutputPin>
}
 8000244:	e01a      	b.n	800027c <nrf_Write+0xf4>
		spiTXbuf[1]=data[0];
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	757b      	strb	r3, [r7, #21]
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	689a      	ldr	r2, [r3, #8]
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	899b      	ldrh	r3, [r3, #12]
 8000254:	4619      	mov	r1, r3
 8000256:	4610      	mov	r0, r2
 8000258:	f7ff ff87 	bl	800016a <LL_GPIO_ResetOutputPin>
		SPI_Transmit(nrf->SPI,spiTXbuf,2);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f107 0114 	add.w	r1, r7, #20
 8000264:	2202      	movs	r2, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f954 	bl	8000514 <SPI_Transmit>
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	689a      	ldr	r2, [r3, #8]
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	899b      	ldrh	r3, [r3, #12]
 8000274:	4619      	mov	r1, r3
 8000276:	4610      	mov	r0, r2
 8000278:	f7ff ff68 	bl	800014c <LL_GPIO_SetOutputPin>
}
 800027c:	bf00      	nop
 800027e:	3720      	adds	r7, #32
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <nrf_Read>:

void nrf_Read(NRF24L01* nrf,uint8_t address, uint8_t *databuf){
 8000284:	b580      	push	{r7, lr}
 8000286:	b08a      	sub	sp, #40	@ 0x28
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	460b      	mov	r3, r1
 800028e:	607a      	str	r2, [r7, #4]
 8000290:	72fb      	strb	r3, [r7, #11]
	uint8_t spiTXbuf[6];
	uint8_t spiRXbuf[6];

	spiTXbuf[0]=address;
 8000292:	7afb      	ldrb	r3, [r7, #11]
 8000294:	773b      	strb	r3, [r7, #28]


	if(address==0x0a || address==0x0b||address==0x10){
 8000296:	7afb      	ldrb	r3, [r7, #11]
 8000298:	2b0a      	cmp	r3, #10
 800029a:	d005      	beq.n	80002a8 <nrf_Read+0x24>
 800029c:	7afb      	ldrb	r3, [r7, #11]
 800029e:	2b0b      	cmp	r3, #11
 80002a0:	d002      	beq.n	80002a8 <nrf_Read+0x24>
 80002a2:	7afb      	ldrb	r3, [r7, #11]
 80002a4:	2b10      	cmp	r3, #16
 80002a6:	d12c      	bne.n	8000302 <nrf_Read+0x7e>
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	689a      	ldr	r2, [r3, #8]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	899b      	ldrh	r3, [r3, #12]
 80002b0:	4619      	mov	r1, r3
 80002b2:	4610      	mov	r0, r2
 80002b4:	f7ff ff59 	bl	800016a <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(nrf->SPI,spiTXbuf,spiRXbuf,6);
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	6818      	ldr	r0, [r3, #0]
 80002bc:	f107 0214 	add.w	r2, r7, #20
 80002c0:	f107 011c 	add.w	r1, r7, #28
 80002c4:	2306      	movs	r3, #6
 80002c6:	f000 f8f0 	bl	80004aa <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	689a      	ldr	r2, [r3, #8]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	899b      	ldrh	r3, [r3, #12]
 80002d2:	4619      	mov	r1, r3
 80002d4:	4610      	mov	r0, r2
 80002d6:	f7ff ff39 	bl	800014c <LL_GPIO_SetOutputPin>
		for(int i=1;i<6;i++){
 80002da:	2301      	movs	r3, #1
 80002dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80002de:	e00c      	b.n	80002fa <nrf_Read+0x76>
			databuf[i-1]=spiRXbuf[i];
 80002e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002e2:	3b01      	subs	r3, #1
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	f107 0114 	add.w	r1, r7, #20
 80002ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80002ee:	440a      	add	r2, r1
 80002f0:	7812      	ldrb	r2, [r2, #0]
 80002f2:	701a      	strb	r2, [r3, #0]
		for(int i=1;i<6;i++){
 80002f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002f6:	3301      	adds	r3, #1
 80002f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80002fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002fc:	2b05      	cmp	r3, #5
 80002fe:	ddef      	ble.n	80002e0 <nrf_Read+0x5c>
 8000300:	e01c      	b.n	800033c <nrf_Read+0xb8>
		}
	}
	else{
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	689a      	ldr	r2, [r3, #8]
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	899b      	ldrh	r3, [r3, #12]
 800030a:	4619      	mov	r1, r3
 800030c:	4610      	mov	r0, r2
 800030e:	f7ff ff2c 	bl	800016a <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(nrf->SPI,spiTXbuf,spiRXbuf,2);
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6818      	ldr	r0, [r3, #0]
 8000316:	f107 0214 	add.w	r2, r7, #20
 800031a:	f107 011c 	add.w	r1, r7, #28
 800031e:	2302      	movs	r3, #2
 8000320:	f000 f8c3 	bl	80004aa <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	689a      	ldr	r2, [r3, #8]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	899b      	ldrh	r3, [r3, #12]
 800032c:	4619      	mov	r1, r3
 800032e:	4610      	mov	r0, r2
 8000330:	f7ff ff0c 	bl	800014c <LL_GPIO_SetOutputPin>
		databuf[0]=spiRXbuf[1];
 8000334:	7d7a      	ldrb	r2, [r7, #21]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	701a      	strb	r2, [r3, #0]
	}
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	3728      	adds	r7, #40	@ 0x28
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <nrf_power_down>:
	while(tim->CNT!=0){};
	LL_GPIO_ResetOutputPin(nrf->chip_enable_port,nrf->chip_enable_pin);
	LL_TIM_DisableCounter(tim);
}

void nrf_power_down(NRF24L01* nrf){
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	uint8_t data=0;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x00,&data);
 8000350:	f107 030f 	add.w	r3, r7, #15
 8000354:	461a      	mov	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f7ff ff93 	bl	8000284 <nrf_Read>
	data &= ~(0x01<<1);
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	f023 0302 	bic.w	r3, r3, #2
 8000364:	b2db      	uxtb	r3, r3
 8000366:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&data);
 8000368:	f107 030f 	add.w	r3, r7, #15
 800036c:	461a      	mov	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f7ff ff09 	bl	8000188 <nrf_Write>
}
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <nrf_power_up>:

void nrf_power_up(NRF24L01* nrf){
 800037e:	b580      	push	{r7, lr}
 8000380:	b084      	sub	sp, #16
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
	uint8_t data=0;
 8000386:	2300      	movs	r3, #0
 8000388:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x00,&data);
 800038a:	f107 030f 	add.w	r3, r7, #15
 800038e:	461a      	mov	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f7ff ff76 	bl	8000284 <nrf_Read>
	data|= (0x01<<1);
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&data);
 80003a2:	f107 030f 	add.w	r3, r7, #15
 80003a6:	461a      	mov	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff feec 	bl	8000188 <nrf_Write>
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <nrf24_init>:


void nrf24_init(NRF24L01* nrf,SPI_TypeDef* spi,type mode,GPIO_TypeDef* chip_select_port,uint16_t chip_select_pin ,GPIO_TypeDef* chip_enable_port,uint16_t chip_enable_pin,uint16_t length){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	4613      	mov	r3, r2
 80003c6:	71fb      	strb	r3, [r7, #7]
	nrf->SPI=spi;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	68ba      	ldr	r2, [r7, #8]
 80003cc:	601a      	str	r2, [r3, #0]
	nrf->para.mode=mode;
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	79fa      	ldrb	r2, [r7, #7]
 80003d2:	711a      	strb	r2, [r3, #4]
	nrf->chip_select_port=chip_select_port;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	683a      	ldr	r2, [r7, #0]
 80003d8:	609a      	str	r2, [r3, #8]
	nrf->chip_select_pin=chip_select_pin;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	8b3a      	ldrh	r2, [r7, #24]
 80003de:	819a      	strh	r2, [r3, #12]
	nrf->chip_enable_port=chip_enable_port;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	69fa      	ldr	r2, [r7, #28]
 80003e4:	611a      	str	r2, [r3, #16]
	nrf->chip_enable_pin=chip_enable_pin;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	8c3a      	ldrh	r2, [r7, #32]
 80003ea:	829a      	strh	r2, [r3, #20]
	//HAL_GPIO_WritePin(nrf->chip_select_port,nrf->chip_select_pin,1);  //??
	LL_mDelay(100);
 80003ec:	2064      	movs	r0, #100	@ 0x64
 80003ee:	f001 fd9f 	bl	8001f30 <LL_mDelay>
	LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	899b      	ldrh	r3, [r3, #12]
 80003fa:	4619      	mov	r1, r3
 80003fc:	4610      	mov	r0, r2
 80003fe:	f7ff fea5 	bl	800014c <LL_GPIO_SetOutputPin>

	nrf_power_down(nrf);
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ff9e 	bl	8000344 <nrf_power_down>
	if(mode==TX){
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d10b      	bne.n	8000426 <nrf24_init+0x6e>
		LL_GPIO_ResetOutputPin(nrf->chip_enable_port,nrf->chip_enable_pin);
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	691a      	ldr	r2, [r3, #16]
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	8a9b      	ldrh	r3, [r3, #20]
 8000416:	4619      	mov	r1, r3
 8000418:	4610      	mov	r0, r2
 800041a:	f7ff fea6 	bl	800016a <LL_GPIO_ResetOutputPin>
		nrf_set_TX(nrf);
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f000 f990 	bl	8000744 <nrf_set_TX>
 8000424:	e00d      	b.n	8000442 <nrf24_init+0x8a>
	}
	else if(mode==RX){
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d10a      	bne.n	8000442 <nrf24_init+0x8a>
		LL_GPIO_SetOutputPin(nrf->chip_enable_port,nrf->chip_enable_pin);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	691a      	ldr	r2, [r3, #16]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	8a9b      	ldrh	r3, [r3, #20]
 8000434:	4619      	mov	r1, r3
 8000436:	4610      	mov	r0, r2
 8000438:	f7ff fe88 	bl	800014c <LL_GPIO_SetOutputPin>
		nrf_set_RX(nrf);
 800043c:	68f8      	ldr	r0, [r7, #12]
 800043e:	f000 f9a7 	bl	8000790 <nrf_set_RX>
	}

	nrf_crc_enable(nrf);
 8000442:	68f8      	ldr	r0, [r7, #12]
 8000444:	f000 f9ca 	bl	80007dc <nrf_crc_enable>
	nrf_crc_encoding(nrf,1);
 8000448:	2101      	movs	r1, #1
 800044a:	68f8      	ldr	r0, [r7, #12]
 800044c:	f000 f9e3 	bl	8000816 <nrf_crc_encoding>
	nrf_enable_pipe(nrf,0);
 8000450:	2100      	movs	r1, #0
 8000452:	68f8      	ldr	r0, [r7, #12]
 8000454:	f000 fa0a 	bl	800086c <nrf_enable_pipe>
	nrf_disable_pipe(nrf,1);
 8000458:	2101      	movs	r1, #1
 800045a:	68f8      	ldr	r0, [r7, #12]
 800045c:	f000 fa2b 	bl	80008b6 <nrf_disable_pipe>
	nrf_data_length(nrf,0,32);
 8000460:	2220      	movs	r2, #32
 8000462:	2100      	movs	r1, #0
 8000464:	68f8      	ldr	r0, [r7, #12]
 8000466:	f000 fa4d 	bl	8000904 <nrf_data_length>
	nrf_enable_dpl(nrf);
 800046a:	68f8      	ldr	r0, [r7, #12]
 800046c:	f000 fa8b 	bl	8000986 <nrf_enable_dpl>
	nrf_enable_dpl_pipe(nrf,0);
 8000470:	2100      	movs	r1, #0
 8000472:	68f8      	ldr	r0, [r7, #12]
 8000474:	f000 faa2 	bl	80009bc <nrf_enable_dpl_pipe>

	nrf_data_length(nrf,0,length);		//data pipe 0
 8000478:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800047a:	461a      	mov	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	68f8      	ldr	r0, [r7, #12]
 8000480:	f000 fa40 	bl	8000904 <nrf_data_length>
	nrf_clear_interrupt(nrf);
 8000484:	68f8      	ldr	r0, [r7, #12]
 8000486:	f000 f943 	bl	8000710 <nrf_clear_interrupt>
	nrf_power_up(nrf);
 800048a:	68f8      	ldr	r0, [r7, #12]
 800048c:	f7ff ff77 	bl	800037e <nrf_power_up>

	flush_TX(nrf);
 8000490:	68f8      	ldr	r0, [r7, #12]
 8000492:	f000 f86e 	bl	8000572 <flush_TX>
	flush_RX(nrf);
 8000496:	68f8      	ldr	r0, [r7, #12]
 8000498:	f000 f878 	bl	800058c <flush_RX>

	LL_mDelay(10);
 800049c:	200a      	movs	r0, #10
 800049e:	f001 fd47 	bl	8001f30 <LL_mDelay>


}
 80004a2:	bf00      	nop
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <SPI_TransmitReceive>:
void SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t* txData, uint8_t* rxData, uint16_t size) {
 80004aa:	b480      	push	{r7}
 80004ac:	b087      	sub	sp, #28
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	60f8      	str	r0, [r7, #12]
 80004b2:	60b9      	str	r1, [r7, #8]
 80004b4:	607a      	str	r2, [r7, #4]
 80004b6:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; i++) {
 80004b8:	2300      	movs	r3, #0
 80004ba:	82fb      	strh	r3, [r7, #22]
 80004bc:	e020      	b.n	8000500 <SPI_TransmitReceive+0x56>
        while (!(SPIx->SR & SPI_SR_TXE));                          // 송신 버퍼 비었는지 확인
 80004be:	bf00      	nop
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	f003 0302 	and.w	r3, r3, #2
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d0f9      	beq.n	80004c0 <SPI_TransmitReceive+0x16>
        *((__IO uint8_t*)&SPIx->DR) = txData[i];                   // 전송 데이터 넣기
 80004cc:	8afb      	ldrh	r3, [r7, #22]
 80004ce:	68ba      	ldr	r2, [r7, #8]
 80004d0:	441a      	add	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	330c      	adds	r3, #12
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	701a      	strb	r2, [r3, #0]

        while (!(SPIx->SR & SPI_SR_RXNE));                         // 수신 데이터 올 때까지 대기
 80004da:	bf00      	nop
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f9      	beq.n	80004dc <SPI_TransmitReceive+0x32>
        rxData[i] = *((__IO uint8_t*)&SPIx->DR);                   // 수신 데이터 읽기
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f103 020c 	add.w	r2, r3, #12
 80004ee:	8afb      	ldrh	r3, [r7, #22]
 80004f0:	6879      	ldr	r1, [r7, #4]
 80004f2:	440b      	add	r3, r1
 80004f4:	7812      	ldrb	r2, [r2, #0]
 80004f6:	b2d2      	uxtb	r2, r2
 80004f8:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 80004fa:	8afb      	ldrh	r3, [r7, #22]
 80004fc:	3301      	adds	r3, #1
 80004fe:	82fb      	strh	r3, [r7, #22]
 8000500:	8afa      	ldrh	r2, [r7, #22]
 8000502:	887b      	ldrh	r3, [r7, #2]
 8000504:	429a      	cmp	r2, r3
 8000506:	d3da      	bcc.n	80004be <SPI_TransmitReceive+0x14>
    }
}
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	371c      	adds	r7, #28
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <SPI_Transmit>:

void SPI_Transmit(SPI_TypeDef* SPIx, uint8_t* txData, uint16_t size) {
 8000514:	b480      	push	{r7}
 8000516:	b087      	sub	sp, #28
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	4613      	mov	r3, r2
 8000520:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < size; i++) {
 8000522:	2300      	movs	r3, #0
 8000524:	82fb      	strh	r3, [r7, #22]
 8000526:	e01a      	b.n	800055e <SPI_Transmit+0x4a>
        while (!(SPIx->SR & SPI_SR_TXE));
 8000528:	bf00      	nop
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f9      	beq.n	800052a <SPI_Transmit+0x16>
        *((__IO uint8_t*)&SPIx->DR) = txData[i];
 8000536:	8afb      	ldrh	r3, [r7, #22]
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	441a      	add	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	330c      	adds	r3, #12
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	701a      	strb	r2, [r3, #0]
        while (!(SPIx->SR & SPI_SR_RXNE));
 8000544:	bf00      	nop
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f9      	beq.n	8000546 <SPI_Transmit+0x32>
        (void)*((__IO uint8_t*)&SPIx->DR);  // 받은 데이터 무시
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	330c      	adds	r3, #12
 8000556:	781b      	ldrb	r3, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 8000558:	8afb      	ldrh	r3, [r7, #22]
 800055a:	3301      	adds	r3, #1
 800055c:	82fb      	strh	r3, [r7, #22]
 800055e:	8afa      	ldrh	r2, [r7, #22]
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	429a      	cmp	r2, r3
 8000564:	d3e0      	bcc.n	8000528 <SPI_Transmit+0x14>
    }
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	371c      	adds	r7, #28
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <flush_TX>:
        while (!(SPIx->SR & SPI_SR_RXNE)); // Wait for data
        rxData[i] = *((__IO uint8_t*)&SPIx->DR);
    }
}

void flush_TX(NRF24L01* nrf){
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
	nrf_Write(nrf,0xE1,0x00);
 800057a:	2200      	movs	r2, #0
 800057c:	21e1      	movs	r1, #225	@ 0xe1
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f7ff fe02 	bl	8000188 <nrf_Write>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <flush_RX>:

void flush_RX(NRF24L01* nrf){
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	nrf_Write(nrf,0xE2,0x00);
 8000594:	2200      	movs	r2, #0
 8000596:	21e2      	movs	r1, #226	@ 0xe2
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff fdf5 	bl	8000188 <nrf_Write>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <nrf_RX_address>:

void nrf_TX_address(NRF24L01* nrf,uint8_t* address){
	nrf_Write(nrf,0x10,address);
}

void nrf_RX_address(NRF24L01* nrf,uint8_t pipe, uint8_t* address){
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b084      	sub	sp, #16
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	60f8      	str	r0, [r7, #12]
 80005ae:	460b      	mov	r3, r1
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	72fb      	strb	r3, [r7, #11]
	nrf_Write(nrf,0x0A+pipe,address);
 80005b4:	7afb      	ldrb	r3, [r7, #11]
 80005b6:	330a      	adds	r3, #10
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f7ff fde2 	bl	8000188 <nrf_Write>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <nrf_RX_DR_enable>:
	}
	nrf_Write(nrf,0x07,&status);

}

void nrf_RX_DR_enable(NRF24L01* nrf){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 80005d4:	f107 030f 	add.w	r3, r7, #15
 80005d8:	461a      	mov	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff fe51 	bl	8000284 <nrf_Read>
	reg&=~(0x01<<6);
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 80005ec:	f107 030f 	add.w	r3, r7, #15
 80005f0:	461a      	mov	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fdc7 	bl	8000188 <nrf_Write>
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <nrf_RX_DR_disable>:
void nrf_RX_DR_disable(NRF24L01* nrf){
 8000602:	b580      	push	{r7, lr}
 8000604:	b084      	sub	sp, #16
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 800060a:	f107 030f 	add.w	r3, r7, #15
 800060e:	461a      	mov	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff fe36 	bl	8000284 <nrf_Read>
	reg|= (0x01<<6);
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800061e:	b2db      	uxtb	r3, r3
 8000620:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 8000622:	f107 030f 	add.w	r3, r7, #15
 8000626:	461a      	mov	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff fdac 	bl	8000188 <nrf_Write>
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <nrf_TX_DS_enable>:

void nrf_TX_DS_enable(NRF24L01* nrf){
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 8000640:	f107 030f 	add.w	r3, r7, #15
 8000644:	461a      	mov	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff fe1b 	bl	8000284 <nrf_Read>
	reg&=~(0x01<<5);
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	f023 0320 	bic.w	r3, r3, #32
 8000654:	b2db      	uxtb	r3, r3
 8000656:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 8000658:	f107 030f 	add.w	r3, r7, #15
 800065c:	461a      	mov	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fd91 	bl	8000188 <nrf_Write>
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <nrf_TX_DS_disable>:
void nrf_TX_DS_disable(NRF24L01* nrf){
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 8000676:	f107 030f 	add.w	r3, r7, #15
 800067a:	461a      	mov	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff fe00 	bl	8000284 <nrf_Read>
	reg|= (0x01<<5);
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	f043 0320 	orr.w	r3, r3, #32
 800068a:	b2db      	uxtb	r3, r3
 800068c:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 800068e:	f107 030f 	add.w	r3, r7, #15
 8000692:	461a      	mov	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff fd76 	bl	8000188 <nrf_Write>
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <nrf_MAX_RT_enable>:

void nrf_MAX_RT_enable(NRF24L01* nrf){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 80006ac:	f107 030f 	add.w	r3, r7, #15
 80006b0:	461a      	mov	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff fde5 	bl	8000284 <nrf_Read>
	reg&=~(0x01<<4);
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	f023 0310 	bic.w	r3, r3, #16
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 80006c4:	f107 030f 	add.w	r3, r7, #15
 80006c8:	461a      	mov	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff fd5b 	bl	8000188 <nrf_Write>
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <nrf_MAX_RT_disable>:
void nrf_MAX_RT_disable(NRF24L01* nrf){
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 80006e2:	f107 030f 	add.w	r3, r7, #15
 80006e6:	461a      	mov	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff fdca 	bl	8000284 <nrf_Read>
	reg|= (0x01<<4);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 80006fa:	f107 030f 	add.w	r3, r7, #15
 80006fe:	461a      	mov	r2, r3
 8000700:	2100      	movs	r1, #0
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff fd40 	bl	8000188 <nrf_Write>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <nrf_clear_interrupt>:

void nrf_clear_interrupt(NRF24L01* nrf){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	uint8_t status;
	nrf_status(nrf,&status);
 8000718:	f107 030f 	add.w	r3, r7, #15
 800071c:	4619      	mov	r1, r3
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f90e 	bl	8000940 <nrf_status>
	status|=(0x07<<4);
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800072a:	b2db      	uxtb	r3, r3
 800072c:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x07,&status);
 800072e:	f107 030f 	add.w	r3, r7, #15
 8000732:	461a      	mov	r2, r3
 8000734:	2107      	movs	r1, #7
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff fd26 	bl	8000188 <nrf_Write>
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <nrf_set_TX>:

void nrf_set_TX(NRF24L01* nrf){
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	uint8_t reg=0;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]
	nrf_RX_DR_disable(nrf);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff56 	bl	8000602 <nrf_RX_DR_disable>
	nrf_MAX_RT_disable(nrf);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ffbf 	bl	80006da <nrf_MAX_RT_disable>
	nrf_TX_DS_enable(nrf);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff6b 	bl	8000638 <nrf_TX_DS_enable>
	nrf_Read(nrf,0x00,&reg);
 8000762:	f107 030f 	add.w	r3, r7, #15
 8000766:	461a      	mov	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fd8a 	bl	8000284 <nrf_Read>
	reg &= (~0x01);
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	f023 0301 	bic.w	r3, r3, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 800077a:	f107 030f 	add.w	r3, r7, #15
 800077e:	461a      	mov	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff fd00 	bl	8000188 <nrf_Write>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <nrf_set_RX>:

void nrf_set_RX(NRF24L01* nrf){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	uint8_t reg=0;
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]
	nrf_RX_DR_enable(nrf);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff15 	bl	80005cc <nrf_RX_DR_enable>
	nrf_MAX_RT_enable(nrf);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ff7e 	bl	80006a4 <nrf_MAX_RT_enable>
	nrf_TX_DS_disable(nrf);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff60 	bl	800066e <nrf_TX_DS_disable>
	nrf_Read(nrf,0x00,&reg);
 80007ae:	f107 030f 	add.w	r3, r7, #15
 80007b2:	461a      	mov	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fd64 	bl	8000284 <nrf_Read>
	reg|= 0x01;
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 80007c6:	f107 030f 	add.w	r3, r7, #15
 80007ca:	461a      	mov	r2, r3
 80007cc:	2100      	movs	r1, #0
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff fcda 	bl	8000188 <nrf_Write>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <nrf_crc_enable>:

void nrf_crc_enable(NRF24L01* nrf){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	uint8_t reg=0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x00,&reg);
 80007e8:	f107 030f 	add.w	r3, r7, #15
 80007ec:	461a      	mov	r2, r3
 80007ee:	2100      	movs	r1, #0
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff fd47 	bl	8000284 <nrf_Read>
	reg|= 0x01<<3;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 8000800:	f107 030f 	add.w	r3, r7, #15
 8000804:	461a      	mov	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff fcbd 	bl	8000188 <nrf_Write>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <nrf_crc_encoding>:
	nrf_Read(nrf,0x00,&reg);
	reg&=~(0x01<<3);
	nrf_Write(nrf,0x00,&reg);
}

void nrf_crc_encoding(NRF24L01* nrf,uint8_t byte){
 8000816:	b580      	push	{r7, lr}
 8000818:	b084      	sub	sp, #16
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	460b      	mov	r3, r1
 8000820:	70fb      	strb	r3, [r7, #3]
	uint8_t reg=0;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x00,&reg);
 8000826:	f107 030f 	add.w	r3, r7, #15
 800082a:	461a      	mov	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fd28 	bl	8000284 <nrf_Read>
	if(byte==1)
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d105      	bne.n	8000846 <nrf_crc_encoding+0x30>
		reg&=~(0x01<<2);
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	f023 0304 	bic.w	r3, r3, #4
 8000840:	b2db      	uxtb	r3, r3
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e007      	b.n	8000856 <nrf_crc_encoding+0x40>
	else if(byte==2)
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d104      	bne.n	8000856 <nrf_crc_encoding+0x40>
		reg|=(0x01<<2);
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	b2db      	uxtb	r3, r3
 8000854:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 8000856:	f107 030f 	add.w	r3, r7, #15
 800085a:	461a      	mov	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff fc92 	bl	8000188 <nrf_Write>
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <nrf_enable_pipe>:
void nrf_enable_pipe(NRF24L01* nrf, uint8_t pipe){
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
	uint8_t reg=0;
 8000878:	2300      	movs	r3, #0
 800087a:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x02,&reg);
 800087c:	f107 030f 	add.w	r3, r7, #15
 8000880:	461a      	mov	r2, r3
 8000882:	2102      	movs	r1, #2
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff fcfd 	bl	8000284 <nrf_Read>
	reg|= 0x01<<pipe;
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	2201      	movs	r2, #1
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	b25a      	sxtb	r2, r3
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	b25b      	sxtb	r3, r3
 8000898:	4313      	orrs	r3, r2
 800089a:	b25b      	sxtb	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x02,&reg);
 80008a0:	f107 030f 	add.w	r3, r7, #15
 80008a4:	461a      	mov	r2, r3
 80008a6:	2102      	movs	r1, #2
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fc6d 	bl	8000188 <nrf_Write>
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <nrf_disable_pipe>:

void nrf_disable_pipe(NRF24L01* nrf, uint8_t pipe){
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b084      	sub	sp, #16
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	460b      	mov	r3, r1
 80008c0:	70fb      	strb	r3, [r7, #3]
	uint8_t reg=0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x02,&reg);
 80008c6:	f107 030f 	add.w	r3, r7, #15
 80008ca:	461a      	mov	r2, r3
 80008cc:	2102      	movs	r1, #2
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fcd8 	bl	8000284 <nrf_Read>
	reg &= ~(0x01<<pipe);
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2201      	movs	r2, #1
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	b25b      	sxtb	r3, r3
 80008de:	43db      	mvns	r3, r3
 80008e0:	b25a      	sxtb	r2, r3
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	4013      	ands	r3, r2
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x02,&reg);
 80008ee:	f107 030f 	add.w	r3, r7, #15
 80008f2:	461a      	mov	r2, r3
 80008f4:	2102      	movs	r1, #2
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fc46 	bl	8000188 <nrf_Write>
}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <nrf_data_length>:

void nrf_data_length(NRF24L01*nrf,uint8_t pipe, uint16_t length){
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
 8000910:	4613      	mov	r3, r2
 8000912:	803b      	strh	r3, [r7, #0]
	uint8_t reg[2];
	reg[0]=0x11+pipe;
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	3311      	adds	r3, #17
 8000918:	b2db      	uxtb	r3, r3
 800091a:	733b      	strb	r3, [r7, #12]
	reg[1]=length;
 800091c:	883b      	ldrh	r3, [r7, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	737b      	strb	r3, [r7, #13]
	nrf->para.length=length;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	883a      	ldrh	r2, [r7, #0]
 8000926:	80da      	strh	r2, [r3, #6]
	nrf_Write(nrf,reg[0],&reg[1]);
 8000928:	7b39      	ldrb	r1, [r7, #12]
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	3301      	adds	r3, #1
 8000930:	461a      	mov	r2, r3
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fc28 	bl	8000188 <nrf_Write>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <nrf_status>:

void nrf_fifo_status(NRF24L01* nrf,uint8_t* output){
	nrf_Read(nrf,0x17,output);
}

void nrf_status(NRF24L01* nrf, uint8_t * output){
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
	uint8_t address=0x07;
 800094a:	2307      	movs	r3, #7
 800094c:	73fb      	strb	r3, [r7, #15]
	LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	899b      	ldrh	r3, [r3, #12]
 8000956:	4619      	mov	r1, r3
 8000958:	4610      	mov	r0, r2
 800095a:	f7ff fc06 	bl	800016a <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(nrf->SPI,&address,output,1);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6818      	ldr	r0, [r3, #0]
 8000962:	f107 010f 	add.w	r1, r7, #15
 8000966:	2301      	movs	r3, #1
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	f7ff fd9e 	bl	80004aa <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	899b      	ldrh	r3, [r3, #12]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f7ff fbe7 	bl	800014c <LL_GPIO_SetOutputPin>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <nrf_enable_dpl>:

void nrf_observe_TX(NRF24L01* nrf, uint8_t * output){
	nrf_Read(nrf,0x08,output);
}

void nrf_enable_dpl(NRF24L01* nrf){
 8000986:	b580      	push	{r7, lr}
 8000988:	b084      	sub	sp, #16
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x1D,&reg);
 800098e:	f107 030f 	add.w	r3, r7, #15
 8000992:	461a      	mov	r2, r3
 8000994:	211d      	movs	r1, #29
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fc74 	bl	8000284 <nrf_Read>
	reg|= 0x01<<2;
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x1D,&reg);
 80009a6:	f107 030f 	add.w	r3, r7, #15
 80009aa:	461a      	mov	r2, r3
 80009ac:	211d      	movs	r1, #29
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fbea 	bl	8000188 <nrf_Write>

}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <nrf_enable_dpl_pipe>:

void nrf_enable_dpl_pipe(NRF24L01* nrf,uint8_t pipe){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;
	nrf_Read(nrf,0x1C,&reg);
 80009c8:	f107 030f 	add.w	r3, r7, #15
 80009cc:	461a      	mov	r2, r3
 80009ce:	211c      	movs	r1, #28
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff fc57 	bl	8000284 <nrf_Read>
	reg|=0x01<<pipe;
 80009d6:	78fb      	ldrb	r3, [r7, #3]
 80009d8:	2201      	movs	r2, #1
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	b25a      	sxtb	r2, r3
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b25b      	sxtb	r3, r3
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x1C,&reg);
 80009ec:	f107 030f 	add.w	r3, r7, #15
 80009f0:	461a      	mov	r2, r3
 80009f2:	211c      	movs	r1, #28
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff fbc7 	bl	8000188 <nrf_Write>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <LL_GPIO_ResetOutputPin>:
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	0a1b      	lsrs	r3, r3, #8
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	615a      	str	r2, [r3, #20]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a2a:	699a      	ldr	r2, [r3, #24]
 8000a2c:	4907      	ldr	r1, [pc, #28]	@ (8000a4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a36:	699a      	ldr	r2, [r3, #24]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000a64:	2004      	movs	r0, #4
 8000a66:	f7ff ffdb 	bl	8000a20 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000a6a:	2010      	movs	r0, #16
 8000a6c:	f7ff ffd8 	bl	8000a20 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, CNS_pin_Pin|CE_piin_Pin);
 8000a70:	4912      	ldr	r1, [pc, #72]	@ (8000abc <MX_GPIO_Init+0x6c>)
 8000a72:	4813      	ldr	r0, [pc, #76]	@ (8000ac0 <MX_GPIO_Init+0x70>)
 8000a74:	f7ff ffc5 	bl	8000a02 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8);
 8000a78:	4912      	ldr	r1, [pc, #72]	@ (8000ac4 <MX_GPIO_Init+0x74>)
 8000a7a:	4813      	ldr	r0, [pc, #76]	@ (8000ac8 <MX_GPIO_Init+0x78>)
 8000a7c:	f7ff ffc1 	bl	8000a02 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CNS_pin_Pin|CE_piin_Pin;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_GPIO_Init+0x6c>)
 8000a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	480a      	ldr	r0, [pc, #40]	@ (8000ac0 <MX_GPIO_Init+0x70>)
 8000a96:	f001 f9bd 	bl	8001e14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <MX_GPIO_Init+0x74>)
 8000a9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	@ (8000ac8 <MX_GPIO_Init+0x78>)
 8000ab0:	f001 f9b0 	bl	8001e14 <LL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	04010809 	.word	0x04010809
 8000ac0:	40010800 	.word	0x40010800
 8000ac4:	04010001 	.word	0x04010001
 8000ac8:	40011000 	.word	0x40011000

08000acc <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	041a      	lsls	r2, r3, #16
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	400b      	ands	r3, r1
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	611a      	str	r2, [r3, #16]
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b094      	sub	sp, #80	@ 0x50
 8000b08:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0a:	f000 f99f 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0e:	f7ff ff9f 	bl	8000a50 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b12:	f000 f891 	bl	8000c38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24L01 nrf;
   nrf24_init(&nrf, SPI1, RX, GPIOA, GPIO_PIN_3, GPIOA, GPIO_PIN_8, 32);
 8000b16:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000b1a:	2320      	movs	r3, #32
 8000b1c:	9303      	str	r3, [sp, #12]
 8000b1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <main+0x8c>)
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	2308      	movs	r3, #8
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <main+0x8c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4918      	ldr	r1, [pc, #96]	@ (8000b94 <main+0x90>)
 8000b32:	f7ff fc41 	bl	80003b8 <nrf24_init>
   SystemClock_Config();
 8000b36:	f000 f837 	bl	8000ba8 <SystemClock_Config>
   LL_Init1msTick(SystemCoreClock);
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <main+0x94>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f9e8 	bl	8001f14 <LL_Init1msTick>

   uint8_t addr[5] = {'R','x','A','A','A'};
 8000b44:	4a15      	ldr	r2, [pc, #84]	@ (8000b9c <main+0x98>)
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4e:	6018      	str	r0, [r3, #0]
 8000b50:	3304      	adds	r3, #4
 8000b52:	7019      	strb	r1, [r3, #0]
    nrf_RX_address(&nrf, 0, addr);
 8000b54:	f107 0220 	add.w	r2, r7, #32
 8000b58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fd21 	bl	80005a6 <nrf_RX_address>

    uint8_t rx_data[32] = {0};
 8000b64:	2300      	movs	r3, #0
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	619a      	str	r2, [r3, #24]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_8);
 8000b7a:	4909      	ldr	r1, [pc, #36]	@ (8000ba0 <main+0x9c>)
 8000b7c:	4809      	ldr	r0, [pc, #36]	@ (8000ba4 <main+0xa0>)
 8000b7e:	f7ff ffa5 	bl	8000acc <LL_GPIO_TogglePin>
	      LL_mDelay(500);  // 딜레이는 ms 단위
 8000b82:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b86:	f001 f9d3 	bl	8001f30 <LL_mDelay>
	  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_8);
 8000b8a:	bf00      	nop
 8000b8c:	e7f5      	b.n	8000b7a <main+0x76>
 8000b8e:	bf00      	nop
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40013000 	.word	0x40013000
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	08001fe8 	.word	0x08001fe8
 8000ba0:	04010001 	.word	0x04010001
 8000ba4:	40011000 	.word	0x40011000

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b090      	sub	sp, #64	@ 0x40
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	2228      	movs	r2, #40	@ 0x28
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 f9de 	bl	8001f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000bde:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fbf9 	bl	80013e0 <HAL_RCC_OscConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bf4:	f000 f819 	bl	8000c2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2102      	movs	r1, #2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fe66 	bl	80018e4 <HAL_RCC_ClockConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c1e:	f000 f804 	bl	8000c2a <Error_Handler>
  }
}
 8000c22:	bf00      	nop
 8000c24:	3740      	adds	r7, #64	@ 0x40
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2e:	b672      	cpsid	i
}
 8000c30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c32:	bf00      	nop
 8000c34:	e7fd      	b.n	8000c32 <Error_Handler+0x8>
	...

08000c38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ca0 <MX_SPI1_Init+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c6c:	2210      	movs	r2, #16
 8000c6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c84:	220a      	movs	r2, #10
 8000c86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <MX_SPI1_Init+0x64>)
 8000c8a:	f000 ff87 	bl	8001b9c <HAL_SPI_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c94:	f7ff ffc9 	bl	8000c2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000028 	.word	0x20000028
 8000ca0:	40013000 	.word	0x40013000

08000ca4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d12f      	bne.n	8000d24 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <HAL_SPI_MspInit+0x8c>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	@ (8000d30 <HAL_SPI_MspInit+0x8c>)
 8000cca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <HAL_SPI_MspInit+0x8c>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <HAL_SPI_MspInit+0x8c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a13      	ldr	r2, [pc, #76]	@ (8000d30 <HAL_SPI_MspInit+0x8c>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <HAL_SPI_MspInit+0x8c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000cf4:	23a0      	movs	r3, #160	@ 0xa0
 8000cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4619      	mov	r1, r3
 8000d06:	480b      	ldr	r0, [pc, #44]	@ (8000d34 <HAL_SPI_MspInit+0x90>)
 8000d08:	f000 f9e6 	bl	80010d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d0c:	2340      	movs	r3, #64	@ 0x40
 8000d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <HAL_SPI_MspInit+0x90>)
 8000d20:	f000 f9da 	bl	80010d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40013000 	.word	0x40013000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010800 	.word	0x40010800

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_MspInit+0x5c>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <HAL_MspInit+0x5c>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6193      	str	r3, [r2, #24]
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_MspInit+0x5c>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <HAL_MspInit+0x5c>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d94 <HAL_MspInit+0x5c>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d60:	61d3      	str	r3, [r2, #28]
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <HAL_MspInit+0x5c>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <HAL_MspInit+0x60>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <HAL_MspInit+0x60>)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010000 	.word	0x40010000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <NMI_Handler+0x4>

08000da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <MemManage_Handler+0x4>

08000db4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f874 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e00:	f7ff fff8 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480b      	ldr	r0, [pc, #44]	@ (8000e34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e06:	490c      	ldr	r1, [pc, #48]	@ (8000e38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e08:	4a0c      	ldr	r2, [pc, #48]	@ (8000e3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a09      	ldr	r2, [pc, #36]	@ (8000e40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e1c:	4c09      	ldr	r4, [pc, #36]	@ (8000e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f001 f8ad 	bl	8001f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2e:	f7ff fe69 	bl	8000b04 <main>
  bx lr
 8000e32:	4770      	bx	lr
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e3c:	0800201c 	.word	0x0800201c
  ldr r2, =_sbss
 8000e40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e44:	20000084 	.word	0x20000084

08000e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_2_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_Init+0x28>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_Init+0x28>)
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f907 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff ff66 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f911 	bl	80010be <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f8e7 	bl	8001086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	@ (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <HAL_IncTick+0x1c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <HAL_IncTick+0x20>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a03      	ldr	r2, [pc, #12]	@ (8000ef8 <HAL_IncTick+0x20>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000080 	.word	0x20000080

08000efc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b02      	ldr	r3, [pc, #8]	@ (8000f0c <HAL_GetTick+0x10>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	20000080 	.word	0x20000080

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	@ (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ff90 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff49 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff5e 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff90 	bl	8000fc8 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5f 	bl	8000f74 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffb0 	bl	800102c <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b08b      	sub	sp, #44	@ 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e169      	b.n	80013c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010ec:	2201      	movs	r2, #1
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8158 	bne.w	80013ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a9a      	ldr	r2, [pc, #616]	@ (8001378 <HAL_GPIO_Init+0x2a0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d05e      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001114:	4a98      	ldr	r2, [pc, #608]	@ (8001378 <HAL_GPIO_Init+0x2a0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d875      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800111a:	4a98      	ldr	r2, [pc, #608]	@ (800137c <HAL_GPIO_Init+0x2a4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d058      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001120:	4a96      	ldr	r2, [pc, #600]	@ (800137c <HAL_GPIO_Init+0x2a4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d86f      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001126:	4a96      	ldr	r2, [pc, #600]	@ (8001380 <HAL_GPIO_Init+0x2a8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d052      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 800112c:	4a94      	ldr	r2, [pc, #592]	@ (8001380 <HAL_GPIO_Init+0x2a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d869      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001132:	4a94      	ldr	r2, [pc, #592]	@ (8001384 <HAL_GPIO_Init+0x2ac>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d04c      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001138:	4a92      	ldr	r2, [pc, #584]	@ (8001384 <HAL_GPIO_Init+0x2ac>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d863      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800113e:	4a92      	ldr	r2, [pc, #584]	@ (8001388 <HAL_GPIO_Init+0x2b0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d046      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001144:	4a90      	ldr	r2, [pc, #576]	@ (8001388 <HAL_GPIO_Init+0x2b0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d85d      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800114a:	2b12      	cmp	r3, #18
 800114c:	d82a      	bhi.n	80011a4 <HAL_GPIO_Init+0xcc>
 800114e:	2b12      	cmp	r3, #18
 8001150:	d859      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001152:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <HAL_GPIO_Init+0x80>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	080011d3 	.word	0x080011d3
 800115c:	080011ad 	.word	0x080011ad
 8001160:	080011bf 	.word	0x080011bf
 8001164:	08001201 	.word	0x08001201
 8001168:	08001207 	.word	0x08001207
 800116c:	08001207 	.word	0x08001207
 8001170:	08001207 	.word	0x08001207
 8001174:	08001207 	.word	0x08001207
 8001178:	08001207 	.word	0x08001207
 800117c:	08001207 	.word	0x08001207
 8001180:	08001207 	.word	0x08001207
 8001184:	08001207 	.word	0x08001207
 8001188:	08001207 	.word	0x08001207
 800118c:	08001207 	.word	0x08001207
 8001190:	08001207 	.word	0x08001207
 8001194:	08001207 	.word	0x08001207
 8001198:	08001207 	.word	0x08001207
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	080011c9 	.word	0x080011c9
 80011a4:	4a79      	ldr	r2, [pc, #484]	@ (800138c <HAL_GPIO_Init+0x2b4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011aa:	e02c      	b.n	8001206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e029      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	3304      	adds	r3, #4
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e024      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	3308      	adds	r3, #8
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e01f      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	330c      	adds	r3, #12
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e01a      	b.n	8001208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011da:	2304      	movs	r3, #4
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e013      	b.n	8001208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e8:	2308      	movs	r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	611a      	str	r2, [r3, #16]
          break;
 80011f2:	e009      	b.n	8001208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	615a      	str	r2, [r3, #20]
          break;
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x130>
          break;
 8001206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2bff      	cmp	r3, #255	@ 0xff
 800120c:	d801      	bhi.n	8001212 <HAL_GPIO_Init+0x13a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	e001      	b.n	8001216 <HAL_GPIO_Init+0x13e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3304      	adds	r3, #4
 8001216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2bff      	cmp	r3, #255	@ 0xff
 800121c:	d802      	bhi.n	8001224 <HAL_GPIO_Init+0x14c>
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x152>
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	3b08      	subs	r3, #8
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	210f      	movs	r1, #15
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	6a39      	ldr	r1, [r7, #32]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80b1 	beq.w	80013ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001258:	4b4d      	ldr	r3, [pc, #308]	@ (8001390 <HAL_GPIO_Init+0x2b8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a4c      	ldr	r2, [pc, #304]	@ (8001390 <HAL_GPIO_Init+0x2b8>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b4a      	ldr	r3, [pc, #296]	@ (8001390 <HAL_GPIO_Init+0x2b8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001270:	4a48      	ldr	r2, [pc, #288]	@ (8001394 <HAL_GPIO_Init+0x2bc>)
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a40      	ldr	r2, [pc, #256]	@ (8001398 <HAL_GPIO_Init+0x2c0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d013      	beq.n	80012c4 <HAL_GPIO_Init+0x1ec>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3f      	ldr	r2, [pc, #252]	@ (800139c <HAL_GPIO_Init+0x2c4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d00d      	beq.n	80012c0 <HAL_GPIO_Init+0x1e8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3e      	ldr	r2, [pc, #248]	@ (80013a0 <HAL_GPIO_Init+0x2c8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3d      	ldr	r2, [pc, #244]	@ (80013a4 <HAL_GPIO_Init+0x2cc>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_GPIO_Init+0x1e0>
 80012b4:	2303      	movs	r3, #3
 80012b6:	e006      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e004      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012bc:	2302      	movs	r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c4:	2300      	movs	r3, #0
 80012c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012c8:	f002 0203 	and.w	r2, r2, #3
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	4093      	lsls	r3, r2
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012d6:	492f      	ldr	r1, [pc, #188]	@ (8001394 <HAL_GPIO_Init+0x2bc>)
 80012d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f0:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	492c      	ldr	r1, [pc, #176]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012fe:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4928      	ldr	r1, [pc, #160]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001308:	4013      	ands	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001318:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	4922      	ldr	r1, [pc, #136]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	60cb      	str	r3, [r1, #12]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	491e      	ldr	r1, [pc, #120]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001330:	4013      	ands	r3, r2
 8001332:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4918      	ldr	r1, [pc, #96]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	4914      	ldr	r1, [pc, #80]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001358:	4013      	ands	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d021      	beq.n	80013ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	490e      	ldr	r1, [pc, #56]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
 8001374:	e021      	b.n	80013ba <HAL_GPIO_Init+0x2e2>
 8001376:	bf00      	nop
 8001378:	10320000 	.word	0x10320000
 800137c:	10310000 	.word	0x10310000
 8001380:	10220000 	.word	0x10220000
 8001384:	10210000 	.word	0x10210000
 8001388:	10120000 	.word	0x10120000
 800138c:	10110000 	.word	0x10110000
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	40010800 	.word	0x40010800
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40011400 	.word	0x40011400
 80013a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_GPIO_Init+0x304>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4909      	ldr	r1, [pc, #36]	@ (80013dc <HAL_GPIO_Init+0x304>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	3301      	adds	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f47f ae8e 	bne.w	80010ec <HAL_GPIO_Init+0x14>
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	372c      	adds	r7, #44	@ 0x2c
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e272      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8087 	beq.w	800150e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001400:	4b92      	ldr	r3, [pc, #584]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b04      	cmp	r3, #4
 800140a:	d00c      	beq.n	8001426 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800140c:	4b8f      	ldr	r3, [pc, #572]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b08      	cmp	r3, #8
 8001416:	d112      	bne.n	800143e <HAL_RCC_OscConfig+0x5e>
 8001418:	4b8c      	ldr	r3, [pc, #560]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001424:	d10b      	bne.n	800143e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001426:	4b89      	ldr	r3, [pc, #548]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d06c      	beq.n	800150c <HAL_RCC_OscConfig+0x12c>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d168      	bne.n	800150c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e24c      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x76>
 8001448:	4b80      	ldr	r3, [pc, #512]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a7f      	ldr	r2, [pc, #508]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800144e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e02e      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x98>
 800145e:	4b7b      	ldr	r3, [pc, #492]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7a      	ldr	r2, [pc, #488]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b78      	ldr	r3, [pc, #480]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a77      	ldr	r2, [pc, #476]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001470:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0xbc>
 8001482:	4b72      	ldr	r3, [pc, #456]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a71      	ldr	r2, [pc, #452]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b6f      	ldr	r3, [pc, #444]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a6e      	ldr	r2, [pc, #440]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 800149c:	4b6b      	ldr	r3, [pc, #428]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6a      	ldr	r2, [pc, #424]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b68      	ldr	r3, [pc, #416]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a67      	ldr	r2, [pc, #412]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fd1e 	bl	8000efc <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fd1a 	bl	8000efc <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	@ 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e200      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b5d      	ldr	r3, [pc, #372]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xe4>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fd0a 	bl	8000efc <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fd06 	bl	8000efc <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	@ 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1ec      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b53      	ldr	r3, [pc, #332]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x10c>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d063      	beq.n	80015e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151a:	4b4c      	ldr	r3, [pc, #304]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001526:	4b49      	ldr	r3, [pc, #292]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x18c>
 8001532:	4b46      	ldr	r3, [pc, #280]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b43      	ldr	r3, [pc, #268]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x176>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1c0      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b3d      	ldr	r3, [pc, #244]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4939      	ldr	r1, [pc, #228]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e03a      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b36      	ldr	r3, [pc, #216]	@ (8001650 <HAL_RCC_OscConfig+0x270>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff fcbf 	bl	8000efc <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fcbb 	bl	8000efc <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e1a1      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4927      	ldr	r1, [pc, #156]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b26      	ldr	r3, [pc, #152]	@ (8001650 <HAL_RCC_OscConfig+0x270>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc9e 	bl	8000efc <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc9a 	bl	8000efc <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e180      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d03a      	beq.n	8001664 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d019      	beq.n	800162a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <HAL_RCC_OscConfig+0x274>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fc7e 	bl	8000efc <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fc7a 	bl	8000efc <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e160      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001622:	2001      	movs	r0, #1
 8001624:	f000 fa9c 	bl	8001b60 <RCC_Delay>
 8001628:	e01c      	b.n	8001664 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_RCC_OscConfig+0x274>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fc64 	bl	8000efc <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001636:	e00f      	b.n	8001658 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fc60 	bl	8000efc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d908      	bls.n	8001658 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e146      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	42420000 	.word	0x42420000
 8001654:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	4b92      	ldr	r3, [pc, #584]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e9      	bne.n	8001638 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80a6 	beq.w	80017be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001676:	4b8b      	ldr	r3, [pc, #556]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10d      	bne.n	800169e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b88      	ldr	r3, [pc, #544]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a87      	ldr	r2, [pc, #540]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b85      	ldr	r3, [pc, #532]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b82      	ldr	r3, [pc, #520]	@ (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d118      	bne.n	80016dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016aa:	4b7f      	ldr	r3, [pc, #508]	@ (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7e      	ldr	r2, [pc, #504]	@ (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fc21 	bl	8000efc <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016be:	f7ff fc1d 	bl	8000efc <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b64      	cmp	r3, #100	@ 0x64
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e103      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	4b75      	ldr	r3, [pc, #468]	@ (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d106      	bne.n	80016f2 <HAL_RCC_OscConfig+0x312>
 80016e4:	4b6f      	ldr	r3, [pc, #444]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4a6e      	ldr	r2, [pc, #440]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6213      	str	r3, [r2, #32]
 80016f0:	e02d      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10c      	bne.n	8001714 <HAL_RCC_OscConfig+0x334>
 80016fa:	4b6a      	ldr	r3, [pc, #424]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4a69      	ldr	r2, [pc, #420]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	6213      	str	r3, [r2, #32]
 8001706:	4b67      	ldr	r3, [pc, #412]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a66      	ldr	r2, [pc, #408]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f023 0304 	bic.w	r3, r3, #4
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	e01c      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d10c      	bne.n	8001736 <HAL_RCC_OscConfig+0x356>
 800171c:	4b61      	ldr	r3, [pc, #388]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a60      	ldr	r2, [pc, #384]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	4b5e      	ldr	r3, [pc, #376]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a5d      	ldr	r2, [pc, #372]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	e00b      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 8001736:	4b5b      	ldr	r3, [pc, #364]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a5a      	ldr	r2, [pc, #360]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	4b58      	ldr	r3, [pc, #352]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a57      	ldr	r2, [pc, #348]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d015      	beq.n	8001782 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fbd1 	bl	8000efc <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff fbcd 	bl	8000efc <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0b1      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001774:	4b4b      	ldr	r3, [pc, #300]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0ee      	beq.n	800175e <HAL_RCC_OscConfig+0x37e>
 8001780:	e014      	b.n	80017ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff fbbb 	bl	8000efc <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178a:	f7ff fbb7 	bl	8000efc <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e09b      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	4b40      	ldr	r3, [pc, #256]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1ee      	bne.n	800178a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d105      	bne.n	80017be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b2:	4b3c      	ldr	r3, [pc, #240]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a3b      	ldr	r2, [pc, #236]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8087 	beq.w	80018d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c8:	4b36      	ldr	r3, [pc, #216]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d061      	beq.n	8001898 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d146      	bne.n	800186a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017dc:	4b33      	ldr	r3, [pc, #204]	@ (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fb8b 	bl	8000efc <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff fb87 	bl	8000efc <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e06d      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fc:	4b29      	ldr	r3, [pc, #164]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001810:	d108      	bne.n	8001824 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001812:	4b24      	ldr	r3, [pc, #144]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4921      	ldr	r1, [pc, #132]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001824:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a19      	ldr	r1, [r3, #32]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	430b      	orrs	r3, r1
 8001836:	491b      	ldr	r1, [pc, #108]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fb5b 	bl	8000efc <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184a:	f7ff fb57 	bl	8000efc <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e03d      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x46a>
 8001868:	e035      	b.n	80018d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fb44 	bl	8000efc <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fb40 	bl	8000efc <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e026      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x498>
 8001896:	e01e      	b.n	80018d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e019      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40007000 	.word	0x40007000
 80018ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_RCC_OscConfig+0x500>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0d0      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f8:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d910      	bls.n	8001928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b67      	ldr	r3, [pc, #412]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 0207 	bic.w	r2, r3, #7
 800190e:	4965      	ldr	r1, [pc, #404]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b63      	ldr	r3, [pc, #396]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0b8      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001940:	4b59      	ldr	r3, [pc, #356]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a58      	ldr	r2, [pc, #352]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800194a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001958:	4b53      	ldr	r3, [pc, #332]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a52      	ldr	r2, [pc, #328]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001962:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001964:	4b50      	ldr	r3, [pc, #320]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	494d      	ldr	r1, [pc, #308]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d040      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b47      	ldr	r3, [pc, #284]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d115      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e07f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4b41      	ldr	r3, [pc, #260]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e073      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06b      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b39      	ldr	r3, [pc, #228]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4936      	ldr	r1, [pc, #216]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d4:	f7ff fa92 	bl	8000efc <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff fa8e 	bl	8000efc <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e053      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a04:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d210      	bcs.n	8001a34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0207 	bic.w	r2, r3, #7
 8001a1a:	4922      	ldr	r1, [pc, #136]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e032      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4916      	ldr	r1, [pc, #88]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	490e      	ldr	r1, [pc, #56]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a72:	f000 f821 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a76:	4602      	mov	r2, r0
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	490a      	ldr	r1, [pc, #40]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a84:	5ccb      	ldrb	r3, [r1, r3]
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	4a09      	ldr	r2, [pc, #36]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f9f0 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40022000 	.word	0x40022000
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08001ff0 	.word	0x08001ff0
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d002      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0x36>
 8001ae6:	e027      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aea:	613b      	str	r3, [r7, #16]
      break;
 8001aec:	e027      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	0c9b      	lsrs	r3, r3, #18
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	4a17      	ldr	r2, [pc, #92]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001af8:	5cd3      	ldrb	r3, [r2, r3]
 8001afa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d010      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	0c5b      	lsrs	r3, r3, #17
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a0d      	ldr	r2, [pc, #52]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b1a:	fb03 f202 	mul.w	r2, r3, r2
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e004      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	613b      	str	r3, [r7, #16]
      break;
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b3a:	613b      	str	r3, [r7, #16]
      break;
 8001b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3e:	693b      	ldr	r3, [r7, #16]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	007a1200 	.word	0x007a1200
 8001b54:	08002000 	.word	0x08002000
 8001b58:	08002010 	.word	0x08002010
 8001b5c:	003d0900 	.word	0x003d0900

08001b60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <RCC_Delay+0x34>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <RCC_Delay+0x38>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0a5b      	lsrs	r3, r3, #9
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b7c:	bf00      	nop
  }
  while (Delay --);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1e5a      	subs	r2, r3, #1
 8001b82:	60fa      	str	r2, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f9      	bne.n	8001b7c <RCC_Delay+0x1c>
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	20000000 	.word	0x20000000
 8001b98:	10624dd3 	.word	0x10624dd3

08001b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e076      	b.n	8001c9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d108      	bne.n	8001bc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bbe:	d009      	beq.n	8001bd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
 8001bc6:	e005      	b.n	8001bd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff f858 	bl	8000ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c58:	ea42 0103 	orr.w	r1, r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	0c1a      	lsrs	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f002 0204 	and.w	r2, r2, #4
 8001c7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <LL_GPIO_SetPinMode>:
{
 8001ca4:	b490      	push	{r4, r7}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	0e1b      	lsrs	r3, r3, #24
 8001cb8:	4413      	add	r3, r2
 8001cba:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001cbc:	6822      	ldr	r2, [r4, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	210f      	movs	r1, #15
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	401a      	ands	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	61bb      	str	r3, [r7, #24]
  return result;
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	6023      	str	r3, [r4, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc90      	pop	{r4, r7}
 8001d06:	4770      	bx	lr

08001d08 <LL_GPIO_SetPinSpeed>:
{
 8001d08:	b490      	push	{r4, r7}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	0e1b      	lsrs	r3, r3, #24
 8001d1c:	4413      	add	r3, r2
 8001d1e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001d20:	6822      	ldr	r2, [r4, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	613b      	str	r3, [r7, #16]
  return result;
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	2103      	movs	r1, #3
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	401a      	ands	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	61bb      	str	r3, [r7, #24]
  return result;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	6023      	str	r3, [r4, #0]
}
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc90      	pop	{r4, r7}
 8001d6a:	4770      	bx	lr

08001d6c <LL_GPIO_SetPinOutputType>:
{
 8001d6c:	b490      	push	{r4, r7}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	0e1b      	lsrs	r3, r3, #24
 8001d80:	4413      	add	r3, r2
 8001d82:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001d84:	6822      	ldr	r2, [r4, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	613b      	str	r3, [r7, #16]
  return result;
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	401a      	ands	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	61bb      	str	r3, [r7, #24]
  return result;
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	6023      	str	r3, [r4, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc90      	pop	{r4, r7}
 8001dce:	4770      	bx	lr

08001dd0 <LL_GPIO_SetPinPull>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	613b      	str	r3, [r7, #16]
  return result;
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	408b      	lsls	r3, r1
 8001e04:	431a      	orrs	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	60da      	str	r2, [r3, #12]
}
 8001e0a:	bf00      	nop
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	0c1b      	lsrs	r3, r3, #16
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	60fb      	str	r3, [r7, #12]
  return result;
 8001e34:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001e3e:	e044      	b.n	8001eca <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	409a      	lsls	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d03a      	beq.n	8001ec4 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	2b07      	cmp	r3, #7
 8001e52:	d806      	bhi.n	8001e62 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001e54:	f240 1201 	movw	r2, #257	@ 0x101
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	e008      	b.n	8001e74 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3b08      	subs	r3, #8
 8001e66:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e72:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d106      	bne.n	8001e8a <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	461a      	mov	r2, r3
 8001e82:	69b9      	ldr	r1, [r7, #24]
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ffa3 	bl	8001dd0 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	69b9      	ldr	r1, [r7, #24]
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff06 	bl	8001ca4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d003      	beq.n	8001ea8 <LL_GPIO_Init+0x94>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	d10d      	bne.n	8001ec4 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	461a      	mov	r2, r3
 8001eae:	69b9      	ldr	r1, [r7, #24]
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff29 	bl	8001d08 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	69b9      	ldr	r1, [r7, #24]
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ff54 	bl	8001d6c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1b4      	bne.n	8001e40 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	4a07      	ldr	r2, [pc, #28]	@ (8001f10 <LL_InitTick+0x30>)
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <LL_InitTick+0x30>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efe:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <LL_InitTick+0x30>)
 8001f00:	2205      	movs	r2, #5
 8001f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e010 	.word	0xe000e010

08001f14 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001f1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ffdd 	bl	8001ee0 <LL_InitTick>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001f38:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <LL_mDelay+0x44>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001f3e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d00c      	beq.n	8001f62 <LL_mDelay+0x32>
  {
    Delay++;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001f4e:	e008      	b.n	8001f62 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001f50:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <LL_mDelay+0x44>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <LL_mDelay+0x32>
    {
      Delay--;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f3      	bne.n	8001f50 <LL_mDelay+0x20>
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <memset>:
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4402      	add	r2, r0
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d100      	bne.n	8001f82 <memset+0xa>
 8001f80:	4770      	bx	lr
 8001f82:	f803 1b01 	strb.w	r1, [r3], #1
 8001f86:	e7f9      	b.n	8001f7c <memset+0x4>

08001f88 <__libc_init_array>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	2600      	movs	r6, #0
 8001f8c:	4d0c      	ldr	r5, [pc, #48]	@ (8001fc0 <__libc_init_array+0x38>)
 8001f8e:	4c0d      	ldr	r4, [pc, #52]	@ (8001fc4 <__libc_init_array+0x3c>)
 8001f90:	1b64      	subs	r4, r4, r5
 8001f92:	10a4      	asrs	r4, r4, #2
 8001f94:	42a6      	cmp	r6, r4
 8001f96:	d109      	bne.n	8001fac <__libc_init_array+0x24>
 8001f98:	f000 f81a 	bl	8001fd0 <_init>
 8001f9c:	2600      	movs	r6, #0
 8001f9e:	4d0a      	ldr	r5, [pc, #40]	@ (8001fc8 <__libc_init_array+0x40>)
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fcc <__libc_init_array+0x44>)
 8001fa2:	1b64      	subs	r4, r4, r5
 8001fa4:	10a4      	asrs	r4, r4, #2
 8001fa6:	42a6      	cmp	r6, r4
 8001fa8:	d105      	bne.n	8001fb6 <__libc_init_array+0x2e>
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
 8001fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fb0:	4798      	blx	r3
 8001fb2:	3601      	adds	r6, #1
 8001fb4:	e7ee      	b.n	8001f94 <__libc_init_array+0xc>
 8001fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fba:	4798      	blx	r3
 8001fbc:	3601      	adds	r6, #1
 8001fbe:	e7f2      	b.n	8001fa6 <__libc_init_array+0x1e>
 8001fc0:	08002014 	.word	0x08002014
 8001fc4:	08002014 	.word	0x08002014
 8001fc8:	08002014 	.word	0x08002014
 8001fcc:	08002018 	.word	0x08002018

08001fd0 <_init>:
 8001fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd2:	bf00      	nop
 8001fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fd6:	bc08      	pop	{r3}
 8001fd8:	469e      	mov	lr, r3
 8001fda:	4770      	bx	lr

08001fdc <_fini>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	bf00      	nop
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr
