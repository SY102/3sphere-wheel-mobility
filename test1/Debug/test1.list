
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002988  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08002a94  08002a94  00003a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa0  08002aa0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002aa0  08002aa0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aa0  08002aa0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa0  08002aa0  00003aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002aa4  08002aa4  00003aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002aa8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002ab4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002ab4  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008782  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff8  00000000  00000000  0000c7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0000e7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e0  00000000  00000000  0000f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192aa  00000000  00000000  0000fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd56  00000000  00000000  00028cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad2e  00000000  00000000  00034a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf76e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e0  00000000  00000000  000bf7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c2194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a7c 	.word	0x08002a7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002a7c 	.word	0x08002a7c

0800014c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	0a1b      	lsrs	r3, r3, #8
 800015a:	b29a      	uxth	r2, r3
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	611a      	str	r2, [r3, #16]
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800016a:	b480      	push	{r7}
 800016c:	b083      	sub	sp, #12
 800016e:	af00      	add	r7, sp, #0
 8000170:	6078      	str	r0, [r7, #4]
 8000172:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	0a1b      	lsrs	r3, r3, #8
 8000178:	b29a      	uxth	r2, r3
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	615a      	str	r2, [r3, #20]
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <nrf_Write>:
 */

#include "NRF24L01.h"
#include <stdio.h>

void nrf_Write(NRF24L01* nrf,uint8_t address, uint8_t *data){
 8000188:	b580      	push	{r7, lr}
 800018a:	b088      	sub	sp, #32
 800018c:	af00      	add	r7, sp, #0
 800018e:	60f8      	str	r0, [r7, #12]
 8000190:	460b      	mov	r3, r1
 8000192:	607a      	str	r2, [r7, #4]
 8000194:	72fb      	strb	r3, [r7, #11]
	uint8_t spiTXbuf[6];

	spiTXbuf[0]=address|0x20;
 8000196:	7afb      	ldrb	r3, [r7, #11]
 8000198:	f043 0320 	orr.w	r3, r3, #32
 800019c:	b2db      	uxtb	r3, r3
 800019e:	753b      	strb	r3, [r7, #20]
	if(address==0x0a || address==0x0b||address==0x10){
 80001a0:	7afb      	ldrb	r3, [r7, #11]
 80001a2:	2b0a      	cmp	r3, #10
 80001a4:	d005      	beq.n	80001b2 <nrf_Write+0x2a>
 80001a6:	7afb      	ldrb	r3, [r7, #11]
 80001a8:	2b0b      	cmp	r3, #11
 80001aa:	d002      	beq.n	80001b2 <nrf_Write+0x2a>
 80001ac:	7afb      	ldrb	r3, [r7, #11]
 80001ae:	2b10      	cmp	r3, #16
 80001b0:	d12d      	bne.n	800020e <nrf_Write+0x86>
		for(int i=1;i<6;i++){
 80001b2:	2301      	movs	r3, #1
 80001b4:	61fb      	str	r3, [r7, #28]
 80001b6:	e00d      	b.n	80001d4 <nrf_Write+0x4c>
			spiTXbuf[i]=data[i-1];
 80001b8:	69fb      	ldr	r3, [r7, #28]
 80001ba:	3b01      	subs	r3, #1
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	4413      	add	r3, r2
 80001c0:	7819      	ldrb	r1, [r3, #0]
 80001c2:	f107 0214 	add.w	r2, r7, #20
 80001c6:	69fb      	ldr	r3, [r7, #28]
 80001c8:	4413      	add	r3, r2
 80001ca:	460a      	mov	r2, r1
 80001cc:	701a      	strb	r2, [r3, #0]
		for(int i=1;i<6;i++){
 80001ce:	69fb      	ldr	r3, [r7, #28]
 80001d0:	3301      	adds	r3, #1
 80001d2:	61fb      	str	r3, [r7, #28]
 80001d4:	69fb      	ldr	r3, [r7, #28]
 80001d6:	2b05      	cmp	r3, #5
 80001d8:	ddee      	ble.n	80001b8 <nrf_Write+0x30>
		}
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	689a      	ldr	r2, [r3, #8]
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	899b      	ldrh	r3, [r3, #12]
 80001e2:	4619      	mov	r1, r3
 80001e4:	4610      	mov	r0, r2
 80001e6:	f7ff ffc0 	bl	800016a <LL_GPIO_ResetOutputPin>
		SPI_Transmit(nrf->SPI,spiTXbuf,6);
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f107 0114 	add.w	r1, r7, #20
 80001f2:	2206      	movs	r2, #6
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f98d 	bl	8000514 <SPI_Transmit>
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	689a      	ldr	r2, [r3, #8]
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	899b      	ldrh	r3, [r3, #12]
 8000202:	4619      	mov	r1, r3
 8000204:	4610      	mov	r0, r2
 8000206:	f7ff ffa1 	bl	800014c <LL_GPIO_SetOutputPin>
	if(address==0x0a || address==0x0b||address==0x10){
 800020a:	bf00      	nop
		spiTXbuf[1]=data[0];
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
		SPI_Transmit(nrf->SPI,spiTXbuf,2);
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
	}
}
 800020c:	e036      	b.n	800027c <nrf_Write+0xf4>
	else if(data==0x00){
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d118      	bne.n	8000246 <nrf_Write+0xbe>
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	689a      	ldr	r2, [r3, #8]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	899b      	ldrh	r3, [r3, #12]
 800021c:	4619      	mov	r1, r3
 800021e:	4610      	mov	r0, r2
 8000220:	f7ff ffa3 	bl	800016a <LL_GPIO_ResetOutputPin>
		SPI_Transmit(nrf->SPI,spiTXbuf,1);
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f107 0114 	add.w	r1, r7, #20
 800022c:	2201      	movs	r2, #1
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f970 	bl	8000514 <SPI_Transmit>
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	689a      	ldr	r2, [r3, #8]
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	899b      	ldrh	r3, [r3, #12]
 800023c:	4619      	mov	r1, r3
 800023e:	4610      	mov	r0, r2
 8000240:	f7ff ff84 	bl	800014c <LL_GPIO_SetOutputPin>
}
 8000244:	e01a      	b.n	800027c <nrf_Write+0xf4>
		spiTXbuf[1]=data[0];
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	757b      	strb	r3, [r7, #21]
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	689a      	ldr	r2, [r3, #8]
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	899b      	ldrh	r3, [r3, #12]
 8000254:	4619      	mov	r1, r3
 8000256:	4610      	mov	r0, r2
 8000258:	f7ff ff87 	bl	800016a <LL_GPIO_ResetOutputPin>
		SPI_Transmit(nrf->SPI,spiTXbuf,2);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f107 0114 	add.w	r1, r7, #20
 8000264:	2202      	movs	r2, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f954 	bl	8000514 <SPI_Transmit>
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	689a      	ldr	r2, [r3, #8]
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	899b      	ldrh	r3, [r3, #12]
 8000274:	4619      	mov	r1, r3
 8000276:	4610      	mov	r0, r2
 8000278:	f7ff ff68 	bl	800014c <LL_GPIO_SetOutputPin>
}
 800027c:	bf00      	nop
 800027e:	3720      	adds	r7, #32
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <nrf_Read>:

void nrf_Read(NRF24L01* nrf,uint8_t address, uint8_t *databuf){
 8000284:	b580      	push	{r7, lr}
 8000286:	b08a      	sub	sp, #40	@ 0x28
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	460b      	mov	r3, r1
 800028e:	607a      	str	r2, [r7, #4]
 8000290:	72fb      	strb	r3, [r7, #11]
	uint8_t spiTXbuf[6];
	uint8_t spiRXbuf[6];

	spiTXbuf[0]=address;
 8000292:	7afb      	ldrb	r3, [r7, #11]
 8000294:	773b      	strb	r3, [r7, #28]


	if(address==0x0a || address==0x0b||address==0x10){
 8000296:	7afb      	ldrb	r3, [r7, #11]
 8000298:	2b0a      	cmp	r3, #10
 800029a:	d005      	beq.n	80002a8 <nrf_Read+0x24>
 800029c:	7afb      	ldrb	r3, [r7, #11]
 800029e:	2b0b      	cmp	r3, #11
 80002a0:	d002      	beq.n	80002a8 <nrf_Read+0x24>
 80002a2:	7afb      	ldrb	r3, [r7, #11]
 80002a4:	2b10      	cmp	r3, #16
 80002a6:	d12c      	bne.n	8000302 <nrf_Read+0x7e>
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	689a      	ldr	r2, [r3, #8]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	899b      	ldrh	r3, [r3, #12]
 80002b0:	4619      	mov	r1, r3
 80002b2:	4610      	mov	r0, r2
 80002b4:	f7ff ff59 	bl	800016a <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(nrf->SPI,spiTXbuf,spiRXbuf,6);
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	6818      	ldr	r0, [r3, #0]
 80002bc:	f107 0214 	add.w	r2, r7, #20
 80002c0:	f107 011c 	add.w	r1, r7, #28
 80002c4:	2306      	movs	r3, #6
 80002c6:	f000 f8f0 	bl	80004aa <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	689a      	ldr	r2, [r3, #8]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	899b      	ldrh	r3, [r3, #12]
 80002d2:	4619      	mov	r1, r3
 80002d4:	4610      	mov	r0, r2
 80002d6:	f7ff ff39 	bl	800014c <LL_GPIO_SetOutputPin>
		for(int i=1;i<6;i++){
 80002da:	2301      	movs	r3, #1
 80002dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80002de:	e00c      	b.n	80002fa <nrf_Read+0x76>
			databuf[i-1]=spiRXbuf[i];
 80002e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002e2:	3b01      	subs	r3, #1
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	f107 0114 	add.w	r1, r7, #20
 80002ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80002ee:	440a      	add	r2, r1
 80002f0:	7812      	ldrb	r2, [r2, #0]
 80002f2:	701a      	strb	r2, [r3, #0]
		for(int i=1;i<6;i++){
 80002f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002f6:	3301      	adds	r3, #1
 80002f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80002fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002fc:	2b05      	cmp	r3, #5
 80002fe:	ddef      	ble.n	80002e0 <nrf_Read+0x5c>
 8000300:	e01c      	b.n	800033c <nrf_Read+0xb8>
		}
	}
	else{
		LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	689a      	ldr	r2, [r3, #8]
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	899b      	ldrh	r3, [r3, #12]
 800030a:	4619      	mov	r1, r3
 800030c:	4610      	mov	r0, r2
 800030e:	f7ff ff2c 	bl	800016a <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(nrf->SPI,spiTXbuf,spiRXbuf,2);
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6818      	ldr	r0, [r3, #0]
 8000316:	f107 0214 	add.w	r2, r7, #20
 800031a:	f107 011c 	add.w	r1, r7, #28
 800031e:	2302      	movs	r3, #2
 8000320:	f000 f8c3 	bl	80004aa <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	689a      	ldr	r2, [r3, #8]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	899b      	ldrh	r3, [r3, #12]
 800032c:	4619      	mov	r1, r3
 800032e:	4610      	mov	r0, r2
 8000330:	f7ff ff0c 	bl	800014c <LL_GPIO_SetOutputPin>
		databuf[0]=spiRXbuf[1];
 8000334:	7d7a      	ldrb	r2, [r7, #21]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	701a      	strb	r2, [r3, #0]
	}
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	3728      	adds	r7, #40	@ 0x28
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <nrf_power_down>:
	while(tim->CNT!=0){};
	LL_GPIO_ResetOutputPin(nrf->chip_enable_port,nrf->chip_enable_pin);
	LL_TIM_DisableCounter(tim);
}

void nrf_power_down(NRF24L01* nrf){
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	uint8_t data=0;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x00,&data);
 8000350:	f107 030f 	add.w	r3, r7, #15
 8000354:	461a      	mov	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f7ff ff93 	bl	8000284 <nrf_Read>
	data &= ~(0x01<<1);
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	f023 0302 	bic.w	r3, r3, #2
 8000364:	b2db      	uxtb	r3, r3
 8000366:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&data);
 8000368:	f107 030f 	add.w	r3, r7, #15
 800036c:	461a      	mov	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f7ff ff09 	bl	8000188 <nrf_Write>
}
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <nrf_power_up>:

void nrf_power_up(NRF24L01* nrf){
 800037e:	b580      	push	{r7, lr}
 8000380:	b084      	sub	sp, #16
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
	uint8_t data=0;
 8000386:	2300      	movs	r3, #0
 8000388:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x00,&data);
 800038a:	f107 030f 	add.w	r3, r7, #15
 800038e:	461a      	mov	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f7ff ff76 	bl	8000284 <nrf_Read>
	data|= (0x01<<1);
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&data);
 80003a2:	f107 030f 	add.w	r3, r7, #15
 80003a6:	461a      	mov	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff feec 	bl	8000188 <nrf_Write>
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <nrf24_init>:


void nrf24_init(NRF24L01* nrf,SPI_TypeDef* spi,type mode,GPIO_TypeDef* chip_select_port,uint16_t chip_select_pin ,GPIO_TypeDef* chip_enable_port,uint16_t chip_enable_pin,uint16_t length){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	4613      	mov	r3, r2
 80003c6:	71fb      	strb	r3, [r7, #7]
	nrf->SPI=spi;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	68ba      	ldr	r2, [r7, #8]
 80003cc:	601a      	str	r2, [r3, #0]
	nrf->para.mode=mode;
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	79fa      	ldrb	r2, [r7, #7]
 80003d2:	711a      	strb	r2, [r3, #4]
	nrf->chip_select_port=chip_select_port;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	683a      	ldr	r2, [r7, #0]
 80003d8:	609a      	str	r2, [r3, #8]
	nrf->chip_select_pin=chip_select_pin;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	8b3a      	ldrh	r2, [r7, #24]
 80003de:	819a      	strh	r2, [r3, #12]
	nrf->chip_enable_port=chip_enable_port;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	69fa      	ldr	r2, [r7, #28]
 80003e4:	611a      	str	r2, [r3, #16]
	nrf->chip_enable_pin=chip_enable_pin;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	8c3a      	ldrh	r2, [r7, #32]
 80003ea:	829a      	strh	r2, [r3, #20]
	//HAL_GPIO_WritePin(nrf->chip_select_port,nrf->chip_select_pin,1);  //??
	LL_mDelay(100);
 80003ec:	2064      	movs	r0, #100	@ 0x64
 80003ee:	f002 faef 	bl	80029d0 <LL_mDelay>
	LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	899b      	ldrh	r3, [r3, #12]
 80003fa:	4619      	mov	r1, r3
 80003fc:	4610      	mov	r0, r2
 80003fe:	f7ff fea5 	bl	800014c <LL_GPIO_SetOutputPin>

	nrf_power_down(nrf);
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ff9e 	bl	8000344 <nrf_power_down>
	if(mode==TX){
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d10b      	bne.n	8000426 <nrf24_init+0x6e>
		LL_GPIO_ResetOutputPin(nrf->chip_enable_port,nrf->chip_enable_pin);
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	691a      	ldr	r2, [r3, #16]
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	8a9b      	ldrh	r3, [r3, #20]
 8000416:	4619      	mov	r1, r3
 8000418:	4610      	mov	r0, r2
 800041a:	f7ff fea6 	bl	800016a <LL_GPIO_ResetOutputPin>
		nrf_set_TX(nrf);
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f000 f9dc 	bl	80007dc <nrf_set_TX>
 8000424:	e00d      	b.n	8000442 <nrf24_init+0x8a>
	}
	else if(mode==RX){
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d10a      	bne.n	8000442 <nrf24_init+0x8a>
		LL_GPIO_SetOutputPin(nrf->chip_enable_port,nrf->chip_enable_pin);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	691a      	ldr	r2, [r3, #16]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	8a9b      	ldrh	r3, [r3, #20]
 8000434:	4619      	mov	r1, r3
 8000436:	4610      	mov	r0, r2
 8000438:	f7ff fe88 	bl	800014c <LL_GPIO_SetOutputPin>
		nrf_set_RX(nrf);
 800043c:	68f8      	ldr	r0, [r7, #12]
 800043e:	f000 f9f3 	bl	8000828 <nrf_set_RX>
	}

	nrf_crc_enable(nrf);
 8000442:	68f8      	ldr	r0, [r7, #12]
 8000444:	f000 fa16 	bl	8000874 <nrf_crc_enable>
	nrf_crc_encoding(nrf,1);
 8000448:	2101      	movs	r1, #1
 800044a:	68f8      	ldr	r0, [r7, #12]
 800044c:	f000 fa2f 	bl	80008ae <nrf_crc_encoding>
	nrf_enable_pipe(nrf,0);
 8000450:	2100      	movs	r1, #0
 8000452:	68f8      	ldr	r0, [r7, #12]
 8000454:	f000 fa56 	bl	8000904 <nrf_enable_pipe>
	nrf_disable_pipe(nrf,1);
 8000458:	2101      	movs	r1, #1
 800045a:	68f8      	ldr	r0, [r7, #12]
 800045c:	f000 fa77 	bl	800094e <nrf_disable_pipe>
	nrf_data_length(nrf,0,32);
 8000460:	2220      	movs	r2, #32
 8000462:	2100      	movs	r1, #0
 8000464:	68f8      	ldr	r0, [r7, #12]
 8000466:	f000 fa99 	bl	800099c <nrf_data_length>
	nrf_enable_dpl(nrf);
 800046a:	68f8      	ldr	r0, [r7, #12]
 800046c:	f000 fad7 	bl	8000a1e <nrf_enable_dpl>
	nrf_enable_dpl_pipe(nrf,0);
 8000470:	2100      	movs	r1, #0
 8000472:	68f8      	ldr	r0, [r7, #12]
 8000474:	f000 faee 	bl	8000a54 <nrf_enable_dpl_pipe>

	nrf_data_length(nrf,0,length);		//data pipe 0
 8000478:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800047a:	461a      	mov	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	68f8      	ldr	r0, [r7, #12]
 8000480:	f000 fa8c 	bl	800099c <nrf_data_length>
	nrf_clear_interrupt(nrf);
 8000484:	68f8      	ldr	r0, [r7, #12]
 8000486:	f000 f98f 	bl	80007a8 <nrf_clear_interrupt>
	nrf_power_up(nrf);
 800048a:	68f8      	ldr	r0, [r7, #12]
 800048c:	f7ff ff77 	bl	800037e <nrf_power_up>

	flush_TX(nrf);
 8000490:	68f8      	ldr	r0, [r7, #12]
 8000492:	f000 f86e 	bl	8000572 <flush_TX>
	flush_RX(nrf);
 8000496:	68f8      	ldr	r0, [r7, #12]
 8000498:	f000 f878 	bl	800058c <flush_RX>

	LL_mDelay(10);
 800049c:	200a      	movs	r0, #10
 800049e:	f002 fa97 	bl	80029d0 <LL_mDelay>


}
 80004a2:	bf00      	nop
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <SPI_TransmitReceive>:
void SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t* txData, uint8_t* rxData, uint16_t size) {
 80004aa:	b480      	push	{r7}
 80004ac:	b087      	sub	sp, #28
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	60f8      	str	r0, [r7, #12]
 80004b2:	60b9      	str	r1, [r7, #8]
 80004b4:	607a      	str	r2, [r7, #4]
 80004b6:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; i++) {
 80004b8:	2300      	movs	r3, #0
 80004ba:	82fb      	strh	r3, [r7, #22]
 80004bc:	e020      	b.n	8000500 <SPI_TransmitReceive+0x56>
        while (!(SPIx->SR & SPI_SR_TXE));                          // 송신 버퍼 비었는지 확인
 80004be:	bf00      	nop
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	f003 0302 	and.w	r3, r3, #2
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d0f9      	beq.n	80004c0 <SPI_TransmitReceive+0x16>
        *((__IO uint8_t*)&SPIx->DR) = txData[i];                   // 전송 데이터 넣기
 80004cc:	8afb      	ldrh	r3, [r7, #22]
 80004ce:	68ba      	ldr	r2, [r7, #8]
 80004d0:	441a      	add	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	330c      	adds	r3, #12
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	701a      	strb	r2, [r3, #0]

        while (!(SPIx->SR & SPI_SR_RXNE));                         // 수신 데이터 올 때까지 대기
 80004da:	bf00      	nop
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f9      	beq.n	80004dc <SPI_TransmitReceive+0x32>
        rxData[i] = *((__IO uint8_t*)&SPIx->DR);                   // 수신 데이터 읽기
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f103 020c 	add.w	r2, r3, #12
 80004ee:	8afb      	ldrh	r3, [r7, #22]
 80004f0:	6879      	ldr	r1, [r7, #4]
 80004f2:	440b      	add	r3, r1
 80004f4:	7812      	ldrb	r2, [r2, #0]
 80004f6:	b2d2      	uxtb	r2, r2
 80004f8:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 80004fa:	8afb      	ldrh	r3, [r7, #22]
 80004fc:	3301      	adds	r3, #1
 80004fe:	82fb      	strh	r3, [r7, #22]
 8000500:	8afa      	ldrh	r2, [r7, #22]
 8000502:	887b      	ldrh	r3, [r7, #2]
 8000504:	429a      	cmp	r2, r3
 8000506:	d3da      	bcc.n	80004be <SPI_TransmitReceive+0x14>
    }
}
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	371c      	adds	r7, #28
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <SPI_Transmit>:

void SPI_Transmit(SPI_TypeDef* SPIx, uint8_t* txData, uint16_t size) {
 8000514:	b480      	push	{r7}
 8000516:	b087      	sub	sp, #28
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	4613      	mov	r3, r2
 8000520:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < size; i++) {
 8000522:	2300      	movs	r3, #0
 8000524:	82fb      	strh	r3, [r7, #22]
 8000526:	e01a      	b.n	800055e <SPI_Transmit+0x4a>
        while (!(SPIx->SR & SPI_SR_TXE));
 8000528:	bf00      	nop
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f9      	beq.n	800052a <SPI_Transmit+0x16>
        *((__IO uint8_t*)&SPIx->DR) = txData[i];
 8000536:	8afb      	ldrh	r3, [r7, #22]
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	441a      	add	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	330c      	adds	r3, #12
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	701a      	strb	r2, [r3, #0]
        while (!(SPIx->SR & SPI_SR_RXNE));
 8000544:	bf00      	nop
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f9      	beq.n	8000546 <SPI_Transmit+0x32>
        (void)*((__IO uint8_t*)&SPIx->DR);  // 받은 데이터 무시
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	330c      	adds	r3, #12
 8000556:	781b      	ldrb	r3, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 8000558:	8afb      	ldrh	r3, [r7, #22]
 800055a:	3301      	adds	r3, #1
 800055c:	82fb      	strh	r3, [r7, #22]
 800055e:	8afa      	ldrh	r2, [r7, #22]
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	429a      	cmp	r2, r3
 8000564:	d3e0      	bcc.n	8000528 <SPI_Transmit+0x14>
    }
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	371c      	adds	r7, #28
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <flush_TX>:


void flush_TX(NRF24L01* nrf){
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
	nrf_Write(nrf,0xE1,0x00);
 800057a:	2200      	movs	r2, #0
 800057c:	21e1      	movs	r1, #225	@ 0xe1
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f7ff fe02 	bl	8000188 <nrf_Write>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <flush_RX>:

void flush_RX(NRF24L01* nrf){
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	nrf_Write(nrf,0xE2,0x00);
 8000594:	2200      	movs	r2, #0
 8000596:	21e2      	movs	r1, #226	@ 0xe2
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff fdf5 	bl	8000188 <nrf_Write>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <nrf_TX_address>:

void nrf_TX_address(NRF24L01* nrf,uint8_t* address){
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	6039      	str	r1, [r7, #0]
	nrf_Write(nrf,0x10,address);
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	2110      	movs	r1, #16
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff fde7 	bl	8000188 <nrf_Write>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <nrf_TX_payload>:

void nrf_RX_address(NRF24L01* nrf,uint8_t pipe, uint8_t* address){
	nrf_Write(nrf,0x0A+pipe,address);
}

void nrf_TX_payload(NRF24L01* nrf, uint8_t* data){
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b084      	sub	sp, #16
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
	uint8_t address;
	uint8_t status;

	address=0xA0;
 80005cc:	23a0      	movs	r3, #160	@ 0xa0
 80005ce:	73fb      	strb	r3, [r7, #15]
	if(status&(0x20)){
		status|=(0x01<<5);
	}
	nrf_Write(nrf,0x07,&status);*/

	flush_TX(nrf);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff ffce 	bl	8000572 <flush_TX>
	LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689a      	ldr	r2, [r3, #8]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	899b      	ldrh	r3, [r3, #12]
 80005de:	4619      	mov	r1, r3
 80005e0:	4610      	mov	r0, r2
 80005e2:	f7ff fdc2 	bl	800016a <LL_GPIO_ResetOutputPin>
	HAL_SPI_Transmit(nrf->SPI, address, 1, HAL_MAX_DELAY);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6818      	ldr	r0, [r3, #0]
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	2201      	movs	r2, #1
 80005f4:	f001 fb28 	bl	8001c48 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->SPI, data, nrf->para.length, HAL_MAX_DELAY);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	88da      	ldrh	r2, [r3, #6]
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	6839      	ldr	r1, [r7, #0]
 8000606:	f001 fc63 	bl	8001ed0 <HAL_SPI_Receive>
	LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	899b      	ldrh	r3, [r3, #12]
 8000612:	4619      	mov	r1, r3
 8000614:	4610      	mov	r0, r2
 8000616:	f7ff fd99 	bl	800014c <LL_GPIO_SetOutputPin>

	nrf_status(nrf,&status);
 800061a:	f107 030e 	add.w	r3, r7, #14
 800061e:	4619      	mov	r1, r3
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 f9d9 	bl	80009d8 <nrf_status>
	if(status&(0x10)){
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	f003 0310 	and.w	r3, r3, #16
 800062c:	2b00      	cmp	r3, #0
 800062e:	d004      	beq.n	800063a <nrf_TX_payload+0x78>
		status|= (0x01<<4);
 8000630:	7bbb      	ldrb	r3, [r7, #14]
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	b2db      	uxtb	r3, r3
 8000638:	73bb      	strb	r3, [r7, #14]
	}
	if(status&(0x20)){
 800063a:	7bbb      	ldrb	r3, [r7, #14]
 800063c:	f003 0320 	and.w	r3, r3, #32
 8000640:	2b00      	cmp	r3, #0
 8000642:	d004      	beq.n	800064e <nrf_TX_payload+0x8c>
		status|=(0x01<<5);
 8000644:	7bbb      	ldrb	r3, [r7, #14]
 8000646:	f043 0320 	orr.w	r3, r3, #32
 800064a:	b2db      	uxtb	r3, r3
 800064c:	73bb      	strb	r3, [r7, #14]
	}
	nrf_Write(nrf,0x07,&status);
 800064e:	f107 030e 	add.w	r3, r7, #14
 8000652:	461a      	mov	r2, r3
 8000654:	2107      	movs	r1, #7
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff fd96 	bl	8000188 <nrf_Write>

}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <nrf_RX_DR_enable>:
	}
	nrf_Write(nrf,0x07,&status);

}

void nrf_RX_DR_enable(NRF24L01* nrf){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 800066c:	f107 030f 	add.w	r3, r7, #15
 8000670:	461a      	mov	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff fe05 	bl	8000284 <nrf_Read>
	reg&=~(0x01<<6);
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000680:	b2db      	uxtb	r3, r3
 8000682:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 8000684:	f107 030f 	add.w	r3, r7, #15
 8000688:	461a      	mov	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff fd7b 	bl	8000188 <nrf_Write>
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <nrf_RX_DR_disable>:
void nrf_RX_DR_disable(NRF24L01* nrf){
 800069a:	b580      	push	{r7, lr}
 800069c:	b084      	sub	sp, #16
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 80006a2:	f107 030f 	add.w	r3, r7, #15
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff fdea 	bl	8000284 <nrf_Read>
	reg|= (0x01<<6);
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 80006ba:	f107 030f 	add.w	r3, r7, #15
 80006be:	461a      	mov	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff fd60 	bl	8000188 <nrf_Write>
}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <nrf_TX_DS_enable>:

void nrf_TX_DS_enable(NRF24L01* nrf){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 80006d8:	f107 030f 	add.w	r3, r7, #15
 80006dc:	461a      	mov	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff fdcf 	bl	8000284 <nrf_Read>
	reg&=~(0x01<<5);
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	f023 0320 	bic.w	r3, r3, #32
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 80006f0:	f107 030f 	add.w	r3, r7, #15
 80006f4:	461a      	mov	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff fd45 	bl	8000188 <nrf_Write>
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <nrf_TX_DS_disable>:
void nrf_TX_DS_disable(NRF24L01* nrf){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 800070e:	f107 030f 	add.w	r3, r7, #15
 8000712:	461a      	mov	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff fdb4 	bl	8000284 <nrf_Read>
	reg|= (0x01<<5);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	f043 0320 	orr.w	r3, r3, #32
 8000722:	b2db      	uxtb	r3, r3
 8000724:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 8000726:	f107 030f 	add.w	r3, r7, #15
 800072a:	461a      	mov	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff fd2a 	bl	8000188 <nrf_Write>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <nrf_MAX_RT_enable>:

void nrf_MAX_RT_enable(NRF24L01* nrf){
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 8000744:	f107 030f 	add.w	r3, r7, #15
 8000748:	461a      	mov	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff fd99 	bl	8000284 <nrf_Read>
	reg&=~(0x01<<4);
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	f023 0310 	bic.w	r3, r3, #16
 8000758:	b2db      	uxtb	r3, r3
 800075a:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 800075c:	f107 030f 	add.w	r3, r7, #15
 8000760:	461a      	mov	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fd0f 	bl	8000188 <nrf_Write>
}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <nrf_MAX_RT_disable>:
void nrf_MAX_RT_disable(NRF24L01* nrf){
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x00,&reg);
 800077a:	f107 030f 	add.w	r3, r7, #15
 800077e:	461a      	mov	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff fd7e 	bl	8000284 <nrf_Read>
	reg|= (0x01<<4);
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	b2db      	uxtb	r3, r3
 8000790:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 8000792:	f107 030f 	add.w	r3, r7, #15
 8000796:	461a      	mov	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff fcf4 	bl	8000188 <nrf_Write>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <nrf_clear_interrupt>:

void nrf_clear_interrupt(NRF24L01* nrf){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	uint8_t status;
	nrf_status(nrf,&status);
 80007b0:	f107 030f 	add.w	r3, r7, #15
 80007b4:	4619      	mov	r1, r3
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f90e 	bl	80009d8 <nrf_status>
	status|=(0x07<<4);
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x07,&status);
 80007c6:	f107 030f 	add.w	r3, r7, #15
 80007ca:	461a      	mov	r2, r3
 80007cc:	2107      	movs	r1, #7
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff fcda 	bl	8000188 <nrf_Write>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <nrf_set_TX>:

void nrf_set_TX(NRF24L01* nrf){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	uint8_t reg=0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
	nrf_RX_DR_disable(nrf);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff56 	bl	800069a <nrf_RX_DR_disable>
	nrf_MAX_RT_disable(nrf);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ffbf 	bl	8000772 <nrf_MAX_RT_disable>
	nrf_TX_DS_enable(nrf);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff6b 	bl	80006d0 <nrf_TX_DS_enable>
	nrf_Read(nrf,0x00,&reg);
 80007fa:	f107 030f 	add.w	r3, r7, #15
 80007fe:	461a      	mov	r2, r3
 8000800:	2100      	movs	r1, #0
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff fd3e 	bl	8000284 <nrf_Read>
	reg &= (~0x01);
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	f023 0301 	bic.w	r3, r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 8000812:	f107 030f 	add.w	r3, r7, #15
 8000816:	461a      	mov	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff fcb4 	bl	8000188 <nrf_Write>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <nrf_set_RX>:

void nrf_set_RX(NRF24L01* nrf){
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	uint8_t reg=0;
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]
	nrf_RX_DR_enable(nrf);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ff15 	bl	8000664 <nrf_RX_DR_enable>
	nrf_MAX_RT_enable(nrf);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ff7e 	bl	800073c <nrf_MAX_RT_enable>
	nrf_TX_DS_disable(nrf);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff60 	bl	8000706 <nrf_TX_DS_disable>
	nrf_Read(nrf,0x00,&reg);
 8000846:	f107 030f 	add.w	r3, r7, #15
 800084a:	461a      	mov	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fd18 	bl	8000284 <nrf_Read>
	reg|= 0x01;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 800085e:	f107 030f 	add.w	r3, r7, #15
 8000862:	461a      	mov	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff fc8e 	bl	8000188 <nrf_Write>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <nrf_crc_enable>:

void nrf_crc_enable(NRF24L01* nrf){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint8_t reg=0;
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x00,&reg);
 8000880:	f107 030f 	add.w	r3, r7, #15
 8000884:	461a      	mov	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff fcfb 	bl	8000284 <nrf_Read>
	reg|= 0x01<<3;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	b2db      	uxtb	r3, r3
 8000896:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 8000898:	f107 030f 	add.w	r3, r7, #15
 800089c:	461a      	mov	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff fc71 	bl	8000188 <nrf_Write>
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <nrf_crc_encoding>:
	nrf_Read(nrf,0x00,&reg);
	reg&=~(0x01<<3);
	nrf_Write(nrf,0x00,&reg);
}

void nrf_crc_encoding(NRF24L01* nrf,uint8_t byte){
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b084      	sub	sp, #16
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	460b      	mov	r3, r1
 80008b8:	70fb      	strb	r3, [r7, #3]
	uint8_t reg=0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x00,&reg);
 80008be:	f107 030f 	add.w	r3, r7, #15
 80008c2:	461a      	mov	r2, r3
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fcdc 	bl	8000284 <nrf_Read>
	if(byte==1)
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d105      	bne.n	80008de <nrf_crc_encoding+0x30>
		reg&=~(0x01<<2);
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	f023 0304 	bic.w	r3, r3, #4
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	73fb      	strb	r3, [r7, #15]
 80008dc:	e007      	b.n	80008ee <nrf_crc_encoding+0x40>
	else if(byte==2)
 80008de:	78fb      	ldrb	r3, [r7, #3]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d104      	bne.n	80008ee <nrf_crc_encoding+0x40>
		reg|=(0x01<<2);
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x00,&reg);
 80008ee:	f107 030f 	add.w	r3, r7, #15
 80008f2:	461a      	mov	r2, r3
 80008f4:	2100      	movs	r1, #0
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fc46 	bl	8000188 <nrf_Write>
}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <nrf_enable_pipe>:
void nrf_enable_pipe(NRF24L01* nrf, uint8_t pipe){
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
	uint8_t reg=0;
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x02,&reg);
 8000914:	f107 030f 	add.w	r3, r7, #15
 8000918:	461a      	mov	r2, r3
 800091a:	2102      	movs	r1, #2
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fcb1 	bl	8000284 <nrf_Read>
	reg|= 0x01<<pipe;
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	2201      	movs	r2, #1
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	b25a      	sxtb	r2, r3
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	b25b      	sxtb	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	b25b      	sxtb	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x02,&reg);
 8000938:	f107 030f 	add.w	r3, r7, #15
 800093c:	461a      	mov	r2, r3
 800093e:	2102      	movs	r1, #2
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fc21 	bl	8000188 <nrf_Write>
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <nrf_disable_pipe>:

void nrf_disable_pipe(NRF24L01* nrf, uint8_t pipe){
 800094e:	b580      	push	{r7, lr}
 8000950:	b084      	sub	sp, #16
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	460b      	mov	r3, r1
 8000958:	70fb      	strb	r3, [r7, #3]
	uint8_t reg=0;
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]
	nrf_Read(nrf,0x02,&reg);
 800095e:	f107 030f 	add.w	r3, r7, #15
 8000962:	461a      	mov	r2, r3
 8000964:	2102      	movs	r1, #2
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fc8c 	bl	8000284 <nrf_Read>
	reg &= ~(0x01<<pipe);
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	2201      	movs	r2, #1
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	b25b      	sxtb	r3, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	b25a      	sxtb	r2, r3
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	b25b      	sxtb	r3, r3
 800097e:	4013      	ands	r3, r2
 8000980:	b25b      	sxtb	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x02,&reg);
 8000986:	f107 030f 	add.w	r3, r7, #15
 800098a:	461a      	mov	r2, r3
 800098c:	2102      	movs	r1, #2
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fbfa 	bl	8000188 <nrf_Write>
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <nrf_data_length>:

void nrf_data_length(NRF24L01*nrf,uint8_t pipe, uint16_t length){
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
 80009a8:	4613      	mov	r3, r2
 80009aa:	803b      	strh	r3, [r7, #0]
	uint8_t reg[2];
	reg[0]=0x11+pipe;
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	3311      	adds	r3, #17
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	733b      	strb	r3, [r7, #12]
	reg[1]=length;
 80009b4:	883b      	ldrh	r3, [r7, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	737b      	strb	r3, [r7, #13]
	nrf->para.length=length;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	883a      	ldrh	r2, [r7, #0]
 80009be:	80da      	strh	r2, [r3, #6]
	nrf_Write(nrf,reg[0],&reg[1]);
 80009c0:	7b39      	ldrb	r1, [r7, #12]
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	3301      	adds	r3, #1
 80009c8:	461a      	mov	r2, r3
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fbdc 	bl	8000188 <nrf_Write>
}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <nrf_status>:

void nrf_fifo_status(NRF24L01* nrf,uint8_t* output){
	nrf_Read(nrf,0x17,output);
}

void nrf_status(NRF24L01* nrf, uint8_t * output){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	uint8_t address=0x07;
 80009e2:	2307      	movs	r3, #7
 80009e4:	73fb      	strb	r3, [r7, #15]
	LL_GPIO_ResetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	899b      	ldrh	r3, [r3, #12]
 80009ee:	4619      	mov	r1, r3
 80009f0:	4610      	mov	r0, r2
 80009f2:	f7ff fbba 	bl	800016a <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(nrf->SPI,&address,output,1);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	f107 010f 	add.w	r1, r7, #15
 80009fe:	2301      	movs	r3, #1
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	f7ff fd52 	bl	80004aa <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(nrf->chip_select_port,nrf->chip_select_pin);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	689a      	ldr	r2, [r3, #8]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	899b      	ldrh	r3, [r3, #12]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4610      	mov	r0, r2
 8000a12:	f7ff fb9b 	bl	800014c <LL_GPIO_SetOutputPin>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <nrf_enable_dpl>:

void nrf_observe_TX(NRF24L01* nrf, uint8_t * output){
	nrf_Read(nrf,0x08,output);
}

void nrf_enable_dpl(NRF24L01* nrf){
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b084      	sub	sp, #16
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	nrf_Read(nrf,0x1D,&reg);
 8000a26:	f107 030f 	add.w	r3, r7, #15
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	211d      	movs	r1, #29
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fc28 	bl	8000284 <nrf_Read>
	reg|= 0x01<<2;
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x1D,&reg);
 8000a3e:	f107 030f 	add.w	r3, r7, #15
 8000a42:	461a      	mov	r2, r3
 8000a44:	211d      	movs	r1, #29
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fb9e 	bl	8000188 <nrf_Write>

}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <nrf_enable_dpl_pipe>:

void nrf_enable_dpl_pipe(NRF24L01* nrf,uint8_t pipe){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;
	nrf_Read(nrf,0x1C,&reg);
 8000a60:	f107 030f 	add.w	r3, r7, #15
 8000a64:	461a      	mov	r2, r3
 8000a66:	211c      	movs	r1, #28
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fc0b 	bl	8000284 <nrf_Read>
	reg|=0x01<<pipe;
 8000a6e:	78fb      	ldrb	r3, [r7, #3]
 8000a70:	2201      	movs	r2, #1
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	b25a      	sxtb	r2, r3
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	73fb      	strb	r3, [r7, #15]
	nrf_Write(nrf,0x1C,&reg);
 8000a84:	f107 030f 	add.w	r3, r7, #15
 8000a88:	461a      	mov	r2, r3
 8000a8a:	211c      	movs	r1, #28
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fb7b 	bl	8000188 <nrf_Write>
}
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000aa6:	699a      	ldr	r2, [r3, #24]
 8000aa8:	4907      	ldr	r1, [pc, #28]	@ (8000ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ab2:	699a      	ldr	r2, [r3, #24]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aba:	68fb      	ldr	r3, [r7, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <LL_GPIO_ResetOutputPin>:
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	615a      	str	r2, [r3, #20]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
	...

08000aec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000b00:	2004      	movs	r0, #4
 8000b02:	f7ff ffcb 	bl	8000a9c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, CSN_pin_Pin|CE_pin_Pin);
 8000b06:	490a      	ldr	r1, [pc, #40]	@ (8000b30 <MX_GPIO_Init+0x44>)
 8000b08:	480a      	ldr	r0, [pc, #40]	@ (8000b34 <MX_GPIO_Init+0x48>)
 8000b0a:	f7ff ffdf 	bl	8000acc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CSN_pin_Pin|CE_pin_Pin;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_GPIO_Init+0x44>)
 8000b10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b16:	2302      	movs	r3, #2
 8000b18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <MX_GPIO_Init+0x48>)
 8000b24:	f001 fe59 	bl	80027da <LL_GPIO_Init>

}
 8000b28:	bf00      	nop
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	04010809 	.word	0x04010809
 8000b34:	40010800 	.word	0x40010800

08000b38 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_IWDG_Init+0x2c>)
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <MX_IWDG_Init+0x30>)
 8000b40:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <MX_IWDG_Init+0x2c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <MX_IWDG_Init+0x2c>)
 8000b4a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000b4e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_IWDG_Init+0x2c>)
 8000b52:	f000 ffb1 	bl	8001ab8 <HAL_IWDG_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000b5c:	f000 f9d8 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000028 	.word	0x20000028
 8000b68:	40003000 	.word	0x40003000

08000b6c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <LL_RCC_HSI_Enable+0x18>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a03      	ldr	r2, [pc, #12]	@ (8000b84 <LL_RCC_HSI_Enable+0x18>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	40021000 	.word	0x40021000

08000b88 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <LL_RCC_HSI_IsReady+0x20>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	bf0c      	ite	eq
 8000b98:	2301      	moveq	r3, #1
 8000b9a:	2300      	movne	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4903      	ldr	r1, [pc, #12]	@ (8000bd0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	600b      	str	r3, [r1, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <LL_RCC_LSI_Enable+0x18>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bdc:	4a03      	ldr	r2, [pc, #12]	@ (8000bec <LL_RCC_LSI_Enable+0x18>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000

08000bf0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <LL_RCC_LSI_IsReady+0x20>)
 8000bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	bf0c      	ite	eq
 8000c00:	2301      	moveq	r3, #1
 8000c02:	2300      	movne	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <LL_RCC_SetSysClkSource+0x24>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f023 0203 	bic.w	r2, r3, #3
 8000c24:	4904      	ldr	r1, [pc, #16]	@ (8000c38 <LL_RCC_SetSysClkSource+0x24>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	604b      	str	r3, [r1, #4]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <LL_RCC_GetSysClkSource+0x14>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 030c 	and.w	r3, r3, #12
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	40021000 	.word	0x40021000

08000c54 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c64:	4904      	ldr	r1, [pc, #16]	@ (8000c78 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	604b      	str	r3, [r1, #4]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000c8c:	4904      	ldr	r1, [pc, #16]	@ (8000ca0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	604b      	str	r3, [r1, #4]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000cb4:	4904      	ldr	r1, [pc, #16]	@ (8000cc8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	604b      	str	r3, [r1, #4]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <LL_RCC_PLL_Enable+0x18>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a03      	ldr	r2, [pc, #12]	@ (8000ce4 <LL_RCC_PLL_Enable+0x18>)
 8000cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <LL_RCC_PLL_IsReady+0x20>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2301      	moveq	r3, #1
 8000cfc:	2300      	movne	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40021000 	.word	0x40021000

08000d0c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	430b      	orrs	r3, r1
 8000d28:	4903      	ldr	r1, [pc, #12]	@ (8000d38 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000

08000d3c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <LL_FLASH_SetLatency+0x24>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f023 0207 	bic.w	r2, r3, #7
 8000d4c:	4904      	ldr	r1, [pc, #16]	@ (8000d60 <LL_FLASH_SetLatency+0x24>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	600b      	str	r3, [r1, #0]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40022000 	.word	0x40022000

08000d64 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <LL_FLASH_GetLatency+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	40022000 	.word	0x40022000

08000d7c <LL_GPIO_SetOutputPin>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <LL_GPIO_ResetOutputPin>:
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	615a      	str	r2, [r3, #20]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b096      	sub	sp, #88	@ 0x58
 8000dbc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbe:	f000 fb8d 	bl	80014dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc2:	f000 f857 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc6:	f7ff fe91 	bl	8000aec <MX_GPIO_Init>
  MX_TIM1_Init();
 8000dca:	f000 fa97 	bl	80012fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000dce:	f000 fad9 	bl	8001384 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dd2:	f000 fb1b 	bl	800140c <MX_TIM3_Init>
  MX_IWDG_Init();
 8000dd6:	f7ff feaf 	bl	8000b38 <MX_IWDG_Init>
  MX_SPI1_Init();
 8000dda:	f000 f89f 	bl	8000f1c <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */
  uint8_t rx_data[32];
  NRF24L01 nrf;
  nrf24_init(&nrf, SPI1, TX, GPIOA, GPIO_PIN_3, GPIOA, GPIO_PIN_8, 32);
 8000dde:	f107 0010 	add.w	r0, r7, #16
 8000de2:	2320      	movs	r3, #32
 8000de4:	9303      	str	r3, [sp, #12]
 8000de6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dea:	9302      	str	r3, [sp, #8]
 8000dec:	4b1d      	ldr	r3, [pc, #116]	@ (8000e64 <main+0xac>)
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	2308      	movs	r3, #8
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <main+0xac>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	491b      	ldr	r1, [pc, #108]	@ (8000e68 <main+0xb0>)
 8000dfa:	f7ff fadd 	bl	80003b8 <nrf24_init>

  uint8_t addr[5] = {'R','x','A','A','A'};
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8000e6c <main+0xb4>)
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e08:	6018      	str	r0, [r3, #0]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	7019      	strb	r1, [r3, #0]
  nrf_TX_address(&nrf, addr);
 8000e0e:	f107 0208 	add.w	r2, r7, #8
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fbc4 	bl	80005a6 <nrf_TX_address>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


      uint8_t data[] = "ON";
 8000e1e:	4a14      	ldr	r2, [pc, #80]	@ (8000e70 <main+0xb8>)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	4611      	mov	r1, r2
 8000e26:	8019      	strh	r1, [r3, #0]
 8000e28:	3302      	adds	r3, #2
 8000e2a:	0c12      	lsrs	r2, r2, #16
 8000e2c:	701a      	strb	r2, [r3, #0]
        nrf_TX_payload(&nrf,data);
 8000e2e:	1d3a      	adds	r2, r7, #4
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fbc3 	bl	80005c2 <nrf_TX_payload>
        LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_8);
 8000e3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e40:	4808      	ldr	r0, [pc, #32]	@ (8000e64 <main+0xac>)
 8000e42:	f7ff ff9b 	bl	8000d7c <LL_GPIO_SetOutputPin>
        LL_mDelay(15);
 8000e46:	200f      	movs	r0, #15
 8000e48:	f001 fdc2 	bl	80029d0 <LL_mDelay>
        LL_GPIO_ResetOutputPin(GPIOA, GPIO_PIN_8);
 8000e4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e50:	4804      	ldr	r0, [pc, #16]	@ (8000e64 <main+0xac>)
 8000e52:	f7ff ffa2 	bl	8000d9a <LL_GPIO_ResetOutputPin>


        HAL_Delay(1000);  // 1초마다 전송
 8000e56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e5a:	f000 fba1 	bl	80015a0 <HAL_Delay>
  {
 8000e5e:	bf00      	nop
 8000e60:	e7dd      	b.n	8000e1e <main+0x66>
 8000e62:	bf00      	nop
 8000e64:	40010800 	.word	0x40010800
 8000e68:	40013000 	.word	0x40013000
 8000e6c:	08002a94 	.word	0x08002a94
 8000e70:	08002a9c 	.word	0x08002a9c

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f7ff ff5f 	bl	8000d3c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ff70 	bl	8000d64 <LL_FLASH_GetLatency>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d1fa      	bne.n	8000e80 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000e8a:	2010      	movs	r0, #16
 8000e8c:	f7ff fe8e 	bl	8000bac <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000e90:	f7ff fe6c 	bl	8000b6c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000e94:	bf00      	nop
 8000e96:	f7ff fe77 	bl	8000b88 <LL_RCC_HSI_IsReady>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d1fa      	bne.n	8000e96 <SystemClock_Config+0x22>
  {

  }
  LL_RCC_LSI_Enable();
 8000ea0:	f7ff fe98 	bl	8000bd4 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8000ea4:	bf00      	nop
 8000ea6:	f7ff fea3 	bl	8000bf0 <LL_RCC_LSI_IsReady>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d1fa      	bne.n	8000ea6 <SystemClock_Config+0x32>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 8000eb0:	f44f 1160 	mov.w	r1, #3670016	@ 0x380000
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff ff29 	bl	8000d0c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000eba:	f7ff ff07 	bl	8000ccc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ff12 	bl	8000ce8 <LL_RCC_PLL_IsReady>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d1fa      	bne.n	8000ec0 <SystemClock_Config+0x4c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fec2 	bl	8000c54 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000ed0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000ed4:	f7ff fed2 	bl	8000c7c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff fee3 	bl	8000ca4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f7ff fe98 	bl	8000c14 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ee4:	bf00      	nop
 8000ee6:	f7ff fea9 	bl	8000c3c <LL_RCC_GetSysClkSource>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d1fa      	bne.n	8000ee6 <SystemClock_Config+0x72>
  {

  }
  LL_SetSystemCoreClock(64000000);
 8000ef0:	4806      	ldr	r0, [pc, #24]	@ (8000f0c <SystemClock_Config+0x98>)
 8000ef2:	f001 fd91 	bl	8002a18 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 fb06 	bl	8001508 <HAL_InitTick>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f02:	f000 f805 	bl	8000f10 <Error_Handler>
  }
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	03d09000 	.word	0x03d09000

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */


  /* USER CODE END Error_Handler_Debug */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f22:	4a18      	ldr	r2, [pc, #96]	@ (8000f84 <MX_SPI1_Init+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f26:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f50:	2210      	movs	r2, #16
 8000f52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f68:	220a      	movs	r2, #10
 8000f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f6e:	f000 fde7 	bl	8001b40 <HAL_SPI_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f78:	f7ff ffca 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000034 	.word	0x20000034
 8000f84:	40013000 	.word	0x40013000

08000f88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8001010 <HAL_SPI_MspInit+0x88>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d12f      	bne.n	8001008 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <HAL_SPI_MspInit+0x8c>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a19      	ldr	r2, [pc, #100]	@ (8001014 <HAL_SPI_MspInit+0x8c>)
 8000fae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <HAL_SPI_MspInit+0x8c>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_SPI_MspInit+0x8c>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a13      	ldr	r2, [pc, #76]	@ (8001014 <HAL_SPI_MspInit+0x8c>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <HAL_SPI_MspInit+0x8c>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fd8:	23a0      	movs	r3, #160	@ 0xa0
 8000fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480b      	ldr	r0, [pc, #44]	@ (8001018 <HAL_SPI_MspInit+0x90>)
 8000fec:	f000 fbe0 	bl	80017b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ff0:	2340      	movs	r3, #64	@ 0x40
 8000ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <HAL_SPI_MspInit+0x90>)
 8001004:	f000 fbd4 	bl	80017b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40013000 	.word	0x40013000
 8001014:	40021000 	.word	0x40021000
 8001018:	40010800 	.word	0x40010800

0800101c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_MspInit+0x5c>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <HAL_MspInit+0x5c>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_MspInit+0x5c>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <HAL_MspInit+0x5c>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <HAL_MspInit+0x5c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <HAL_MspInit+0x5c>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <HAL_MspInit+0x60>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	4a04      	ldr	r2, [pc, #16]	@ (800107c <HAL_MspInit+0x60>)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <NMI_Handler+0x4>

08001088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 fa4a 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4906      	ldr	r1, [pc, #24]	@ (8001158 <__NVIC_EnableIRQ+0x34>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	@ (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	@ (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	@ 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	@ 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <LL_APB1_GRP1_EnableClock>:
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <LL_APB1_GRP1_EnableClock+0x2c>)
 800121e:	69da      	ldr	r2, [r3, #28]
 8001220:	4907      	ldr	r1, [pc, #28]	@ (8001240 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4313      	orrs	r3, r2
 8001226:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <LL_APB1_GRP1_EnableClock+0x2c>)
 800122a:	69da      	ldr	r2, [r3, #28]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4013      	ands	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <LL_APB2_GRP1_EnableClock>:
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <LL_APB2_GRP1_EnableClock+0x2c>)
 800124e:	699a      	ldr	r2, [r3, #24]
 8001250:	4907      	ldr	r1, [pc, #28]	@ (8001270 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4313      	orrs	r3, r2
 8001256:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <LL_APB2_GRP1_EnableClock+0x2c>)
 800125a:	699a      	ldr	r2, [r3, #24]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4013      	ands	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012a4:	f023 0307 	bic.w	r3, r3, #7
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	609a      	str	r2, [r3, #8]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	605a      	str	r2, [r3, #4]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	609a      	str	r2, [r3, #8]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001310:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001314:	f7ff ff96 	bl	8001244 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001318:	f7ff fef6 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800131c:	4603      	mov	r3, r0
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff44 	bl	80011b0 <NVIC_EncodePriority>
 8001328:	4603      	mov	r3, r0
 800132a:	4619      	mov	r1, r3
 800132c:	2019      	movs	r0, #25
 800132e:	f7ff ff15 	bl	800115c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001332:	2019      	movs	r0, #25
 8001334:	f7ff fef6 	bl	8001124 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 30000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001338:	f247 5330 	movw	r3, #30000	@ 0x7530
 800133c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 50-LL_TIM_IC_FILTER_FDIV1_N2;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_TIM1_Init+0x80>)
 8001344:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	4619      	mov	r1, r3
 8001352:	480b      	ldr	r0, [pc, #44]	@ (8001380 <MX_TIM1_Init+0x84>)
 8001354:	f001 fade 	bl	8002914 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001358:	4809      	ldr	r0, [pc, #36]	@ (8001380 <MX_TIM1_Init+0x84>)
 800135a:	f7ff ff8b 	bl	8001274 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800135e:	2100      	movs	r1, #0
 8001360:	4807      	ldr	r0, [pc, #28]	@ (8001380 <MX_TIM1_Init+0x84>)
 8001362:	f7ff ff96 	bl	8001292 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001366:	2100      	movs	r1, #0
 8001368:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_TIM1_Init+0x84>)
 800136a:	f7ff ffa6 	bl	80012ba <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800136e:	4804      	ldr	r0, [pc, #16]	@ (8001380 <MX_TIM1_Init+0x84>)
 8001370:	f7ff ffb5 	bl	80012de <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	fff00032 	.word	0xfff00032
 8001380:	40012c00 	.word	0x40012c00

08001384 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff ff3b 	bl	8001214 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800139e:	f7ff feb3 	bl	8001108 <__NVIC_GetPriorityGrouping>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff01 	bl	80011b0 <NVIC_EncodePriority>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4619      	mov	r1, r3
 80013b2:	201c      	movs	r0, #28
 80013b4:	f7ff fed2 	bl	800115c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80013b8:	201c      	movs	r0, #28
 80013ba:	f7ff feb3 	bl	8001124 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 3000-LL_TIM_IC_FILTER_FDIV1_N2;
 80013be:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80013c2:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP_DOWN;
 80013c4:	2360      	movs	r3, #96	@ 0x60
 80013c6:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4000;
 80013c8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80013cc:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80013da:	f001 fa9b 	bl	8002914 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80013de:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80013e2:	f7ff ff47 	bl	8001274 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80013e6:	2100      	movs	r1, #0
 80013e8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80013ec:	f7ff ff51 	bl	8001292 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80013f0:	2100      	movs	r1, #0
 80013f2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80013f6:	f7ff ff60 	bl	80012ba <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80013fa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80013fe:	f7ff ff6e 	bl	80012de <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001420:	2002      	movs	r0, #2
 8001422:	f7ff fef7 	bl	8001214 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001426:	f7ff fe6f 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800142a:	4603      	mov	r3, r0
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff febd 	bl	80011b0 <NVIC_EncodePriority>
 8001436:	4603      	mov	r3, r0
 8001438:	4619      	mov	r1, r3
 800143a:	201d      	movs	r0, #29
 800143c:	f7ff fe8e 	bl	800115c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001440:	201d      	movs	r0, #29
 8001442:	f7ff fe6f 	bl	8001124 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 30000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001446:	f247 5330 	movw	r3, #30000	@ 0x7530
 800144a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 2000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001450:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <MX_TIM3_Init+0x7c>)
 8001452:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	480b      	ldr	r0, [pc, #44]	@ (800148c <MX_TIM3_Init+0x80>)
 800145e:	f001 fa59 	bl	8002914 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001462:	480a      	ldr	r0, [pc, #40]	@ (800148c <MX_TIM3_Init+0x80>)
 8001464:	f7ff ff06 	bl	8001274 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001468:	2100      	movs	r1, #0
 800146a:	4808      	ldr	r0, [pc, #32]	@ (800148c <MX_TIM3_Init+0x80>)
 800146c:	f7ff ff11 	bl	8001292 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001470:	2100      	movs	r1, #0
 8001472:	4806      	ldr	r0, [pc, #24]	@ (800148c <MX_TIM3_Init+0x80>)
 8001474:	f7ff ff21 	bl	80012ba <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <MX_TIM3_Init+0x80>)
 800147a:	f7ff ff30 	bl	80012de <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	fff007d0 	.word	0xfff007d0
 800148c:	40000400 	.word	0x40000400

08001490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001490:	f7ff fe34 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001494:	480b      	ldr	r0, [pc, #44]	@ (80014c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001496:	490c      	ldr	r1, [pc, #48]	@ (80014c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001498:	4a0c      	ldr	r2, [pc, #48]	@ (80014cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a09      	ldr	r2, [pc, #36]	@ (80014d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014ac:	4c09      	ldr	r4, [pc, #36]	@ (80014d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ba:	f001 fabb 	bl	8002a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014be:	f7ff fc7b 	bl	8000db8 <main>
  bx lr
 80014c2:	4770      	bx	lr
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014cc:	08002aa8 	.word	0x08002aa8
  ldr r2, =_sbss
 80014d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014d4:	20000090 	.word	0x20000090

080014d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_2_IRQHandler>
	...

080014dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_Init+0x28>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <HAL_Init+0x28>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 f92b 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 f808 	bl	8001508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f8:	f7ff fd90 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40022000 	.word	0x40022000

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <HAL_InitTick+0x54>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <HAL_InitTick+0x58>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f935 	bl	8001796 <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00e      	b.n	8001554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d80a      	bhi.n	8001552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f90b 	bl	800175e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001548:	4a06      	ldr	r2, [pc, #24]	@ (8001564 <HAL_InitTick+0x5c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000000 	.word	0x20000000
 8001560:	20000008 	.word	0x20000008
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <HAL_IncTick+0x1c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <HAL_IncTick+0x20>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a03      	ldr	r2, [pc, #12]	@ (8001588 <HAL_IncTick+0x20>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	20000008 	.word	0x20000008
 8001588:	2000008c 	.word	0x2000008c

0800158c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b02      	ldr	r3, [pc, #8]	@ (800159c <HAL_GetTick+0x10>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	2000008c 	.word	0x2000008c

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff fff0 	bl	800158c <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d005      	beq.n	80015c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_Delay+0x44>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c6:	bf00      	nop
 80015c8:	f7ff ffe0 	bl	800158c <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d8f7      	bhi.n	80015c8 <HAL_Delay+0x28>
  {
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008

080015e8 <__NVIC_SetPriorityGrouping>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	@ (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_SetPriority>:
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	@ (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	@ (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	@ 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	@ 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f7ff ff90 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff49 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff5e 	bl	8001630 <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff90 	bl	80016a0 <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5f 	bl	800164c <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffb0 	bl	8001704 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b08b      	sub	sp, #44	@ 0x2c
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c2:	e169      	b.n	8001a98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c4:	2201      	movs	r2, #1
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8158 	bne.w	8001a92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4a9a      	ldr	r2, [pc, #616]	@ (8001a50 <HAL_GPIO_Init+0x2a0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d05e      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
 80017ec:	4a98      	ldr	r2, [pc, #608]	@ (8001a50 <HAL_GPIO_Init+0x2a0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d875      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 80017f2:	4a98      	ldr	r2, [pc, #608]	@ (8001a54 <HAL_GPIO_Init+0x2a4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d058      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
 80017f8:	4a96      	ldr	r2, [pc, #600]	@ (8001a54 <HAL_GPIO_Init+0x2a4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d86f      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 80017fe:	4a96      	ldr	r2, [pc, #600]	@ (8001a58 <HAL_GPIO_Init+0x2a8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d052      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
 8001804:	4a94      	ldr	r2, [pc, #592]	@ (8001a58 <HAL_GPIO_Init+0x2a8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d869      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 800180a:	4a94      	ldr	r2, [pc, #592]	@ (8001a5c <HAL_GPIO_Init+0x2ac>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d04c      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
 8001810:	4a92      	ldr	r2, [pc, #584]	@ (8001a5c <HAL_GPIO_Init+0x2ac>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d863      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 8001816:	4a92      	ldr	r2, [pc, #584]	@ (8001a60 <HAL_GPIO_Init+0x2b0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d046      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
 800181c:	4a90      	ldr	r2, [pc, #576]	@ (8001a60 <HAL_GPIO_Init+0x2b0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d85d      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 8001822:	2b12      	cmp	r3, #18
 8001824:	d82a      	bhi.n	800187c <HAL_GPIO_Init+0xcc>
 8001826:	2b12      	cmp	r3, #18
 8001828:	d859      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 800182a:	a201      	add	r2, pc, #4	@ (adr r2, 8001830 <HAL_GPIO_Init+0x80>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	080018ab 	.word	0x080018ab
 8001834:	08001885 	.word	0x08001885
 8001838:	08001897 	.word	0x08001897
 800183c:	080018d9 	.word	0x080018d9
 8001840:	080018df 	.word	0x080018df
 8001844:	080018df 	.word	0x080018df
 8001848:	080018df 	.word	0x080018df
 800184c:	080018df 	.word	0x080018df
 8001850:	080018df 	.word	0x080018df
 8001854:	080018df 	.word	0x080018df
 8001858:	080018df 	.word	0x080018df
 800185c:	080018df 	.word	0x080018df
 8001860:	080018df 	.word	0x080018df
 8001864:	080018df 	.word	0x080018df
 8001868:	080018df 	.word	0x080018df
 800186c:	080018df 	.word	0x080018df
 8001870:	080018df 	.word	0x080018df
 8001874:	0800188d 	.word	0x0800188d
 8001878:	080018a1 	.word	0x080018a1
 800187c:	4a79      	ldr	r2, [pc, #484]	@ (8001a64 <HAL_GPIO_Init+0x2b4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001882:	e02c      	b.n	80018de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	623b      	str	r3, [r7, #32]
          break;
 800188a:	e029      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	3304      	adds	r3, #4
 8001892:	623b      	str	r3, [r7, #32]
          break;
 8001894:	e024      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	3308      	adds	r3, #8
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e01f      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	330c      	adds	r3, #12
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e01a      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018b2:	2304      	movs	r3, #4
 80018b4:	623b      	str	r3, [r7, #32]
          break;
 80018b6:	e013      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c0:	2308      	movs	r3, #8
 80018c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	611a      	str	r2, [r3, #16]
          break;
 80018ca:	e009      	b.n	80018e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018cc:	2308      	movs	r3, #8
 80018ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	615a      	str	r2, [r3, #20]
          break;
 80018d6:	e003      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
          break;
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          break;
 80018de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2bff      	cmp	r3, #255	@ 0xff
 80018e4:	d801      	bhi.n	80018ea <HAL_GPIO_Init+0x13a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	e001      	b.n	80018ee <HAL_GPIO_Init+0x13e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3304      	adds	r3, #4
 80018ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2bff      	cmp	r3, #255	@ 0xff
 80018f4:	d802      	bhi.n	80018fc <HAL_GPIO_Init+0x14c>
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	e002      	b.n	8001902 <HAL_GPIO_Init+0x152>
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	3b08      	subs	r3, #8
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	210f      	movs	r1, #15
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	401a      	ands	r2, r3
 8001914:	6a39      	ldr	r1, [r7, #32]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	431a      	orrs	r2, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 80b1 	beq.w	8001a92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001930:	4b4d      	ldr	r3, [pc, #308]	@ (8001a68 <HAL_GPIO_Init+0x2b8>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a4c      	ldr	r2, [pc, #304]	@ (8001a68 <HAL_GPIO_Init+0x2b8>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a68 <HAL_GPIO_Init+0x2b8>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001948:	4a48      	ldr	r2, [pc, #288]	@ (8001a6c <HAL_GPIO_Init+0x2bc>)
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a40      	ldr	r2, [pc, #256]	@ (8001a70 <HAL_GPIO_Init+0x2c0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d013      	beq.n	800199c <HAL_GPIO_Init+0x1ec>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3f      	ldr	r2, [pc, #252]	@ (8001a74 <HAL_GPIO_Init+0x2c4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d00d      	beq.n	8001998 <HAL_GPIO_Init+0x1e8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a78 <HAL_GPIO_Init+0x2c8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0x1e4>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a3d      	ldr	r2, [pc, #244]	@ (8001a7c <HAL_GPIO_Init+0x2cc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_GPIO_Init+0x1e0>
 800198c:	2303      	movs	r3, #3
 800198e:	e006      	b.n	800199e <HAL_GPIO_Init+0x1ee>
 8001990:	2304      	movs	r3, #4
 8001992:	e004      	b.n	800199e <HAL_GPIO_Init+0x1ee>
 8001994:	2302      	movs	r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x1ee>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_GPIO_Init+0x1ee>
 800199c:	2300      	movs	r3, #0
 800199e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a0:	f002 0203 	and.w	r2, r2, #3
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	4093      	lsls	r3, r2
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ae:	492f      	ldr	r1, [pc, #188]	@ (8001a6c <HAL_GPIO_Init+0x2bc>)
 80019b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	492c      	ldr	r1, [pc, #176]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	4928      	ldr	r1, [pc, #160]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f0:	4b23      	ldr	r3, [pc, #140]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	4922      	ldr	r1, [pc, #136]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019fe:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	491e      	ldr	r1, [pc, #120]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d006      	beq.n	8001a26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a18:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	4918      	ldr	r1, [pc, #96]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	4914      	ldr	r1, [pc, #80]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d021      	beq.n	8001a84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a40:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	490e      	ldr	r1, [pc, #56]	@ (8001a80 <HAL_GPIO_Init+0x2d0>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	e021      	b.n	8001a92 <HAL_GPIO_Init+0x2e2>
 8001a4e:	bf00      	nop
 8001a50:	10320000 	.word	0x10320000
 8001a54:	10310000 	.word	0x10310000
 8001a58:	10220000 	.word	0x10220000
 8001a5c:	10210000 	.word	0x10210000
 8001a60:	10120000 	.word	0x10120000
 8001a64:	10110000 	.word	0x10110000
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	40010800 	.word	0x40010800
 8001a74:	40010c00 	.word	0x40010c00
 8001a78:	40011000 	.word	0x40011000
 8001a7c:	40011400 	.word	0x40011400
 8001a80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4909      	ldr	r1, [pc, #36]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	3301      	adds	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f47f ae8e 	bne.w	80017c4 <HAL_GPIO_Init+0x14>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	372c      	adds	r7, #44	@ 0x2c
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e036      	b.n	8001b38 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001adc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6852      	ldr	r2, [r2, #4]
 8001ae6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6892      	ldr	r2, [r2, #8]
 8001af0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001af2:	f7ff fd4b 	bl	800158c <HAL_GetTick>
 8001af6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001af8:	e011      	b.n	8001b1e <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001afa:	f7ff fd47 	bl	800158c <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f241 323c 	movw	r2, #4924	@ 0x133c
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d908      	bls.n	8001b1e <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e00c      	b.n	8001b38 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e6      	bne.n	8001afa <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001b34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e076      	b.n	8001c40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d108      	bne.n	8001b6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b62:	d009      	beq.n	8001b78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
 8001b6a:	e005      	b.n	8001b78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff f9f8 	bl	8000f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfc:	ea42 0103 	orr.w	r1, r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c04:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	0c1a      	lsrs	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f002 0204 	and.w	r2, r2, #4
 8001c1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c58:	f7ff fc98 	bl	800158c <HAL_GetTick>
 8001c5c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d001      	beq.n	8001c72 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e12a      	b.n	8001ec8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <HAL_SPI_Transmit+0x36>
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e122      	b.n	8001ec8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_SPI_Transmit+0x48>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e11b      	b.n	8001ec8 <HAL_SPI_Transmit+0x280>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	88fa      	ldrh	r2, [r7, #6]
 8001cb0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	88fa      	ldrh	r2, [r7, #6]
 8001cb6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cde:	d10f      	bne.n	8001d00 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cfe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0a:	2b40      	cmp	r3, #64	@ 0x40
 8001d0c:	d007      	beq.n	8001d1e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d26:	d152      	bne.n	8001dce <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HAL_SPI_Transmit+0xee>
 8001d30:	8b7b      	ldrh	r3, [r7, #26]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d145      	bne.n	8001dc2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	881a      	ldrh	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	1c9a      	adds	r2, r3, #2
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d5a:	e032      	b.n	8001dc2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d112      	bne.n	8001d90 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	881a      	ldrh	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	1c9a      	adds	r2, r3, #2
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001d8e:	e018      	b.n	8001dc2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d90:	f7ff fbfc 	bl	800158c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d803      	bhi.n	8001da8 <HAL_SPI_Transmit+0x160>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da6:	d102      	bne.n	8001dae <HAL_SPI_Transmit+0x166>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e082      	b.n	8001ec8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1c7      	bne.n	8001d5c <HAL_SPI_Transmit+0x114>
 8001dcc:	e053      	b.n	8001e76 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_SPI_Transmit+0x194>
 8001dd6:	8b7b      	ldrh	r3, [r7, #26]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d147      	bne.n	8001e6c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	330c      	adds	r3, #12
 8001de6:	7812      	ldrb	r2, [r2, #0]
 8001de8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e02:	e033      	b.n	8001e6c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d113      	bne.n	8001e3a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	330c      	adds	r3, #12
 8001e1c:	7812      	ldrb	r2, [r2, #0]
 8001e1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e38:	e018      	b.n	8001e6c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e3a:	f7ff fba7 	bl	800158c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d803      	bhi.n	8001e52 <HAL_SPI_Transmit+0x20a>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d102      	bne.n	8001e58 <HAL_SPI_Transmit+0x210>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e02d      	b.n	8001ec8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1c6      	bne.n	8001e04 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	6839      	ldr	r1, [r7, #0]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fbc4 	bl	8002608 <SPI_EndRxTxTransaction>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10a      	bne.n	8001eaa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
  }
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d001      	beq.n	8001ef0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001eec:	2302      	movs	r3, #2
 8001eee:	e104      	b.n	80020fa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ef8:	d112      	bne.n	8001f20 <HAL_SPI_Receive+0x50>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10e      	bne.n	8001f20 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2204      	movs	r2, #4
 8001f06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f8f3 	bl	8002102 <HAL_SPI_TransmitReceive>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	e0ec      	b.n	80020fa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f20:	f7ff fb34 	bl	800158c <HAL_GetTick>
 8001f24:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_SPI_Receive+0x62>
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0e1      	b.n	80020fa <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_SPI_Receive+0x74>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e0da      	b.n	80020fa <HAL_SPI_Receive+0x22a>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	88fa      	ldrh	r2, [r7, #6]
 8001f64:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	88fa      	ldrh	r2, [r7, #6]
 8001f6a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f92:	d10f      	bne.n	8001fb4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001fb2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fbe:	2b40      	cmp	r3, #64	@ 0x40
 8001fc0:	d007      	beq.n	8001fd2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d170      	bne.n	80020bc <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001fda:	e035      	b.n	8002048 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d115      	bne.n	8002016 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f103 020c 	add.w	r2, r3, #12
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff6:	7812      	ldrb	r2, [r2, #0]
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002014:	e018      	b.n	8002048 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002016:	f7ff fab9 	bl	800158c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d803      	bhi.n	800202e <HAL_SPI_Receive+0x15e>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d102      	bne.n	8002034 <HAL_SPI_Receive+0x164>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e058      	b.n	80020fa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1c4      	bne.n	8001fdc <HAL_SPI_Receive+0x10c>
 8002052:	e038      	b.n	80020c6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d113      	bne.n	800208a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800206c:	b292      	uxth	r2, r2
 800206e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002074:	1c9a      	adds	r2, r3, #2
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002088:	e018      	b.n	80020bc <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800208a:	f7ff fa7f 	bl	800158c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d803      	bhi.n	80020a2 <HAL_SPI_Receive+0x1d2>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d102      	bne.n	80020a8 <HAL_SPI_Receive+0x1d8>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e01e      	b.n	80020fa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1c6      	bne.n	8002054 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	6839      	ldr	r1, [r7, #0]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fa4a 	bl	8002564 <SPI_EndRxTransaction>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
  }
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b08a      	sub	sp, #40	@ 0x28
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002110:	2301      	movs	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002114:	f7ff fa3a 	bl	800158c <HAL_GetTick>
 8002118:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002120:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800212c:	7ffb      	ldrb	r3, [r7, #31]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d00c      	beq.n	800214c <HAL_SPI_TransmitReceive+0x4a>
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002138:	d106      	bne.n	8002148 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <HAL_SPI_TransmitReceive+0x46>
 8002142:	7ffb      	ldrb	r3, [r7, #31]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d001      	beq.n	800214c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
 800214a:	e17f      	b.n	800244c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_SPI_TransmitReceive+0x5c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_SPI_TransmitReceive+0x5c>
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e174      	b.n	800244c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_SPI_TransmitReceive+0x6e>
 800216c:	2302      	movs	r3, #2
 800216e:	e16d      	b.n	800244c <HAL_SPI_TransmitReceive+0x34a>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b04      	cmp	r3, #4
 8002182:	d003      	beq.n	800218c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2205      	movs	r2, #5
 8002188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	887a      	ldrh	r2, [r7, #2]
 80021a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021cc:	2b40      	cmp	r3, #64	@ 0x40
 80021ce:	d007      	beq.n	80021e0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021e8:	d17e      	bne.n	80022e8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_SPI_TransmitReceive+0xf6>
 80021f2:	8afb      	ldrh	r3, [r7, #22]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d16c      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fc:	881a      	ldrh	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002208:	1c9a      	adds	r2, r3, #2
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800221c:	e059      	b.n	80022d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b02      	cmp	r3, #2
 800222a:	d11b      	bne.n	8002264 <HAL_SPI_TransmitReceive+0x162>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d016      	beq.n	8002264 <HAL_SPI_TransmitReceive+0x162>
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	2b01      	cmp	r3, #1
 800223a:	d113      	bne.n	8002264 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002240:	881a      	ldrh	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	1c9a      	adds	r2, r3, #2
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d119      	bne.n	80022a6 <HAL_SPI_TransmitReceive+0x1a4>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d014      	beq.n	80022a6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002286:	b292      	uxth	r2, r2
 8002288:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228e:	1c9a      	adds	r2, r3, #2
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022a2:	2301      	movs	r3, #1
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022a6:	f7ff f971 	bl	800158c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d80d      	bhi.n	80022d2 <HAL_SPI_TransmitReceive+0x1d0>
 80022b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d009      	beq.n	80022d2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e0bc      	b.n	800244c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1a0      	bne.n	800221e <HAL_SPI_TransmitReceive+0x11c>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d19b      	bne.n	800221e <HAL_SPI_TransmitReceive+0x11c>
 80022e6:	e082      	b.n	80023ee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_SPI_TransmitReceive+0x1f4>
 80022f0:	8afb      	ldrh	r3, [r7, #22]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d171      	bne.n	80023da <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	330c      	adds	r3, #12
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800231c:	e05d      	b.n	80023da <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d11c      	bne.n	8002366 <HAL_SPI_TransmitReceive+0x264>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d017      	beq.n	8002366 <HAL_SPI_TransmitReceive+0x264>
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	2b01      	cmp	r3, #1
 800233a:	d114      	bne.n	8002366 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	7812      	ldrb	r2, [r2, #0]
 8002348:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d119      	bne.n	80023a8 <HAL_SPI_TransmitReceive+0x2a6>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d014      	beq.n	80023a8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023a4:	2301      	movs	r3, #1
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023a8:	f7ff f8f0 	bl	800158c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d803      	bhi.n	80023c0 <HAL_SPI_TransmitReceive+0x2be>
 80023b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d102      	bne.n	80023c6 <HAL_SPI_TransmitReceive+0x2c4>
 80023c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e038      	b.n	800244c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d19c      	bne.n	800231e <HAL_SPI_TransmitReceive+0x21c>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d197      	bne.n	800231e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ee:	6a3a      	ldr	r2, [r7, #32]
 80023f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f908 	bl	8002608 <SPI_EndRxTxTransaction>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d008      	beq.n	8002410 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e01d      	b.n	800244c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800244a:	2300      	movs	r3, #0
  }
}
 800244c:	4618      	mov	r0, r3
 800244e:	3728      	adds	r7, #40	@ 0x28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002464:	f7ff f892 	bl	800158c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4413      	add	r3, r2
 8002472:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002474:	f7ff f88a 	bl	800158c <HAL_GetTick>
 8002478:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800247a:	4b39      	ldr	r3, [pc, #228]	@ (8002560 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	015b      	lsls	r3, r3, #5
 8002480:	0d1b      	lsrs	r3, r3, #20
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800248a:	e054      	b.n	8002536 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002492:	d050      	beq.n	8002536 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002494:	f7ff f87a 	bl	800158c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d902      	bls.n	80024aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d13d      	bne.n	8002526 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024c2:	d111      	bne.n	80024e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024cc:	d004      	beq.n	80024d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d6:	d107      	bne.n	80024e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024f0:	d10f      	bne.n	8002512 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002510:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e017      	b.n	8002556 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3b01      	subs	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4013      	ands	r3, r2
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	429a      	cmp	r2, r3
 8002544:	bf0c      	ite	eq
 8002546:	2301      	moveq	r3, #1
 8002548:	2300      	movne	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	429a      	cmp	r2, r3
 8002552:	d19b      	bne.n	800248c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000000 	.word	0x20000000

08002564 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002578:	d111      	bne.n	800259e <SPI_EndRxTransaction+0x3a>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002582:	d004      	beq.n	800258e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258c:	d107      	bne.n	800259e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800259c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025a6:	d117      	bne.n	80025d8 <SPI_EndRxTransaction+0x74>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b0:	d112      	bne.n	80025d8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2200      	movs	r2, #0
 80025ba:	2101      	movs	r1, #1
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7ff ff49 	bl	8002454 <SPI_WaitFlagStateUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01a      	beq.n	80025fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e013      	b.n	8002600 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2200      	movs	r2, #0
 80025e0:	2180      	movs	r1, #128	@ 0x80
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff ff36 	bl	8002454 <SPI_WaitFlagStateUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f2:	f043 0220 	orr.w	r2, r3, #32
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e000      	b.n	8002600 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2201      	movs	r2, #1
 800261c:	2102      	movs	r1, #2
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff ff18 	bl	8002454 <SPI_WaitFlagStateUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e013      	b.n	8002662 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2200      	movs	r2, #0
 8002642:	2180      	movs	r1, #128	@ 0x80
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7ff ff05 	bl	8002454 <SPI_WaitFlagStateUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e000      	b.n	8002662 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <LL_GPIO_SetPinMode>:
{
 800266a:	b490      	push	{r4, r7}
 800266c:	b088      	sub	sp, #32
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	461a      	mov	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	0e1b      	lsrs	r3, r3, #24
 800267e:	4413      	add	r3, r2
 8002680:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002682:	6822      	ldr	r2, [r4, #0]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	210f      	movs	r1, #15
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	401a      	ands	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	61bb      	str	r3, [r7, #24]
  return result;
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	4313      	orrs	r3, r2
 80026c2:	6023      	str	r3, [r4, #0]
}
 80026c4:	bf00      	nop
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc90      	pop	{r4, r7}
 80026cc:	4770      	bx	lr

080026ce <LL_GPIO_SetPinSpeed>:
{
 80026ce:	b490      	push	{r4, r7}
 80026d0:	b088      	sub	sp, #32
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	461a      	mov	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	0e1b      	lsrs	r3, r3, #24
 80026e2:	4413      	add	r3, r2
 80026e4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80026e6:	6822      	ldr	r2, [r4, #0]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	613b      	str	r3, [r7, #16]
  return result;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	2103      	movs	r1, #3
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	401a      	ands	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	61bb      	str	r3, [r7, #24]
  return result;
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	6023      	str	r3, [r4, #0]
}
 8002728:	bf00      	nop
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bc90      	pop	{r4, r7}
 8002730:	4770      	bx	lr

08002732 <LL_GPIO_SetPinOutputType>:
{
 8002732:	b490      	push	{r4, r7}
 8002734:	b088      	sub	sp, #32
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	461a      	mov	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	0e1b      	lsrs	r3, r3, #24
 8002746:	4413      	add	r3, r2
 8002748:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800274a:	6822      	ldr	r2, [r4, #0]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	613b      	str	r3, [r7, #16]
  return result;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	2104      	movs	r1, #4
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	401a      	ands	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	61bb      	str	r3, [r7, #24]
  return result;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	6023      	str	r3, [r4, #0]
}
 800278c:	bf00      	nop
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bc90      	pop	{r4, r7}
 8002794:	4770      	bx	lr

08002796 <LL_GPIO_SetPinPull>:
{
 8002796:	b480      	push	{r7}
 8002798:	b087      	sub	sp, #28
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	43db      	mvns	r3, r3
 80027ac:	401a      	ands	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	613b      	str	r3, [r7, #16]
  return result;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4619      	mov	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	408b      	lsls	r3, r1
 80027ca:	431a      	orrs	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	60da      	str	r2, [r3, #12]
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b088      	sub	sp, #32
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	0c1b      	lsrs	r3, r3, #16
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	60fb      	str	r3, [r7, #12]
  return result;
 80027fa:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002804:	e044      	b.n	8002890 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002806:	2201      	movs	r2, #1
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	409a      	lsls	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d03a      	beq.n	800288a <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b07      	cmp	r3, #7
 8002818:	d806      	bhi.n	8002828 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800281a:	f240 1201 	movw	r2, #257	@ 0x101
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e008      	b.n	800283a <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3b08      	subs	r3, #8
 800282c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002838:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b08      	cmp	r3, #8
 8002840:	d106      	bne.n	8002850 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	461a      	mov	r2, r3
 8002848:	69b9      	ldr	r1, [r7, #24]
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffa3 	bl	8002796 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	461a      	mov	r2, r3
 8002856:	69b9      	ldr	r1, [r7, #24]
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff06 	bl	800266a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d003      	beq.n	800286e <LL_GPIO_Init+0x94>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b09      	cmp	r3, #9
 800286c:	d10d      	bne.n	800288a <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	461a      	mov	r2, r3
 8002874:	69b9      	ldr	r1, [r7, #24]
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff29 	bl	80026ce <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	461a      	mov	r2, r3
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff54 	bl	8002732 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3301      	adds	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1b4      	bne.n	8002806 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <LL_TIM_SetPrescaler>:
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <LL_TIM_SetAutoReload>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <LL_TIM_SetRepetitionCounter>:
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f043 0201 	orr.w	r2, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	615a      	str	r2, [r3, #20]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
	...

08002914 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a27      	ldr	r2, [pc, #156]	@ (80029c4 <LL_TIM_Init+0xb0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00b      	beq.n	8002944 <LL_TIM_Init+0x30>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002932:	d007      	beq.n	8002944 <LL_TIM_Init+0x30>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a24      	ldr	r2, [pc, #144]	@ (80029c8 <LL_TIM_Init+0xb4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d003      	beq.n	8002944 <LL_TIM_Init+0x30>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a23      	ldr	r2, [pc, #140]	@ (80029cc <LL_TIM_Init+0xb8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d106      	bne.n	8002952 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1b      	ldr	r2, [pc, #108]	@ (80029c4 <LL_TIM_Init+0xb0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00b      	beq.n	8002972 <LL_TIM_Init+0x5e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002960:	d007      	beq.n	8002972 <LL_TIM_Init+0x5e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a18      	ldr	r2, [pc, #96]	@ (80029c8 <LL_TIM_Init+0xb4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <LL_TIM_Init+0x5e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a17      	ldr	r2, [pc, #92]	@ (80029cc <LL_TIM_Init+0xb8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d106      	bne.n	8002980 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff97 	bl	80028c0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff84 	bl	80028a6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a08      	ldr	r2, [pc, #32]	@ (80029c4 <LL_TIM_Init+0xb0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d105      	bne.n	80029b2 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff94 	bl	80028da <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ff9e 	bl	80028f4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800

080029d0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80029d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a14 <LL_mDelay+0x44>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80029de:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d00c      	beq.n	8002a02 <LL_mDelay+0x32>
  {
    Delay++;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3301      	adds	r3, #1
 80029ec:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80029ee:	e008      	b.n	8002a02 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80029f0:	4b08      	ldr	r3, [pc, #32]	@ (8002a14 <LL_mDelay+0x44>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <LL_mDelay+0x32>
    {
      Delay--;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f3      	bne.n	80029f0 <LL_mDelay+0x20>
    }
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002a20:	4a03      	ldr	r2, [pc, #12]	@ (8002a30 <LL_SetSystemCoreClock+0x18>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6013      	str	r3, [r2, #0]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	20000000 	.word	0x20000000

08002a34 <__libc_init_array>:
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	2600      	movs	r6, #0
 8002a38:	4d0c      	ldr	r5, [pc, #48]	@ (8002a6c <__libc_init_array+0x38>)
 8002a3a:	4c0d      	ldr	r4, [pc, #52]	@ (8002a70 <__libc_init_array+0x3c>)
 8002a3c:	1b64      	subs	r4, r4, r5
 8002a3e:	10a4      	asrs	r4, r4, #2
 8002a40:	42a6      	cmp	r6, r4
 8002a42:	d109      	bne.n	8002a58 <__libc_init_array+0x24>
 8002a44:	f000 f81a 	bl	8002a7c <_init>
 8002a48:	2600      	movs	r6, #0
 8002a4a:	4d0a      	ldr	r5, [pc, #40]	@ (8002a74 <__libc_init_array+0x40>)
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a78 <__libc_init_array+0x44>)
 8002a4e:	1b64      	subs	r4, r4, r5
 8002a50:	10a4      	asrs	r4, r4, #2
 8002a52:	42a6      	cmp	r6, r4
 8002a54:	d105      	bne.n	8002a62 <__libc_init_array+0x2e>
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
 8002a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5c:	4798      	blx	r3
 8002a5e:	3601      	adds	r6, #1
 8002a60:	e7ee      	b.n	8002a40 <__libc_init_array+0xc>
 8002a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a66:	4798      	blx	r3
 8002a68:	3601      	adds	r6, #1
 8002a6a:	e7f2      	b.n	8002a52 <__libc_init_array+0x1e>
 8002a6c:	08002aa0 	.word	0x08002aa0
 8002a70:	08002aa0 	.word	0x08002aa0
 8002a74:	08002aa0 	.word	0x08002aa0
 8002a78:	08002aa4 	.word	0x08002aa4

08002a7c <_init>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	bf00      	nop
 8002a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a82:	bc08      	pop	{r3}
 8002a84:	469e      	mov	lr, r3
 8002a86:	4770      	bx	lr

08002a88 <_fini>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr
